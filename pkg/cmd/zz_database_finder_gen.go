// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-resource-finder'; DO NOT EDIT

package cmd

import (
	"fmt"
	"strings"

	"github.com/sacloud/libsacloud/v2/sacloud"
	"github.com/sacloud/libsacloud/v2/sacloud/search"
	"github.com/sacloud/libsacloud/v2/sacloud/types"
	"github.com/sacloud/usacloud/pkg/cli"
	"github.com/sacloud/usacloud/pkg/params"
	"github.com/sacloud/usacloud/pkg/util"
)

func findDatabaseReadTargets(ctx cli.Context, param *params.ReadDatabaseParam) ([]types.ID, error) {
	var ids []types.ID
	args := ctx.Args()
	client := sacloud.NewDatabaseOp(ctx.Client())

	if len(args) == 0 {
		if len(param.Selector) == 0 {
			return ids, fmt.Errorf("ID or Name argument or --selector option is required")
		}
		res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{})
		if err != nil {
			return ids, fmt.Errorf("finding resource id is failed: %s", err)
		}
		for _, v := range res.Databases {
			if util.HasTags(&v, param.Selector) {
				ids = append(ids, v.ID)
			}
		}
		if len(ids) == 0 {
			return ids, fmt.Errorf("finding resource id is failed: not found with search param [tags=%s]", param.Selector)
		}
	} else {
		for _, arg := range args {
			for _, a := range strings.Split(arg, "\n") {
				idOrName := a
				if id := types.StringID(idOrName); !id.IsEmpty() {
					ids = append(ids, id)
				} else {
					res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{
						Filter: search.Filter{
							search.Key("Name"): search.ExactMatch(idOrName),
						},
					})
					if err != nil {
						return ids, fmt.Errorf("finding resource id is failed: %s", err)
					}
					if res.Count == 0 {
						return ids, fmt.Errorf("finding resource id is failed: not found with search param [%q]", idOrName)
					}
					for _, v := range res.Databases {
						if len(param.Selector) == 0 || util.HasTags(&v, param.Selector) {
							ids = append(ids, v.ID)
						}
					}
				}
			}

		}

	}

	ids = util.UniqIDs(ids)
	if len(ids) == 0 {
		return ids, fmt.Errorf("finding resource is is failed: not found")
	}
	if len(ids) != 1 {
		return ids, fmt.Errorf("could not run with multiple targets: %v", ids)
	}

	return ids, nil
}

func findDatabaseUpdateTargets(ctx cli.Context, param *params.UpdateDatabaseParam) ([]types.ID, error) {
	var ids []types.ID
	args := ctx.Args()
	client := sacloud.NewDatabaseOp(ctx.Client())

	if len(args) == 0 {
		if len(param.Selector) == 0 {
			return ids, fmt.Errorf("ID or Name argument or --selector option is required")
		}
		res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{})
		if err != nil {
			return ids, fmt.Errorf("finding resource id is failed: %s", err)
		}
		for _, v := range res.Databases {
			if util.HasTags(&v, param.Selector) {
				ids = append(ids, v.ID)
			}
		}
		if len(ids) == 0 {
			return ids, fmt.Errorf("finding resource id is failed: not found with search param [tags=%s]", param.Selector)
		}
	} else {
		for _, arg := range args {
			for _, a := range strings.Split(arg, "\n") {
				idOrName := a
				if id := types.StringID(idOrName); !id.IsEmpty() {
					ids = append(ids, id)
				} else {
					res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{
						Filter: search.Filter{
							search.Key("Name"): search.ExactMatch(idOrName),
						},
					})
					if err != nil {
						return ids, fmt.Errorf("finding resource id is failed: %s", err)
					}
					if res.Count == 0 {
						return ids, fmt.Errorf("finding resource id is failed: not found with search param [%q]", idOrName)
					}
					for _, v := range res.Databases {
						if len(param.Selector) == 0 || util.HasTags(&v, param.Selector) {
							ids = append(ids, v.ID)
						}
					}
				}
			}

		}

	}

	ids = util.UniqIDs(ids)
	if len(ids) == 0 {
		return ids, fmt.Errorf("finding resource is is failed: not found")
	}

	return ids, nil
}

func findDatabaseDeleteTargets(ctx cli.Context, param *params.DeleteDatabaseParam) ([]types.ID, error) {
	var ids []types.ID
	args := ctx.Args()
	client := sacloud.NewDatabaseOp(ctx.Client())

	if len(args) == 0 {
		if len(param.Selector) == 0 {
			return ids, fmt.Errorf("ID or Name argument or --selector option is required")
		}
		res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{})
		if err != nil {
			return ids, fmt.Errorf("finding resource id is failed: %s", err)
		}
		for _, v := range res.Databases {
			if util.HasTags(&v, param.Selector) {
				ids = append(ids, v.ID)
			}
		}
		if len(ids) == 0 {
			return ids, fmt.Errorf("finding resource id is failed: not found with search param [tags=%s]", param.Selector)
		}
	} else {
		for _, arg := range args {
			for _, a := range strings.Split(arg, "\n") {
				idOrName := a
				if id := types.StringID(idOrName); !id.IsEmpty() {
					ids = append(ids, id)
				} else {
					res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{
						Filter: search.Filter{
							search.Key("Name"): search.ExactMatch(idOrName),
						},
					})
					if err != nil {
						return ids, fmt.Errorf("finding resource id is failed: %s", err)
					}
					if res.Count == 0 {
						return ids, fmt.Errorf("finding resource id is failed: not found with search param [%q]", idOrName)
					}
					for _, v := range res.Databases {
						if len(param.Selector) == 0 || util.HasTags(&v, param.Selector) {
							ids = append(ids, v.ID)
						}
					}
				}
			}

		}

	}

	ids = util.UniqIDs(ids)
	if len(ids) == 0 {
		return ids, fmt.Errorf("finding resource is is failed: not found")
	}

	return ids, nil
}

func findDatabaseBootTargets(ctx cli.Context, param *params.BootDatabaseParam) ([]types.ID, error) {
	var ids []types.ID
	args := ctx.Args()
	client := sacloud.NewDatabaseOp(ctx.Client())

	if len(args) == 0 {
		if len(param.Selector) == 0 {
			return ids, fmt.Errorf("ID or Name argument or --selector option is required")
		}
		res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{})
		if err != nil {
			return ids, fmt.Errorf("finding resource id is failed: %s", err)
		}
		for _, v := range res.Databases {
			if util.HasTags(&v, param.Selector) {
				ids = append(ids, v.ID)
			}
		}
		if len(ids) == 0 {
			return ids, fmt.Errorf("finding resource id is failed: not found with search param [tags=%s]", param.Selector)
		}
	} else {
		for _, arg := range args {
			for _, a := range strings.Split(arg, "\n") {
				idOrName := a
				if id := types.StringID(idOrName); !id.IsEmpty() {
					ids = append(ids, id)
				} else {
					res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{
						Filter: search.Filter{
							search.Key("Name"): search.ExactMatch(idOrName),
						},
					})
					if err != nil {
						return ids, fmt.Errorf("finding resource id is failed: %s", err)
					}
					if res.Count == 0 {
						return ids, fmt.Errorf("finding resource id is failed: not found with search param [%q]", idOrName)
					}
					for _, v := range res.Databases {
						if len(param.Selector) == 0 || util.HasTags(&v, param.Selector) {
							ids = append(ids, v.ID)
						}
					}
				}
			}

		}

	}

	ids = util.UniqIDs(ids)
	if len(ids) == 0 {
		return ids, fmt.Errorf("finding resource is is failed: not found")
	}

	return ids, nil
}

func findDatabaseShutdownTargets(ctx cli.Context, param *params.ShutdownDatabaseParam) ([]types.ID, error) {
	var ids []types.ID
	args := ctx.Args()
	client := sacloud.NewDatabaseOp(ctx.Client())

	if len(args) == 0 {
		if len(param.Selector) == 0 {
			return ids, fmt.Errorf("ID or Name argument or --selector option is required")
		}
		res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{})
		if err != nil {
			return ids, fmt.Errorf("finding resource id is failed: %s", err)
		}
		for _, v := range res.Databases {
			if util.HasTags(&v, param.Selector) {
				ids = append(ids, v.ID)
			}
		}
		if len(ids) == 0 {
			return ids, fmt.Errorf("finding resource id is failed: not found with search param [tags=%s]", param.Selector)
		}
	} else {
		for _, arg := range args {
			for _, a := range strings.Split(arg, "\n") {
				idOrName := a
				if id := types.StringID(idOrName); !id.IsEmpty() {
					ids = append(ids, id)
				} else {
					res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{
						Filter: search.Filter{
							search.Key("Name"): search.ExactMatch(idOrName),
						},
					})
					if err != nil {
						return ids, fmt.Errorf("finding resource id is failed: %s", err)
					}
					if res.Count == 0 {
						return ids, fmt.Errorf("finding resource id is failed: not found with search param [%q]", idOrName)
					}
					for _, v := range res.Databases {
						if len(param.Selector) == 0 || util.HasTags(&v, param.Selector) {
							ids = append(ids, v.ID)
						}
					}
				}
			}

		}

	}

	ids = util.UniqIDs(ids)
	if len(ids) == 0 {
		return ids, fmt.Errorf("finding resource is is failed: not found")
	}

	return ids, nil
}

func findDatabaseShutdownForceTargets(ctx cli.Context, param *params.ShutdownForceDatabaseParam) ([]types.ID, error) {
	var ids []types.ID
	args := ctx.Args()
	client := sacloud.NewDatabaseOp(ctx.Client())

	if len(args) == 0 {
		if len(param.Selector) == 0 {
			return ids, fmt.Errorf("ID or Name argument or --selector option is required")
		}
		res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{})
		if err != nil {
			return ids, fmt.Errorf("finding resource id is failed: %s", err)
		}
		for _, v := range res.Databases {
			if util.HasTags(&v, param.Selector) {
				ids = append(ids, v.ID)
			}
		}
		if len(ids) == 0 {
			return ids, fmt.Errorf("finding resource id is failed: not found with search param [tags=%s]", param.Selector)
		}
	} else {
		for _, arg := range args {
			for _, a := range strings.Split(arg, "\n") {
				idOrName := a
				if id := types.StringID(idOrName); !id.IsEmpty() {
					ids = append(ids, id)
				} else {
					res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{
						Filter: search.Filter{
							search.Key("Name"): search.ExactMatch(idOrName),
						},
					})
					if err != nil {
						return ids, fmt.Errorf("finding resource id is failed: %s", err)
					}
					if res.Count == 0 {
						return ids, fmt.Errorf("finding resource id is failed: not found with search param [%q]", idOrName)
					}
					for _, v := range res.Databases {
						if len(param.Selector) == 0 || util.HasTags(&v, param.Selector) {
							ids = append(ids, v.ID)
						}
					}
				}
			}

		}

	}

	ids = util.UniqIDs(ids)
	if len(ids) == 0 {
		return ids, fmt.Errorf("finding resource is is failed: not found")
	}

	return ids, nil
}

func findDatabaseResetTargets(ctx cli.Context, param *params.ResetDatabaseParam) ([]types.ID, error) {
	var ids []types.ID
	args := ctx.Args()
	client := sacloud.NewDatabaseOp(ctx.Client())

	if len(args) == 0 {
		if len(param.Selector) == 0 {
			return ids, fmt.Errorf("ID or Name argument or --selector option is required")
		}
		res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{})
		if err != nil {
			return ids, fmt.Errorf("finding resource id is failed: %s", err)
		}
		for _, v := range res.Databases {
			if util.HasTags(&v, param.Selector) {
				ids = append(ids, v.ID)
			}
		}
		if len(ids) == 0 {
			return ids, fmt.Errorf("finding resource id is failed: not found with search param [tags=%s]", param.Selector)
		}
	} else {
		for _, arg := range args {
			for _, a := range strings.Split(arg, "\n") {
				idOrName := a
				if id := types.StringID(idOrName); !id.IsEmpty() {
					ids = append(ids, id)
				} else {
					res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{
						Filter: search.Filter{
							search.Key("Name"): search.ExactMatch(idOrName),
						},
					})
					if err != nil {
						return ids, fmt.Errorf("finding resource id is failed: %s", err)
					}
					if res.Count == 0 {
						return ids, fmt.Errorf("finding resource id is failed: not found with search param [%q]", idOrName)
					}
					for _, v := range res.Databases {
						if len(param.Selector) == 0 || util.HasTags(&v, param.Selector) {
							ids = append(ids, v.ID)
						}
					}
				}
			}

		}

	}

	ids = util.UniqIDs(ids)
	if len(ids) == 0 {
		return ids, fmt.Errorf("finding resource is is failed: not found")
	}

	return ids, nil
}

func findDatabaseWaitForBootTargets(ctx cli.Context, param *params.WaitForBootDatabaseParam) ([]types.ID, error) {
	var ids []types.ID
	args := ctx.Args()
	client := sacloud.NewDatabaseOp(ctx.Client())

	if len(args) == 0 {
		if len(param.Selector) == 0 {
			return ids, fmt.Errorf("ID or Name argument or --selector option is required")
		}
		res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{})
		if err != nil {
			return ids, fmt.Errorf("finding resource id is failed: %s", err)
		}
		for _, v := range res.Databases {
			if util.HasTags(&v, param.Selector) {
				ids = append(ids, v.ID)
			}
		}
		if len(ids) == 0 {
			return ids, fmt.Errorf("finding resource id is failed: not found with search param [tags=%s]", param.Selector)
		}
	} else {
		for _, arg := range args {
			for _, a := range strings.Split(arg, "\n") {
				idOrName := a
				if id := types.StringID(idOrName); !id.IsEmpty() {
					ids = append(ids, id)
				} else {
					res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{
						Filter: search.Filter{
							search.Key("Name"): search.ExactMatch(idOrName),
						},
					})
					if err != nil {
						return ids, fmt.Errorf("finding resource id is failed: %s", err)
					}
					if res.Count == 0 {
						return ids, fmt.Errorf("finding resource id is failed: not found with search param [%q]", idOrName)
					}
					for _, v := range res.Databases {
						if len(param.Selector) == 0 || util.HasTags(&v, param.Selector) {
							ids = append(ids, v.ID)
						}
					}
				}
			}

		}

	}

	ids = util.UniqIDs(ids)
	if len(ids) == 0 {
		return ids, fmt.Errorf("finding resource is is failed: not found")
	}

	return ids, nil
}

func findDatabaseWaitForDownTargets(ctx cli.Context, param *params.WaitForDownDatabaseParam) ([]types.ID, error) {
	var ids []types.ID
	args := ctx.Args()
	client := sacloud.NewDatabaseOp(ctx.Client())

	if len(args) == 0 {
		if len(param.Selector) == 0 {
			return ids, fmt.Errorf("ID or Name argument or --selector option is required")
		}
		res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{})
		if err != nil {
			return ids, fmt.Errorf("finding resource id is failed: %s", err)
		}
		for _, v := range res.Databases {
			if util.HasTags(&v, param.Selector) {
				ids = append(ids, v.ID)
			}
		}
		if len(ids) == 0 {
			return ids, fmt.Errorf("finding resource id is failed: not found with search param [tags=%s]", param.Selector)
		}
	} else {
		for _, arg := range args {
			for _, a := range strings.Split(arg, "\n") {
				idOrName := a
				if id := types.StringID(idOrName); !id.IsEmpty() {
					ids = append(ids, id)
				} else {
					res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{
						Filter: search.Filter{
							search.Key("Name"): search.ExactMatch(idOrName),
						},
					})
					if err != nil {
						return ids, fmt.Errorf("finding resource id is failed: %s", err)
					}
					if res.Count == 0 {
						return ids, fmt.Errorf("finding resource id is failed: not found with search param [%q]", idOrName)
					}
					for _, v := range res.Databases {
						if len(param.Selector) == 0 || util.HasTags(&v, param.Selector) {
							ids = append(ids, v.ID)
						}
					}
				}
			}

		}

	}

	ids = util.UniqIDs(ids)
	if len(ids) == 0 {
		return ids, fmt.Errorf("finding resource is is failed: not found")
	}

	return ids, nil
}

func findDatabaseBackupInfoTargets(ctx cli.Context, param *params.BackupInfoDatabaseParam) ([]types.ID, error) {
	var ids []types.ID
	args := ctx.Args()
	client := sacloud.NewDatabaseOp(ctx.Client())

	if len(args) == 0 {
		if len(param.Selector) == 0 {
			return ids, fmt.Errorf("ID or Name argument or --selector option is required")
		}
		res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{})
		if err != nil {
			return ids, fmt.Errorf("finding resource id is failed: %s", err)
		}
		for _, v := range res.Databases {
			if util.HasTags(&v, param.Selector) {
				ids = append(ids, v.ID)
			}
		}
		if len(ids) == 0 {
			return ids, fmt.Errorf("finding resource id is failed: not found with search param [tags=%s]", param.Selector)
		}
	} else {
		for _, arg := range args {
			for _, a := range strings.Split(arg, "\n") {
				idOrName := a
				if id := types.StringID(idOrName); !id.IsEmpty() {
					ids = append(ids, id)
				} else {
					res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{
						Filter: search.Filter{
							search.Key("Name"): search.ExactMatch(idOrName),
						},
					})
					if err != nil {
						return ids, fmt.Errorf("finding resource id is failed: %s", err)
					}
					if res.Count == 0 {
						return ids, fmt.Errorf("finding resource id is failed: not found with search param [%q]", idOrName)
					}
					for _, v := range res.Databases {
						if len(param.Selector) == 0 || util.HasTags(&v, param.Selector) {
							ids = append(ids, v.ID)
						}
					}
				}
			}

		}

	}

	ids = util.UniqIDs(ids)
	if len(ids) == 0 {
		return ids, fmt.Errorf("finding resource is is failed: not found")
	}
	if len(ids) != 1 {
		return ids, fmt.Errorf("could not run with multiple targets: %v", ids)
	}

	return ids, nil
}

func findDatabaseBackupCreateTargets(ctx cli.Context, param *params.BackupCreateDatabaseParam) ([]types.ID, error) {
	var ids []types.ID
	args := ctx.Args()
	client := sacloud.NewDatabaseOp(ctx.Client())

	if len(args) == 0 {
		return ids, fmt.Errorf("ID or Name argument is required")
	} else {
		for _, arg := range args {
			for _, a := range strings.Split(arg, "\n") {
				idOrName := a
				if id := types.StringID(idOrName); !id.IsEmpty() {
					ids = append(ids, id)
				} else {
					res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{
						Filter: search.Filter{
							search.Key("Name"): search.ExactMatch(idOrName),
						},
					})
					if err != nil {
						return ids, fmt.Errorf("finding resource id is failed: %s", err)
					}
					if res.Count == 0 {
						return ids, fmt.Errorf("finding resource id is failed: not found with search param [%q]", idOrName)
					}
					for _, v := range res.Databases {

						ids = append(ids, v.ID)

					}
				}
			}

		}

	}

	ids = util.UniqIDs(ids)
	if len(ids) == 0 {
		return ids, fmt.Errorf("finding resource is is failed: not found")
	}
	if len(ids) != 1 {
		return ids, fmt.Errorf("could not run with multiple targets: %v", ids)
	}

	return ids, nil
}

func findDatabaseBackupRestoreTargets(ctx cli.Context, param *params.BackupRestoreDatabaseParam) ([]types.ID, error) {
	var ids []types.ID
	args := ctx.Args()
	client := sacloud.NewDatabaseOp(ctx.Client())

	if len(args) == 0 {
		return ids, fmt.Errorf("ID or Name argument is required")
	} else {
		for _, arg := range args {
			for _, a := range strings.Split(arg, "\n") {
				idOrName := a
				if id := types.StringID(idOrName); !id.IsEmpty() {
					ids = append(ids, id)
				} else {
					res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{
						Filter: search.Filter{
							search.Key("Name"): search.ExactMatch(idOrName),
						},
					})
					if err != nil {
						return ids, fmt.Errorf("finding resource id is failed: %s", err)
					}
					if res.Count == 0 {
						return ids, fmt.Errorf("finding resource id is failed: not found with search param [%q]", idOrName)
					}
					for _, v := range res.Databases {

						ids = append(ids, v.ID)

					}
				}
			}

		}

	}

	ids = util.UniqIDs(ids)
	if len(ids) == 0 {
		return ids, fmt.Errorf("finding resource is is failed: not found")
	}
	if len(ids) != 1 {
		return ids, fmt.Errorf("could not run with multiple targets: %v", ids)
	}

	return ids, nil
}

func findDatabaseBackupLockTargets(ctx cli.Context, param *params.BackupLockDatabaseParam) ([]types.ID, error) {
	var ids []types.ID
	args := ctx.Args()
	client := sacloud.NewDatabaseOp(ctx.Client())

	if len(args) == 0 {
		return ids, fmt.Errorf("ID or Name argument is required")
	} else {
		for _, arg := range args {
			for _, a := range strings.Split(arg, "\n") {
				idOrName := a
				if id := types.StringID(idOrName); !id.IsEmpty() {
					ids = append(ids, id)
				} else {
					res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{
						Filter: search.Filter{
							search.Key("Name"): search.ExactMatch(idOrName),
						},
					})
					if err != nil {
						return ids, fmt.Errorf("finding resource id is failed: %s", err)
					}
					if res.Count == 0 {
						return ids, fmt.Errorf("finding resource id is failed: not found with search param [%q]", idOrName)
					}
					for _, v := range res.Databases {

						ids = append(ids, v.ID)

					}
				}
			}

		}

	}

	ids = util.UniqIDs(ids)
	if len(ids) == 0 {
		return ids, fmt.Errorf("finding resource is is failed: not found")
	}
	if len(ids) != 1 {
		return ids, fmt.Errorf("could not run with multiple targets: %v", ids)
	}

	return ids, nil
}

func findDatabaseBackupUnlockTargets(ctx cli.Context, param *params.BackupUnlockDatabaseParam) ([]types.ID, error) {
	var ids []types.ID
	args := ctx.Args()
	client := sacloud.NewDatabaseOp(ctx.Client())

	if len(args) == 0 {
		return ids, fmt.Errorf("ID or Name argument is required")
	} else {
		for _, arg := range args {
			for _, a := range strings.Split(arg, "\n") {
				idOrName := a
				if id := types.StringID(idOrName); !id.IsEmpty() {
					ids = append(ids, id)
				} else {
					res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{
						Filter: search.Filter{
							search.Key("Name"): search.ExactMatch(idOrName),
						},
					})
					if err != nil {
						return ids, fmt.Errorf("finding resource id is failed: %s", err)
					}
					if res.Count == 0 {
						return ids, fmt.Errorf("finding resource id is failed: not found with search param [%q]", idOrName)
					}
					for _, v := range res.Databases {

						ids = append(ids, v.ID)

					}
				}
			}

		}

	}

	ids = util.UniqIDs(ids)
	if len(ids) == 0 {
		return ids, fmt.Errorf("finding resource is is failed: not found")
	}
	if len(ids) != 1 {
		return ids, fmt.Errorf("could not run with multiple targets: %v", ids)
	}

	return ids, nil
}

func findDatabaseBackupRemoveTargets(ctx cli.Context, param *params.BackupRemoveDatabaseParam) ([]types.ID, error) {
	var ids []types.ID
	args := ctx.Args()
	client := sacloud.NewDatabaseOp(ctx.Client())

	if len(args) == 0 {
		return ids, fmt.Errorf("ID or Name argument is required")
	} else {
		for _, arg := range args {
			for _, a := range strings.Split(arg, "\n") {
				idOrName := a
				if id := types.StringID(idOrName); !id.IsEmpty() {
					ids = append(ids, id)
				} else {
					res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{
						Filter: search.Filter{
							search.Key("Name"): search.ExactMatch(idOrName),
						},
					})
					if err != nil {
						return ids, fmt.Errorf("finding resource id is failed: %s", err)
					}
					if res.Count == 0 {
						return ids, fmt.Errorf("finding resource id is failed: not found with search param [%q]", idOrName)
					}
					for _, v := range res.Databases {

						ids = append(ids, v.ID)

					}
				}
			}

		}

	}

	ids = util.UniqIDs(ids)
	if len(ids) == 0 {
		return ids, fmt.Errorf("finding resource is is failed: not found")
	}
	if len(ids) != 1 {
		return ids, fmt.Errorf("could not run with multiple targets: %v", ids)
	}

	return ids, nil
}

func findDatabaseCloneTargets(ctx cli.Context, param *params.CloneDatabaseParam) ([]types.ID, error) {
	var ids []types.ID
	args := ctx.Args()
	client := sacloud.NewDatabaseOp(ctx.Client())

	if len(args) == 0 {
		return ids, fmt.Errorf("ID or Name argument is required")
	} else {
		for _, arg := range args {
			for _, a := range strings.Split(arg, "\n") {
				idOrName := a
				if id := types.StringID(idOrName); !id.IsEmpty() {
					ids = append(ids, id)
				} else {
					res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{
						Filter: search.Filter{
							search.Key("Name"): search.ExactMatch(idOrName),
						},
					})
					if err != nil {
						return ids, fmt.Errorf("finding resource id is failed: %s", err)
					}
					if res.Count == 0 {
						return ids, fmt.Errorf("finding resource id is failed: not found with search param [%q]", idOrName)
					}
					for _, v := range res.Databases {

						ids = append(ids, v.ID)

					}
				}
			}

		}

	}

	ids = util.UniqIDs(ids)
	if len(ids) == 0 {
		return ids, fmt.Errorf("finding resource is is failed: not found")
	}
	if len(ids) != 1 {
		return ids, fmt.Errorf("could not run with multiple targets: %v", ids)
	}

	return ids, nil
}

func findDatabaseReplicaCreateTargets(ctx cli.Context, param *params.ReplicaCreateDatabaseParam) ([]types.ID, error) {
	var ids []types.ID
	args := ctx.Args()
	client := sacloud.NewDatabaseOp(ctx.Client())

	if len(args) == 0 {
		return ids, fmt.Errorf("ID or Name argument is required")
	} else {
		for _, arg := range args {
			for _, a := range strings.Split(arg, "\n") {
				idOrName := a
				if id := types.StringID(idOrName); !id.IsEmpty() {
					ids = append(ids, id)
				} else {
					res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{
						Filter: search.Filter{
							search.Key("Name"): search.ExactMatch(idOrName),
						},
					})
					if err != nil {
						return ids, fmt.Errorf("finding resource id is failed: %s", err)
					}
					if res.Count == 0 {
						return ids, fmt.Errorf("finding resource id is failed: not found with search param [%q]", idOrName)
					}
					for _, v := range res.Databases {

						ids = append(ids, v.ID)

					}
				}
			}

		}

	}

	ids = util.UniqIDs(ids)
	if len(ids) == 0 {
		return ids, fmt.Errorf("finding resource is is failed: not found")
	}
	if len(ids) != 1 {
		return ids, fmt.Errorf("could not run with multiple targets: %v", ids)
	}

	return ids, nil
}

func findDatabaseMonitorCPUTargets(ctx cli.Context, param *params.MonitorCPUDatabaseParam) ([]types.ID, error) {
	var ids []types.ID
	args := ctx.Args()
	client := sacloud.NewDatabaseOp(ctx.Client())

	if len(args) == 0 {
		if len(param.Selector) == 0 {
			return ids, fmt.Errorf("ID or Name argument or --selector option is required")
		}
		res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{})
		if err != nil {
			return ids, fmt.Errorf("finding resource id is failed: %s", err)
		}
		for _, v := range res.Databases {
			if util.HasTags(&v, param.Selector) {
				ids = append(ids, v.ID)
			}
		}
		if len(ids) == 0 {
			return ids, fmt.Errorf("finding resource id is failed: not found with search param [tags=%s]", param.Selector)
		}
	} else {
		for _, arg := range args {
			for _, a := range strings.Split(arg, "\n") {
				idOrName := a
				if id := types.StringID(idOrName); !id.IsEmpty() {
					ids = append(ids, id)
				} else {
					res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{
						Filter: search.Filter{
							search.Key("Name"): search.ExactMatch(idOrName),
						},
					})
					if err != nil {
						return ids, fmt.Errorf("finding resource id is failed: %s", err)
					}
					if res.Count == 0 {
						return ids, fmt.Errorf("finding resource id is failed: not found with search param [%q]", idOrName)
					}
					for _, v := range res.Databases {
						if len(param.Selector) == 0 || util.HasTags(&v, param.Selector) {
							ids = append(ids, v.ID)
						}
					}
				}
			}

		}

	}

	ids = util.UniqIDs(ids)
	if len(ids) == 0 {
		return ids, fmt.Errorf("finding resource is is failed: not found")
	}
	if len(ids) != 1 {
		return ids, fmt.Errorf("could not run with multiple targets: %v", ids)
	}

	return ids, nil
}

func findDatabaseMonitorMemoryTargets(ctx cli.Context, param *params.MonitorMemoryDatabaseParam) ([]types.ID, error) {
	var ids []types.ID
	args := ctx.Args()
	client := sacloud.NewDatabaseOp(ctx.Client())

	if len(args) == 0 {
		if len(param.Selector) == 0 {
			return ids, fmt.Errorf("ID or Name argument or --selector option is required")
		}
		res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{})
		if err != nil {
			return ids, fmt.Errorf("finding resource id is failed: %s", err)
		}
		for _, v := range res.Databases {
			if util.HasTags(&v, param.Selector) {
				ids = append(ids, v.ID)
			}
		}
		if len(ids) == 0 {
			return ids, fmt.Errorf("finding resource id is failed: not found with search param [tags=%s]", param.Selector)
		}
	} else {
		for _, arg := range args {
			for _, a := range strings.Split(arg, "\n") {
				idOrName := a
				if id := types.StringID(idOrName); !id.IsEmpty() {
					ids = append(ids, id)
				} else {
					res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{
						Filter: search.Filter{
							search.Key("Name"): search.ExactMatch(idOrName),
						},
					})
					if err != nil {
						return ids, fmt.Errorf("finding resource id is failed: %s", err)
					}
					if res.Count == 0 {
						return ids, fmt.Errorf("finding resource id is failed: not found with search param [%q]", idOrName)
					}
					for _, v := range res.Databases {
						if len(param.Selector) == 0 || util.HasTags(&v, param.Selector) {
							ids = append(ids, v.ID)
						}
					}
				}
			}

		}

	}

	ids = util.UniqIDs(ids)
	if len(ids) == 0 {
		return ids, fmt.Errorf("finding resource is is failed: not found")
	}
	if len(ids) != 1 {
		return ids, fmt.Errorf("could not run with multiple targets: %v", ids)
	}

	return ids, nil
}

func findDatabaseMonitorNicTargets(ctx cli.Context, param *params.MonitorNicDatabaseParam) ([]types.ID, error) {
	var ids []types.ID
	args := ctx.Args()
	client := sacloud.NewDatabaseOp(ctx.Client())

	if len(args) == 0 {
		if len(param.Selector) == 0 {
			return ids, fmt.Errorf("ID or Name argument or --selector option is required")
		}
		res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{})
		if err != nil {
			return ids, fmt.Errorf("finding resource id is failed: %s", err)
		}
		for _, v := range res.Databases {
			if util.HasTags(&v, param.Selector) {
				ids = append(ids, v.ID)
			}
		}
		if len(ids) == 0 {
			return ids, fmt.Errorf("finding resource id is failed: not found with search param [tags=%s]", param.Selector)
		}
	} else {
		for _, arg := range args {
			for _, a := range strings.Split(arg, "\n") {
				idOrName := a
				if id := types.StringID(idOrName); !id.IsEmpty() {
					ids = append(ids, id)
				} else {
					res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{
						Filter: search.Filter{
							search.Key("Name"): search.ExactMatch(idOrName),
						},
					})
					if err != nil {
						return ids, fmt.Errorf("finding resource id is failed: %s", err)
					}
					if res.Count == 0 {
						return ids, fmt.Errorf("finding resource id is failed: not found with search param [%q]", idOrName)
					}
					for _, v := range res.Databases {
						if len(param.Selector) == 0 || util.HasTags(&v, param.Selector) {
							ids = append(ids, v.ID)
						}
					}
				}
			}

		}

	}

	ids = util.UniqIDs(ids)
	if len(ids) == 0 {
		return ids, fmt.Errorf("finding resource is is failed: not found")
	}
	if len(ids) != 1 {
		return ids, fmt.Errorf("could not run with multiple targets: %v", ids)
	}

	return ids, nil
}

func findDatabaseMonitorSystemDiskTargets(ctx cli.Context, param *params.MonitorSystemDiskDatabaseParam) ([]types.ID, error) {
	var ids []types.ID
	args := ctx.Args()
	client := sacloud.NewDatabaseOp(ctx.Client())

	if len(args) == 0 {
		if len(param.Selector) == 0 {
			return ids, fmt.Errorf("ID or Name argument or --selector option is required")
		}
		res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{})
		if err != nil {
			return ids, fmt.Errorf("finding resource id is failed: %s", err)
		}
		for _, v := range res.Databases {
			if util.HasTags(&v, param.Selector) {
				ids = append(ids, v.ID)
			}
		}
		if len(ids) == 0 {
			return ids, fmt.Errorf("finding resource id is failed: not found with search param [tags=%s]", param.Selector)
		}
	} else {
		for _, arg := range args {
			for _, a := range strings.Split(arg, "\n") {
				idOrName := a
				if id := types.StringID(idOrName); !id.IsEmpty() {
					ids = append(ids, id)
				} else {
					res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{
						Filter: search.Filter{
							search.Key("Name"): search.ExactMatch(idOrName),
						},
					})
					if err != nil {
						return ids, fmt.Errorf("finding resource id is failed: %s", err)
					}
					if res.Count == 0 {
						return ids, fmt.Errorf("finding resource id is failed: not found with search param [%q]", idOrName)
					}
					for _, v := range res.Databases {
						if len(param.Selector) == 0 || util.HasTags(&v, param.Selector) {
							ids = append(ids, v.ID)
						}
					}
				}
			}

		}

	}

	ids = util.UniqIDs(ids)
	if len(ids) == 0 {
		return ids, fmt.Errorf("finding resource is is failed: not found")
	}
	if len(ids) != 1 {
		return ids, fmt.Errorf("could not run with multiple targets: %v", ids)
	}

	return ids, nil
}

func findDatabaseMonitorBackupDiskTargets(ctx cli.Context, param *params.MonitorBackupDiskDatabaseParam) ([]types.ID, error) {
	var ids []types.ID
	args := ctx.Args()
	client := sacloud.NewDatabaseOp(ctx.Client())

	if len(args) == 0 {
		if len(param.Selector) == 0 {
			return ids, fmt.Errorf("ID or Name argument or --selector option is required")
		}
		res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{})
		if err != nil {
			return ids, fmt.Errorf("finding resource id is failed: %s", err)
		}
		for _, v := range res.Databases {
			if util.HasTags(&v, param.Selector) {
				ids = append(ids, v.ID)
			}
		}
		if len(ids) == 0 {
			return ids, fmt.Errorf("finding resource id is failed: not found with search param [tags=%s]", param.Selector)
		}
	} else {
		for _, arg := range args {
			for _, a := range strings.Split(arg, "\n") {
				idOrName := a
				if id := types.StringID(idOrName); !id.IsEmpty() {
					ids = append(ids, id)
				} else {
					res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{
						Filter: search.Filter{
							search.Key("Name"): search.ExactMatch(idOrName),
						},
					})
					if err != nil {
						return ids, fmt.Errorf("finding resource id is failed: %s", err)
					}
					if res.Count == 0 {
						return ids, fmt.Errorf("finding resource id is failed: not found with search param [%q]", idOrName)
					}
					for _, v := range res.Databases {
						if len(param.Selector) == 0 || util.HasTags(&v, param.Selector) {
							ids = append(ids, v.ID)
						}
					}
				}
			}

		}

	}

	ids = util.UniqIDs(ids)
	if len(ids) == 0 {
		return ids, fmt.Errorf("finding resource is is failed: not found")
	}
	if len(ids) != 1 {
		return ids, fmt.Errorf("could not run with multiple targets: %v", ids)
	}

	return ids, nil
}

func findDatabaseMonitorSystemDiskSizeTargets(ctx cli.Context, param *params.MonitorSystemDiskSizeDatabaseParam) ([]types.ID, error) {
	var ids []types.ID
	args := ctx.Args()
	client := sacloud.NewDatabaseOp(ctx.Client())

	if len(args) == 0 {
		if len(param.Selector) == 0 {
			return ids, fmt.Errorf("ID or Name argument or --selector option is required")
		}
		res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{})
		if err != nil {
			return ids, fmt.Errorf("finding resource id is failed: %s", err)
		}
		for _, v := range res.Databases {
			if util.HasTags(&v, param.Selector) {
				ids = append(ids, v.ID)
			}
		}
		if len(ids) == 0 {
			return ids, fmt.Errorf("finding resource id is failed: not found with search param [tags=%s]", param.Selector)
		}
	} else {
		for _, arg := range args {
			for _, a := range strings.Split(arg, "\n") {
				idOrName := a
				if id := types.StringID(idOrName); !id.IsEmpty() {
					ids = append(ids, id)
				} else {
					res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{
						Filter: search.Filter{
							search.Key("Name"): search.ExactMatch(idOrName),
						},
					})
					if err != nil {
						return ids, fmt.Errorf("finding resource id is failed: %s", err)
					}
					if res.Count == 0 {
						return ids, fmt.Errorf("finding resource id is failed: not found with search param [%q]", idOrName)
					}
					for _, v := range res.Databases {
						if len(param.Selector) == 0 || util.HasTags(&v, param.Selector) {
							ids = append(ids, v.ID)
						}
					}
				}
			}

		}

	}

	ids = util.UniqIDs(ids)
	if len(ids) == 0 {
		return ids, fmt.Errorf("finding resource is is failed: not found")
	}
	if len(ids) != 1 {
		return ids, fmt.Errorf("could not run with multiple targets: %v", ids)
	}

	return ids, nil
}

func findDatabaseMonitorBackupDiskSizeTargets(ctx cli.Context, param *params.MonitorBackupDiskSizeDatabaseParam) ([]types.ID, error) {
	var ids []types.ID
	args := ctx.Args()
	client := sacloud.NewDatabaseOp(ctx.Client())

	if len(args) == 0 {
		if len(param.Selector) == 0 {
			return ids, fmt.Errorf("ID or Name argument or --selector option is required")
		}
		res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{})
		if err != nil {
			return ids, fmt.Errorf("finding resource id is failed: %s", err)
		}
		for _, v := range res.Databases {
			if util.HasTags(&v, param.Selector) {
				ids = append(ids, v.ID)
			}
		}
		if len(ids) == 0 {
			return ids, fmt.Errorf("finding resource id is failed: not found with search param [tags=%s]", param.Selector)
		}
	} else {
		for _, arg := range args {
			for _, a := range strings.Split(arg, "\n") {
				idOrName := a
				if id := types.StringID(idOrName); !id.IsEmpty() {
					ids = append(ids, id)
				} else {
					res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{
						Filter: search.Filter{
							search.Key("Name"): search.ExactMatch(idOrName),
						},
					})
					if err != nil {
						return ids, fmt.Errorf("finding resource id is failed: %s", err)
					}
					if res.Count == 0 {
						return ids, fmt.Errorf("finding resource id is failed: not found with search param [%q]", idOrName)
					}
					for _, v := range res.Databases {
						if len(param.Selector) == 0 || util.HasTags(&v, param.Selector) {
							ids = append(ids, v.ID)
						}
					}
				}
			}

		}

	}

	ids = util.UniqIDs(ids)
	if len(ids) == 0 {
		return ids, fmt.Errorf("finding resource is is failed: not found")
	}
	if len(ids) != 1 {
		return ids, fmt.Errorf("could not run with multiple targets: %v", ids)
	}

	return ids, nil
}

func findDatabaseLogsTargets(ctx cli.Context, param *params.LogsDatabaseParam) ([]types.ID, error) {
	var ids []types.ID
	args := ctx.Args()
	client := sacloud.NewDatabaseOp(ctx.Client())

	if len(args) == 0 {
		if len(param.Selector) == 0 {
			return ids, fmt.Errorf("ID or Name argument or --selector option is required")
		}
		res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{})
		if err != nil {
			return ids, fmt.Errorf("finding resource id is failed: %s", err)
		}
		for _, v := range res.Databases {
			if util.HasTags(&v, param.Selector) {
				ids = append(ids, v.ID)
			}
		}
		if len(ids) == 0 {
			return ids, fmt.Errorf("finding resource id is failed: not found with search param [tags=%s]", param.Selector)
		}
	} else {
		for _, arg := range args {
			for _, a := range strings.Split(arg, "\n") {
				idOrName := a
				if id := types.StringID(idOrName); !id.IsEmpty() {
					ids = append(ids, id)
				} else {
					res, err := client.Find(ctx, ctx.Zone(), &sacloud.FindCondition{
						Filter: search.Filter{
							search.Key("Name"): search.ExactMatch(idOrName),
						},
					})
					if err != nil {
						return ids, fmt.Errorf("finding resource id is failed: %s", err)
					}
					if res.Count == 0 {
						return ids, fmt.Errorf("finding resource id is failed: not found with search param [%q]", idOrName)
					}
					for _, v := range res.Databases {
						if len(param.Selector) == 0 || util.HasTags(&v, param.Selector) {
							ids = append(ids, v.ID)
						}
					}
				}
			}

		}

	}

	ids = util.UniqIDs(ids)
	if len(ids) == 0 {
		return ids, fmt.Errorf("finding resource is is failed: not found")
	}
	if len(ids) != 1 {
		return ids, fmt.Errorf("could not run with multiple targets: %v", ids)
	}

	return ids, nil
}
