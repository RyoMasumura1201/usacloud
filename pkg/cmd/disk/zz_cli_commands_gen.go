// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-commands-v1'; DO NOT EDIT

package disk

import (
	"errors"

	"github.com/sacloud/libsacloud/v2/sacloud/types"
	"github.com/sacloud/usacloud/pkg/cli"
	"github.com/sacloud/usacloud/pkg/cmd/root"
	"github.com/sacloud/usacloud/pkg/term"
	"github.com/sacloud/usacloud/pkg/util"
	"github.com/spf13/cobra"
)

// diskCmd represents the command to manage SAKURA Cloud Disk
func diskCmd() *cobra.Command {
	return &cobra.Command{
		Use: "disk",

		Short: "A manage commands of Disk",
		Long:  `A manage commands of Disk`,
		RunE: func(cmd *cobra.Command, args []string) error {
			cmd.HelpFunc()(cmd, args)
			return nil
		},
	}
}

func diskListCmd() *cobra.Command {
	diskListParam := NewListParameter()
	cmd := &cobra.Command{
		Use:          "list",
		Aliases:      []string{"ls", "find", "select"},
		Short:        "List Disk",
		Long:         `List Disk`,
		SilenceUsage: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext("disk", "list", root.Command.PersistentFlags(), args, diskListParam)
			if err != nil {
				return err
			}

			//if diskListParam.GenerateSkeleton {
			//	return generateSkeleton(ctx, diskListParam)
			//}

			return cli.WrapError(ctx, runListService(ctx, diskListParam))

		},
	}

	diskListParam.SetupCobraCommandFlags(cmd)
	return cmd
}

func diskCreateCmd() *cobra.Command {
	diskCreateParam := NewCreateParameter()
	cmd := &cobra.Command{
		Use: "create",

		Short:        "Create Disk",
		Long:         `Create Disk`,
		SilenceUsage: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext("disk", "create", root.Command.PersistentFlags(), args, diskCreateParam)
			if err != nil {
				return err
			}

			//if diskCreateParam.GenerateSkeleton {
			//	return generateSkeleton(ctx, diskCreateParam)
			//}

			// confirm
			if !diskCreateParam.AssumeYes {
				if !term.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := util.ConfirmContinue("create", ctx.IO().In(), ctx.IO().Out())
				if err != nil || !result {
					return err
				}
			}

			return cli.WrapError(ctx, runCreateService(ctx, diskCreateParam))

		},
	}

	diskCreateParam.SetupCobraCommandFlags(cmd)
	return cmd
}

func diskUpdateCmd() *cobra.Command {
	diskUpdateParam := NewUpdateParameter()
	cmd := &cobra.Command{
		Use: "update",

		Short:        "Update Disk",
		Long:         `Update Disk`,
		SilenceUsage: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext("disk", "update", root.Command.PersistentFlags(), args, diskUpdateParam)
			if err != nil {
				return err
			}

			//if diskUpdateParam.GenerateSkeleton {
			//	return generateSkeleton(ctx, diskUpdateParam)
			//}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			// ids, err := findDiskUpdateTargets(ctx, diskUpdateParam)
			// if err != nil {
			// 	return err
			// }
			var ids []types.ID

			// confirm
			if !diskUpdateParam.AssumeYes {
				if !term.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := util.ConfirmContinue("update", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			// var wg sync.WaitGroup
			// var errs []error
			// for _ , id := range ids {
			// 	wg.Add(1)
			// 	go func(ctx cli.Context, p *params.UpdateDiskParam) {
			// 		err := cli.WrapError(ctx, disk.Update(ctx, p))
			// 		if err != nil {
			// 			errs = append(errs, err)
			// 		}
			// 		wg.Done()
			// 	}(ctx.WithID(id), diskUpdateParam.WithID(id))
			// }
			// wg.Wait()
			//return cli.FlattenErrors(errs)
			return cli.WrapError(ctx, runUpdateService(ctx, diskUpdateParam))

		},
	}

	diskUpdateParam.SetupCobraCommandFlags(cmd)
	return cmd
}
