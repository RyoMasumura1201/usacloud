// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-root-command'; DO NOT EDIT

package cmd

import (
	"github.com/spf13/cobra"
)

func rootCommandOrder(cmd *cobra.Command) []*commandSet {
	var commands []*commandSet
	{
		set := &commandSet{
			title: "Configuration",
		}
		set.commands = append(set.commands, lookupCmd(cmd, "config"))
		commands = append(commands, set)
	}
	{
		set := &commandSet{
			title: "Authentication",
		}
		set.commands = append(set.commands, lookupCmd(cmd, "auth-status"))
		commands = append(commands, set)
	}
	{
		set := &commandSet{
			title: "Storage",
		}
		set.commands = append(set.commands, lookupCmd(cmd, "archive"))
		set.commands = append(set.commands, lookupCmd(cmd, "auto-backup"))
		set.commands = append(set.commands, lookupCmd(cmd, "disk"))
		commands = append(commands, set)
	}
	{
		set := &commandSet{
			title: "Networking",
		}
		set.commands = append(set.commands, lookupCmd(cmd, "bridge"))
		commands = append(commands, set)
	}
	{
		set := &commandSet{
			title: "Appliance",
		}
		set.commands = append(set.commands, lookupCmd(cmd, "database"))
		commands = append(commands, set)
	}
	{
		set := &commandSet{
			title: "Billing",
		}
		set.commands = append(set.commands, lookupCmd(cmd, "bill"))
		commands = append(commands, set)
	}
	{
		set := &commandSet{
			title: "Coupon",
		}
		set.commands = append(set.commands, lookupCmd(cmd, "coupon"))
		commands = append(commands, set)
	}

	return commands
}

func init() {
	{
		cmd := configCmd()
		cmd.AddCommand(configCurrentCmd())
		cmd.AddCommand(configDeleteCmd())
		cmd.AddCommand(configEditCmd())
		cmd.AddCommand(configListCmd())
		cmd.AddCommand(configMigrateCmd())
		cmd.AddCommand(configShowCmd())
		cmd.AddCommand(configUseCmd())
		buildCommandsUsage(cmd, configCommandOrder(cmd))
		rootCmd.AddCommand(cmd)
	}
	{
		cmd := authStatusCmd()
		cmd.AddCommand(authStatusShowCmd())
		buildCommandsUsage(cmd, authStatusCommandOrder(cmd))
		rootCmd.AddCommand(cmd)
	}
	{
		cmd := archiveCmd()
		cmd.AddCommand(archiveListCmd())
		cmd.AddCommand(archiveCreateCmd())
		cmd.AddCommand(archiveReadCmd())
		cmd.AddCommand(archiveUpdateCmd())
		cmd.AddCommand(archiveDeleteCmd())
		cmd.AddCommand(archiveUploadCmd())
		cmd.AddCommand(archiveDownloadCmd())
		cmd.AddCommand(archiveFTPOpenCmd())
		cmd.AddCommand(archiveFTPCloseCmd())
		cmd.AddCommand(archiveWaitForCopyCmd())
		buildCommandsUsage(cmd, archiveCommandOrder(cmd))
		rootCmd.AddCommand(cmd)
	}
	{
		cmd := autoBackupCmd()
		cmd.AddCommand(autoBackupListCmd())
		cmd.AddCommand(autoBackupCreateCmd())
		cmd.AddCommand(autoBackupReadCmd())
		cmd.AddCommand(autoBackupUpdateCmd())
		cmd.AddCommand(autoBackupDeleteCmd())
		buildCommandsUsage(cmd, autoBackupCommandOrder(cmd))
		rootCmd.AddCommand(cmd)
	}
	{
		cmd := diskCmd()
		cmd.AddCommand(diskListCmd())
		cmd.AddCommand(diskCreateCmd())
		cmd.AddCommand(diskReadCmd())
		cmd.AddCommand(diskUpdateCmd())
		cmd.AddCommand(diskDeleteCmd())
		cmd.AddCommand(diskEditCmd())
		cmd.AddCommand(diskResizePartitionCmd())
		cmd.AddCommand(diskReinstallFromArchiveCmd())
		cmd.AddCommand(diskReinstallFromDiskCmd())
		cmd.AddCommand(diskReinstallToBlankCmd())
		cmd.AddCommand(diskServerConnectCmd())
		cmd.AddCommand(diskServerDisconnectCmd())
		cmd.AddCommand(diskMonitorCmd())
		cmd.AddCommand(diskWaitForCopyCmd())
		buildCommandsUsage(cmd, diskCommandOrder(cmd))
		rootCmd.AddCommand(cmd)
	}
	{
		cmd := bridgeCmd()
		cmd.AddCommand(bridgeListCmd())
		cmd.AddCommand(bridgeCreateCmd())
		cmd.AddCommand(bridgeReadCmd())
		cmd.AddCommand(bridgeUpdateCmd())
		cmd.AddCommand(bridgeDeleteCmd())
		buildCommandsUsage(cmd, bridgeCommandOrder(cmd))
		rootCmd.AddCommand(cmd)
	}
	{
		cmd := databaseCmd()
		cmd.AddCommand(databaseListCmd())
		cmd.AddCommand(databaseCreateCmd())
		cmd.AddCommand(databaseReadCmd())
		cmd.AddCommand(databaseUpdateCmd())
		cmd.AddCommand(databaseDeleteCmd())
		cmd.AddCommand(databaseBootCmd())
		cmd.AddCommand(databaseShutdownCmd())
		cmd.AddCommand(databaseShutdownForceCmd())
		cmd.AddCommand(databaseResetCmd())
		cmd.AddCommand(databaseWaitForBootCmd())
		cmd.AddCommand(databaseWaitForDownCmd())
		cmd.AddCommand(databaseBackupInfoCmd())
		cmd.AddCommand(databaseBackupCreateCmd())
		cmd.AddCommand(databaseBackupRestoreCmd())
		cmd.AddCommand(databaseBackupLockCmd())
		cmd.AddCommand(databaseBackupUnlockCmd())
		cmd.AddCommand(databaseBackupRemoveCmd())
		cmd.AddCommand(databaseCloneCmd())
		cmd.AddCommand(databaseReplicaCreateCmd())
		cmd.AddCommand(databaseMonitorCPUCmd())
		cmd.AddCommand(databaseMonitorMemoryCmd())
		cmd.AddCommand(databaseMonitorNicCmd())
		cmd.AddCommand(databaseMonitorSystemDiskCmd())
		cmd.AddCommand(databaseMonitorBackupDiskCmd())
		cmd.AddCommand(databaseMonitorSystemDiskSizeCmd())
		cmd.AddCommand(databaseMonitorBackupDiskSizeCmd())
		cmd.AddCommand(databaseLogsCmd())
		buildCommandsUsage(cmd, databaseCommandOrder(cmd))
		rootCmd.AddCommand(cmd)
	}
	{
		cmd := billCmd()
		cmd.AddCommand(billCsvCmd())
		cmd.AddCommand(billListCmd())
		buildCommandsUsage(cmd, billCommandOrder(cmd))
		rootCmd.AddCommand(cmd)
	}
	{
		cmd := couponCmd()
		cmd.AddCommand(couponListCmd())
		buildCommandsUsage(cmd, couponCommandOrder(cmd))
		rootCmd.AddCommand(cmd)
	}

	buildCommandsUsage(rootCmd, rootCommandOrder(rootCmd))
	rootCmd.SetUsageTemplate(rootCmd.UsageTemplate() + "\nCopyright 2017-2020 The Usacloud Authors\n")
}
