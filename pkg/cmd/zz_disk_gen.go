// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-commands'; DO NOT EDIT

package cmd

import (
	"errors"
	"sync"

	"github.com/sacloud/libsacloud/v2/sacloud/types"
	"github.com/sacloud/usacloud/pkg/cli"
	"github.com/sacloud/usacloud/pkg/funcs/disk"
	"github.com/sacloud/usacloud/pkg/params"
	"github.com/sacloud/usacloud/pkg/term"
	"github.com/sacloud/usacloud/pkg/util"
	"github.com/spf13/cobra"
)

// diskCmd represents the command to manage SAKURA Cloud Disk
func diskCmd() *cobra.Command {
	return &cobra.Command{
		Use: "disk",

		Short: "A manage commands of Disk",
		Long:  `A manage commands of Disk`,
		RunE: func(cmd *cobra.Command, args []string) error {
			cmd.HelpFunc()(cmd, args)
			return nil
		},
	}
}

func diskListCmd() *cobra.Command {
	diskListParam := params.NewListDiskParam()
	cmd := &cobra.Command{
		Use:          "list",
		Aliases:      []string{"ls", "find", "select"},
		Short:        "List Disk",
		Long:         `List Disk`,
		SilenceUsage: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext("disk", "list", globalFlags(), args, diskListParam)
			if err != nil {
				return err
			}
			if err := diskListParam.Initialize(newParamsAdapter(cmd.Flags()), args, ctx.Option()); err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if diskListParam.GenerateSkeleton {
				return generateSkeleton(ctx, diskListParam)
			}

			return cli.WrapError(ctx, disk.List(ctx, diskListParam))

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&diskListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.VarP(newIDSliceValue([]types.ID{}, &diskListParam.Id), "id", "", "set filter by id(s)")
	fs.StringVarP(&diskListParam.Scope, "scope", "", "", "set filter by scope('user' or 'shared')")
	fs.StringSliceVarP(&diskListParam.Tags, "tags", "", []string{}, "set filter by tags(AND) (aliases: selector)")
	fs.VarP(newIDValue(0, &diskListParam.SourceArchiveId), "source-archive-id", "", "set filter by source-archive-id")
	fs.VarP(newIDValue(0, &diskListParam.SourceDiskId), "source-disk-id", "", "set filter by source-disk-id")
	fs.StringVarP(&diskListParam.Storage, "storage", "", "", "set filter by storage-name")
	fs.IntVarP(&diskListParam.From, "from", "", 0, "set offset (aliases: offset)")
	fs.IntVarP(&diskListParam.Max, "max", "", 0, "set limit (aliases: limit)")
	fs.StringSliceVarP(&diskListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
	fs.StringVarP(&diskListParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&diskListParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&diskListParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&diskListParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&diskListParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&diskListParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&diskListParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&diskListParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&diskListParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&diskListParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.SetNormalizeFunc(diskListNormalizeFlagNames)
	buildFlagsUsage(cmd, diskListFlagOrder(cmd))
	return cmd
}

func diskCreateCmd() *cobra.Command {
	diskCreateParam := params.NewCreateDiskParam()
	cmd := &cobra.Command{
		Use: "create",

		Short:        "Create Disk",
		Long:         `Create Disk`,
		SilenceUsage: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext("disk", "create", globalFlags(), args, diskCreateParam)
			if err != nil {
				return err
			}
			if err := diskCreateParam.Initialize(newParamsAdapter(cmd.Flags()), args, ctx.Option()); err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if diskCreateParam.GenerateSkeleton {
				return generateSkeleton(ctx, diskCreateParam)
			}

			// confirm
			if !diskCreateParam.Assumeyes {
				if !term.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := util.ConfirmContinue("create", ctx.IO().In(), ctx.IO().Out())
				if err != nil || !result {
					return err
				}
			}

			return cli.WrapError(ctx, disk.Create(ctx, diskCreateParam))

		},
	}

	fs := cmd.Flags()
	fs.StringVarP(&diskCreateParam.Plan, "plan", "", "ssd", "set disk plan('hdd' or 'ssd')")
	fs.StringVarP(&diskCreateParam.Connection, "connection", "", "virtio", "set disk connection('virtio' or 'ide')")
	fs.VarP(newIDValue(0, &diskCreateParam.SourceArchiveId), "source-archive-id", "", "set source disk ID")
	fs.VarP(newIDValue(0, &diskCreateParam.SourceDiskId), "source-disk-id", "", "set source disk ID")
	fs.IntVarP(&diskCreateParam.Size, "size", "", 20, "set disk size(GB)")
	fs.VarP(newIDSliceValue([]types.ID{}, &diskCreateParam.DistantFrom), "distant-from", "", "set distant from disk IDs")
	fs.StringVarP(&diskCreateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&diskCreateParam.Description, "description", "", "", "set resource description (aliases: desc)")
	fs.StringSliceVarP(&diskCreateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &diskCreateParam.IconId), "icon-id", "", "set Icon ID")
	fs.BoolVarP(&diskCreateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&diskCreateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&diskCreateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&diskCreateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&diskCreateParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&diskCreateParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&diskCreateParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&diskCreateParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&diskCreateParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&diskCreateParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&diskCreateParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.SetNormalizeFunc(diskCreateNormalizeFlagNames)
	buildFlagsUsage(cmd, diskCreateFlagOrder(cmd))
	return cmd
}

func diskReadCmd() *cobra.Command {
	diskReadParam := params.NewReadDiskParam()
	cmd := &cobra.Command{
		Use: "read",

		Short:        "Read Disk",
		Long:         `Read Disk`,
		SilenceUsage: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext("disk", "read", globalFlags(), args, diskReadParam)
			if err != nil {
				return err
			}
			if err := diskReadParam.Initialize(newParamsAdapter(cmd.Flags()), args, ctx.Option()); err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if diskReadParam.GenerateSkeleton {
				return generateSkeleton(ctx, diskReadParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findDiskReadTargets(ctx, diskReadParam)
			if err != nil {
				return err
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				go func(ctx cli.Context, p *params.ReadDiskParam) {
					err := cli.WrapError(ctx, disk.Read(ctx, p))
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(ctx.WithID(id), diskReadParam.WithID(id))
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&diskReadParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&diskReadParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&diskReadParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&diskReadParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&diskReadParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&diskReadParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&diskReadParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&diskReadParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&diskReadParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&diskReadParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&diskReadParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &diskReadParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(diskReadNormalizeFlagNames)
	buildFlagsUsage(cmd, diskReadFlagOrder(cmd))
	return cmd
}

func diskUpdateCmd() *cobra.Command {
	diskUpdateParam := params.NewUpdateDiskParam()
	cmd := &cobra.Command{
		Use: "update",

		Short:        "Update Disk",
		Long:         `Update Disk`,
		SilenceUsage: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext("disk", "update", globalFlags(), args, diskUpdateParam)
			if err != nil {
				return err
			}
			if err := diskUpdateParam.Initialize(newParamsAdapter(cmd.Flags()), args, ctx.Option()); err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if diskUpdateParam.GenerateSkeleton {
				return generateSkeleton(ctx, diskUpdateParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findDiskUpdateTargets(ctx, diskUpdateParam)
			if err != nil {
				return err
			}

			// confirm
			if !diskUpdateParam.Assumeyes {
				if !term.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := util.ConfirmContinue("update", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				go func(ctx cli.Context, p *params.UpdateDiskParam) {
					err := cli.WrapError(ctx, disk.Update(ctx, p))
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(ctx.WithID(id), diskUpdateParam.WithID(id))
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringVarP(&diskUpdateParam.Connection, "connection", "", "", "set disk connection('virtio' or 'ide')")
	fs.StringSliceVarP(&diskUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&diskUpdateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&diskUpdateParam.Description, "description", "", "", "set resource description (aliases: desc)")
	fs.StringSliceVarP(&diskUpdateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &diskUpdateParam.IconId), "icon-id", "", "set Icon ID")
	fs.BoolVarP(&diskUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&diskUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&diskUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&diskUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&diskUpdateParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&diskUpdateParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&diskUpdateParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&diskUpdateParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&diskUpdateParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&diskUpdateParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&diskUpdateParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &diskUpdateParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(diskUpdateNormalizeFlagNames)
	buildFlagsUsage(cmd, diskUpdateFlagOrder(cmd))
	return cmd
}

func diskDeleteCmd() *cobra.Command {
	diskDeleteParam := params.NewDeleteDiskParam()
	cmd := &cobra.Command{
		Use:          "delete",
		Aliases:      []string{"rm"},
		Short:        "Delete Disk",
		Long:         `Delete Disk`,
		SilenceUsage: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext("disk", "delete", globalFlags(), args, diskDeleteParam)
			if err != nil {
				return err
			}
			if err := diskDeleteParam.Initialize(newParamsAdapter(cmd.Flags()), args, ctx.Option()); err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if diskDeleteParam.GenerateSkeleton {
				return generateSkeleton(ctx, diskDeleteParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findDiskDeleteTargets(ctx, diskDeleteParam)
			if err != nil {
				return err
			}

			// confirm
			if !diskDeleteParam.Assumeyes {
				if !term.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := util.ConfirmContinue("delete", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				go func(ctx cli.Context, p *params.DeleteDiskParam) {
					err := cli.WrapError(ctx, disk.Delete(ctx, p))
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(ctx.WithID(id), diskDeleteParam.WithID(id))
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&diskDeleteParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&diskDeleteParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&diskDeleteParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&diskDeleteParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&diskDeleteParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&diskDeleteParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&diskDeleteParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&diskDeleteParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&diskDeleteParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&diskDeleteParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&diskDeleteParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&diskDeleteParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &diskDeleteParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(diskDeleteNormalizeFlagNames)
	buildFlagsUsage(cmd, diskDeleteFlagOrder(cmd))
	return cmd
}

func diskEditCmd() *cobra.Command {
	diskEditParam := params.NewEditDiskParam()
	cmd := &cobra.Command{
		Use:          "edit",
		Aliases:      []string{"config"},
		Short:        "Edit Disk",
		Long:         `Edit Disk`,
		SilenceUsage: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext("disk", "edit", globalFlags(), args, diskEditParam)
			if err != nil {
				return err
			}
			if err := diskEditParam.Initialize(newParamsAdapter(cmd.Flags()), args, ctx.Option()); err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if diskEditParam.GenerateSkeleton {
				return generateSkeleton(ctx, diskEditParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findDiskEditTargets(ctx, diskEditParam)
			if err != nil {
				return err
			}

			// confirm
			if !diskEditParam.Assumeyes {
				if !term.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := util.ConfirmContinue("edit", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				go func(ctx cli.Context, p *params.EditDiskParam) {
					err := cli.WrapError(ctx, disk.Edit(ctx, p))
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(ctx.WithID(id), diskEditParam.WithID(id))
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringVarP(&diskEditParam.Hostname, "hostname", "", "", "set hostname")
	fs.StringVarP(&diskEditParam.Password, "password", "", "", "set password")
	fs.VarP(newIDSliceValue([]types.ID{}, &diskEditParam.SSHKeyIds), "ssh-key-ids", "", "set ssh-key ID(s)")
	fs.BoolVarP(&diskEditParam.DisablePasswordAuth, "disable-password-auth", "", false, "disable password auth on SSH (aliases: disable-pw-auth)")
	fs.StringVarP(&diskEditParam.Ipaddress, "ipaddress", "", "", "set ipaddress (aliases: ip)")
	fs.StringVarP(&diskEditParam.DefaultRoute, "default-route", "", "", "set default gateway (aliases: gateway)")
	fs.IntVarP(&diskEditParam.NwMasklen, "nw-masklen", "", 24, "set ipaddress  prefix (aliases: network-masklen)")
	fs.VarP(newIDSliceValue([]types.ID{}, &diskEditParam.StartupScriptIds), "startup-script-ids", "", "set startup-script ID(s) (aliases: note-ids)")
	fs.StringSliceVarP(&diskEditParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&diskEditParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&diskEditParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&diskEditParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&diskEditParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&diskEditParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&diskEditParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&diskEditParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&diskEditParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&diskEditParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&diskEditParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&diskEditParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &diskEditParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(diskEditNormalizeFlagNames)
	buildFlagsUsage(cmd, diskEditFlagOrder(cmd))
	return cmd
}

func diskResizePartitionCmd() *cobra.Command {
	diskResizePartitionParam := params.NewResizePartitionDiskParam()
	cmd := &cobra.Command{
		Use: "resize-partition",

		Short:        "ResizePartition Disk",
		Long:         `ResizePartition Disk`,
		SilenceUsage: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext("disk", "resize-partition", globalFlags(), args, diskResizePartitionParam)
			if err != nil {
				return err
			}
			if err := diskResizePartitionParam.Initialize(newParamsAdapter(cmd.Flags()), args, ctx.Option()); err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if diskResizePartitionParam.GenerateSkeleton {
				return generateSkeleton(ctx, diskResizePartitionParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findDiskResizePartitionTargets(ctx, diskResizePartitionParam)
			if err != nil {
				return err
			}

			// confirm
			if !diskResizePartitionParam.Assumeyes {
				if !term.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := util.ConfirmContinue("resize-partition", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				go func(ctx cli.Context, p *params.ResizePartitionDiskParam) {
					err := cli.WrapError(ctx, disk.ResizePartition(ctx, p))
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(ctx.WithID(id), diskResizePartitionParam.WithID(id))
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&diskResizePartitionParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&diskResizePartitionParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&diskResizePartitionParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&diskResizePartitionParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&diskResizePartitionParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&diskResizePartitionParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&diskResizePartitionParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&diskResizePartitionParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&diskResizePartitionParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&diskResizePartitionParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&diskResizePartitionParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&diskResizePartitionParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &diskResizePartitionParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(diskResizePartitionNormalizeFlagNames)
	buildFlagsUsage(cmd, diskResizePartitionFlagOrder(cmd))
	return cmd
}

func diskReinstallFromArchiveCmd() *cobra.Command {
	diskReinstallFromArchiveParam := params.NewReinstallFromArchiveDiskParam()
	cmd := &cobra.Command{
		Use: "reinstall-from-archive",

		Short:        "ReinstallFromArchive Disk",
		Long:         `ReinstallFromArchive Disk`,
		SilenceUsage: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext("disk", "reinstall-from-archive", globalFlags(), args, diskReinstallFromArchiveParam)
			if err != nil {
				return err
			}
			if err := diskReinstallFromArchiveParam.Initialize(newParamsAdapter(cmd.Flags()), args, ctx.Option()); err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if diskReinstallFromArchiveParam.GenerateSkeleton {
				return generateSkeleton(ctx, diskReinstallFromArchiveParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findDiskReinstallFromArchiveTargets(ctx, diskReinstallFromArchiveParam)
			if err != nil {
				return err
			}

			// confirm
			if !diskReinstallFromArchiveParam.Assumeyes {
				if !term.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := util.ConfirmContinue("re-install from archive", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				go func(ctx cli.Context, p *params.ReinstallFromArchiveDiskParam) {
					err := cli.WrapError(ctx, disk.ReinstallFromArchive(ctx, p))
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(ctx.WithID(id), diskReinstallFromArchiveParam.WithID(id))
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.VarP(newIDValue(0, &diskReinstallFromArchiveParam.SourceArchiveId), "source-archive-id", "", "set source archive ID")
	fs.VarP(newIDSliceValue([]types.ID{}, &diskReinstallFromArchiveParam.DistantFrom), "distant-from", "", "set distant from disk IDs")
	fs.StringSliceVarP(&diskReinstallFromArchiveParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&diskReinstallFromArchiveParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&diskReinstallFromArchiveParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&diskReinstallFromArchiveParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&diskReinstallFromArchiveParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &diskReinstallFromArchiveParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(diskReinstallFromArchiveNormalizeFlagNames)
	buildFlagsUsage(cmd, diskReinstallFromArchiveFlagOrder(cmd))
	return cmd
}

func diskReinstallFromDiskCmd() *cobra.Command {
	diskReinstallFromDiskParam := params.NewReinstallFromDiskDiskParam()
	cmd := &cobra.Command{
		Use: "reinstall-from-disk",

		Short:        "ReinstallFromDisk Disk",
		Long:         `ReinstallFromDisk Disk`,
		SilenceUsage: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext("disk", "reinstall-from-disk", globalFlags(), args, diskReinstallFromDiskParam)
			if err != nil {
				return err
			}
			if err := diskReinstallFromDiskParam.Initialize(newParamsAdapter(cmd.Flags()), args, ctx.Option()); err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if diskReinstallFromDiskParam.GenerateSkeleton {
				return generateSkeleton(ctx, diskReinstallFromDiskParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findDiskReinstallFromDiskTargets(ctx, diskReinstallFromDiskParam)
			if err != nil {
				return err
			}

			// confirm
			if !diskReinstallFromDiskParam.Assumeyes {
				if !term.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := util.ConfirmContinue("re-install from disk", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				go func(ctx cli.Context, p *params.ReinstallFromDiskDiskParam) {
					err := cli.WrapError(ctx, disk.ReinstallFromDisk(ctx, p))
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(ctx.WithID(id), diskReinstallFromDiskParam.WithID(id))
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.VarP(newIDValue(0, &diskReinstallFromDiskParam.SourceDiskId), "source-disk-id", "", "set source disk ID")
	fs.VarP(newIDSliceValue([]types.ID{}, &diskReinstallFromDiskParam.DistantFrom), "distant-from", "", "set distant from disk IDs")
	fs.StringSliceVarP(&diskReinstallFromDiskParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&diskReinstallFromDiskParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&diskReinstallFromDiskParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&diskReinstallFromDiskParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&diskReinstallFromDiskParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &diskReinstallFromDiskParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(diskReinstallFromDiskNormalizeFlagNames)
	buildFlagsUsage(cmd, diskReinstallFromDiskFlagOrder(cmd))
	return cmd
}

func diskReinstallToBlankCmd() *cobra.Command {
	diskReinstallToBlankParam := params.NewReinstallToBlankDiskParam()
	cmd := &cobra.Command{
		Use: "reinstall-to-blank",

		Short:        "ReinstallToBlank Disk",
		Long:         `ReinstallToBlank Disk`,
		SilenceUsage: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext("disk", "reinstall-to-blank", globalFlags(), args, diskReinstallToBlankParam)
			if err != nil {
				return err
			}
			if err := diskReinstallToBlankParam.Initialize(newParamsAdapter(cmd.Flags()), args, ctx.Option()); err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if diskReinstallToBlankParam.GenerateSkeleton {
				return generateSkeleton(ctx, diskReinstallToBlankParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findDiskReinstallToBlankTargets(ctx, diskReinstallToBlankParam)
			if err != nil {
				return err
			}

			// confirm
			if !diskReinstallToBlankParam.Assumeyes {
				if !term.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := util.ConfirmContinue("re-install to blank", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				go func(ctx cli.Context, p *params.ReinstallToBlankDiskParam) {
					err := cli.WrapError(ctx, disk.ReinstallToBlank(ctx, p))
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(ctx.WithID(id), diskReinstallToBlankParam.WithID(id))
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.VarP(newIDSliceValue([]types.ID{}, &diskReinstallToBlankParam.DistantFrom), "distant-from", "", "set distant from disk IDs")
	fs.StringSliceVarP(&diskReinstallToBlankParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&diskReinstallToBlankParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&diskReinstallToBlankParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&diskReinstallToBlankParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&diskReinstallToBlankParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &diskReinstallToBlankParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(diskReinstallToBlankNormalizeFlagNames)
	buildFlagsUsage(cmd, diskReinstallToBlankFlagOrder(cmd))
	return cmd
}

func diskServerConnectCmd() *cobra.Command {
	diskServerConnectParam := params.NewServerConnectDiskParam()
	cmd := &cobra.Command{
		Use: "server-connect",

		Short:        "ServerConnect Disk",
		Long:         `ServerConnect Disk`,
		SilenceUsage: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext("disk", "server-connect", globalFlags(), args, diskServerConnectParam)
			if err != nil {
				return err
			}
			if err := diskServerConnectParam.Initialize(newParamsAdapter(cmd.Flags()), args, ctx.Option()); err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if diskServerConnectParam.GenerateSkeleton {
				return generateSkeleton(ctx, diskServerConnectParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findDiskServerConnectTargets(ctx, diskServerConnectParam)
			if err != nil {
				return err
			}

			// confirm
			if !diskServerConnectParam.Assumeyes {
				if !term.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := util.ConfirmContinue("server-connect", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				go func(ctx cli.Context, p *params.ServerConnectDiskParam) {
					err := cli.WrapError(ctx, disk.ServerConnect(ctx, p))
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(ctx.WithID(id), diskServerConnectParam.WithID(id))
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.VarP(newIDValue(0, &diskServerConnectParam.ServerId), "server-id", "", "set target server ID")
	fs.StringSliceVarP(&diskServerConnectParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&diskServerConnectParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&diskServerConnectParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&diskServerConnectParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&diskServerConnectParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &diskServerConnectParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(diskServerConnectNormalizeFlagNames)
	buildFlagsUsage(cmd, diskServerConnectFlagOrder(cmd))
	return cmd
}

func diskServerDisconnectCmd() *cobra.Command {
	diskServerDisconnectParam := params.NewServerDisconnectDiskParam()
	cmd := &cobra.Command{
		Use: "server-disconnect",

		Short:        "ServerDisconnect Disk",
		Long:         `ServerDisconnect Disk`,
		SilenceUsage: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext("disk", "server-disconnect", globalFlags(), args, diskServerDisconnectParam)
			if err != nil {
				return err
			}
			if err := diskServerDisconnectParam.Initialize(newParamsAdapter(cmd.Flags()), args, ctx.Option()); err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if diskServerDisconnectParam.GenerateSkeleton {
				return generateSkeleton(ctx, diskServerDisconnectParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findDiskServerDisconnectTargets(ctx, diskServerDisconnectParam)
			if err != nil {
				return err
			}

			// confirm
			if !diskServerDisconnectParam.Assumeyes {
				if !term.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := util.ConfirmContinue("server-disconnect", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				go func(ctx cli.Context, p *params.ServerDisconnectDiskParam) {
					err := cli.WrapError(ctx, disk.ServerDisconnect(ctx, p))
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(ctx.WithID(id), diskServerDisconnectParam.WithID(id))
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&diskServerDisconnectParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&diskServerDisconnectParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&diskServerDisconnectParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&diskServerDisconnectParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&diskServerDisconnectParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &diskServerDisconnectParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(diskServerDisconnectNormalizeFlagNames)
	buildFlagsUsage(cmd, diskServerDisconnectFlagOrder(cmd))
	return cmd
}

func diskMonitorCmd() *cobra.Command {
	diskMonitorParam := params.NewMonitorDiskParam()
	cmd := &cobra.Command{
		Use: "monitor",

		Short:        "Monitor Disk",
		Long:         `Monitor Disk`,
		SilenceUsage: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext("disk", "monitor", globalFlags(), args, diskMonitorParam)
			if err != nil {
				return err
			}
			if err := diskMonitorParam.Initialize(newParamsAdapter(cmd.Flags()), args, ctx.Option()); err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if diskMonitorParam.GenerateSkeleton {
				return generateSkeleton(ctx, diskMonitorParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findDiskMonitorTargets(ctx, diskMonitorParam)
			if err != nil {
				return err
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				go func(ctx cli.Context, p *params.MonitorDiskParam) {
					err := cli.WrapError(ctx, disk.Monitor(ctx, p))
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(ctx.WithID(id), diskMonitorParam.WithID(id))
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&diskMonitorParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&diskMonitorParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&diskMonitorParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&diskMonitorParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&diskMonitorParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&diskMonitorParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&diskMonitorParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&diskMonitorParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&diskMonitorParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&diskMonitorParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&diskMonitorParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.StringVarP(&diskMonitorParam.End, "end", "", "", "set end-time")
	fs.VarP(newIDValue(0, &diskMonitorParam.Id), "id", "", "Set target ID")
	fs.StringVarP(&diskMonitorParam.KeyFormat, "key-format", "", "sakuracloud.disk.{{.ID}}.disk", "set monitoring value key-format")
	fs.StringVarP(&diskMonitorParam.Start, "start", "", "", "set start-time")
	fs.SetNormalizeFunc(diskMonitorNormalizeFlagNames)
	buildFlagsUsage(cmd, diskMonitorFlagOrder(cmd))
	return cmd
}

func diskWaitForCopyCmd() *cobra.Command {
	diskWaitForCopyParam := params.NewWaitForCopyDiskParam()
	cmd := &cobra.Command{
		Use:          "wait-for-copy",
		Aliases:      []string{"wait"},
		Short:        "WaitForCopy Disk",
		Long:         `WaitForCopy Disk`,
		SilenceUsage: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext("disk", "wait-for-copy", globalFlags(), args, diskWaitForCopyParam)
			if err != nil {
				return err
			}
			if err := diskWaitForCopyParam.Initialize(newParamsAdapter(cmd.Flags()), args, ctx.Option()); err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if diskWaitForCopyParam.GenerateSkeleton {
				return generateSkeleton(ctx, diskWaitForCopyParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findDiskWaitForCopyTargets(ctx, diskWaitForCopyParam)
			if err != nil {
				return err
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				go func(ctx cli.Context, p *params.WaitForCopyDiskParam) {
					err := cli.WrapError(ctx, disk.WaitForCopy(ctx, p))
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(ctx.WithID(id), diskWaitForCopyParam.WithID(id))
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&diskWaitForCopyParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&diskWaitForCopyParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&diskWaitForCopyParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&diskWaitForCopyParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &diskWaitForCopyParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(diskWaitForCopyNormalizeFlagNames)
	buildFlagsUsage(cmd, diskWaitForCopyFlagOrder(cmd))
	return cmd
}
