// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-params'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/v2/sacloud/types"
	"github.com/sacloud/usacloud/pkg/cli"
	"github.com/sacloud/usacloud/pkg/config"
	"github.com/sacloud/usacloud/pkg/define"
	"github.com/sacloud/usacloud/pkg/output"
	"github.com/sacloud/usacloud/pkg/schema"
	"github.com/sacloud/usacloud/pkg/util"
	"github.com/sacloud/usacloud/pkg/validation"
)

// ListArchiveParam is input parameters for the sacloud API
type ListArchiveParam struct {
	Name             []string
	Id               []types.ID
	Scope            string
	Tags             []string
	SourceArchiveId  types.ID
	SourceDiskId     types.ID
	From             int
	Max              int
	Sort             []string
	Parameters       string
	ParameterFile    string
	GenerateSkeleton bool
	OutputType       string
	Column           []string
	Quiet            bool
	Format           string
	FormatFile       string
	Query            string
	QueryFile        string

	config *config.Config
	input  Input
}

// NewListArchiveParam return new ListArchiveParam
func NewListArchiveParam() *ListArchiveParam {
	return &ListArchiveParam{}
}

// Initialize init ListArchiveParam
func (p *ListArchiveParam) Initialize(in Input, args []string, config *config.Config) error {
	p.input = in
	p.config = config
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ListArchiveParam) FillValueToSkeleton() {
	if util.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if util.IsEmpty(p.Id) {
		p.Id = []types.ID{}
	}
	if util.IsEmpty(p.Scope) {
		p.Scope = ""
	}
	if util.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if util.IsEmpty(p.SourceArchiveId) {
		p.SourceArchiveId = types.ID(0)
	}
	if util.IsEmpty(p.SourceDiskId) {
		p.SourceDiskId = types.ID(0)
	}
	if util.IsEmpty(p.From) {
		p.From = 0
	}
	if util.IsEmpty(p.Max) {
		p.Max = 0
	}
	if util.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if util.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if util.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if util.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if util.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if util.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if util.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if util.IsEmpty(p.Format) {
		p.Format = ""
	}
	if util.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if util.IsEmpty(p.Query) {
		p.Query = ""
	}
	if util.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *ListArchiveParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["list"].Params["scope"].ValidateFunc
		errs := validator("--scope", p.Scope)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["list"].Params["source-archive-id"].ValidateFunc
		errs := validator("--source-archive-id", p.SourceArchiveId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["list"].Params["source-disk-id"].ValidateFunc
		errs := validator("--source-disk-id", p.SourceDiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := cli.ValidateOutputOption(p, p.config.DefaultOutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return util.FlattenErrors(errors)
}

func (p *ListArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *ListArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListArchiveParam) SetName(v []string) {
	p.Name = v
}

func (p *ListArchiveParam) GetName() []string {
	return p.Name
}
func (p *ListArchiveParam) SetId(v []types.ID) {
	p.Id = v
}

func (p *ListArchiveParam) GetId() []types.ID {
	return p.Id
}
func (p *ListArchiveParam) SetScope(v string) {
	p.Scope = v
}

func (p *ListArchiveParam) GetScope() string {
	return p.Scope
}
func (p *ListArchiveParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListArchiveParam) GetTags() []string {
	return p.Tags
}
func (p *ListArchiveParam) SetSourceArchiveId(v types.ID) {
	p.SourceArchiveId = v
}

func (p *ListArchiveParam) GetSourceArchiveId() types.ID {
	return p.SourceArchiveId
}
func (p *ListArchiveParam) SetSourceDiskId(v types.ID) {
	p.SourceDiskId = v
}

func (p *ListArchiveParam) GetSourceDiskId() types.ID {
	return p.SourceDiskId
}
func (p *ListArchiveParam) SetFrom(v int) {
	p.From = v
}

func (p *ListArchiveParam) GetFrom() int {
	return p.From
}
func (p *ListArchiveParam) SetMax(v int) {
	p.Max = v
}

func (p *ListArchiveParam) GetMax() int {
	return p.Max
}
func (p *ListArchiveParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListArchiveParam) GetSort() []string {
	return p.Sort
}
func (p *ListArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *ListArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListArchiveParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListArchiveParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListArchiveParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListArchiveParam) GetColumn() []string {
	return p.Column
}
func (p *ListArchiveParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListArchiveParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListArchiveParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListArchiveParam) GetFormat() string {
	return p.Format
}
func (p *ListArchiveParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListArchiveParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListArchiveParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListArchiveParam) GetQuery() string {
	return p.Query
}
func (p *ListArchiveParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListArchiveParam) GetQueryFile() string {
	return p.QueryFile
}

// Changed 指定の項目に入力があった場合にtrueを返す
func (p *ListArchiveParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// CreateArchiveParam is input parameters for the sacloud API
type CreateArchiveParam struct {
	SourceDiskId     types.ID
	SourceArchiveId  types.ID
	Size             int
	ArchiveFile      string
	Name             string
	Description      string
	Tags             []string
	IconId           types.ID
	Assumeyes        bool
	Parameters       string
	ParameterFile    string
	GenerateSkeleton bool
	OutputType       string
	Column           []string
	Quiet            bool
	Format           string
	FormatFile       string
	Query            string
	QueryFile        string

	config *config.Config
	input  Input
}

// NewCreateArchiveParam return new CreateArchiveParam
func NewCreateArchiveParam() *CreateArchiveParam {
	return &CreateArchiveParam{}
}

// Initialize init CreateArchiveParam
func (p *CreateArchiveParam) Initialize(in Input, args []string, config *config.Config) error {
	p.input = in
	p.config = config
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *CreateArchiveParam) FillValueToSkeleton() {
	if util.IsEmpty(p.SourceDiskId) {
		p.SourceDiskId = types.ID(0)
	}
	if util.IsEmpty(p.SourceArchiveId) {
		p.SourceArchiveId = types.ID(0)
	}
	if util.IsEmpty(p.Size) {
		p.Size = 0
	}
	if util.IsEmpty(p.ArchiveFile) {
		p.ArchiveFile = ""
	}
	if util.IsEmpty(p.Name) {
		p.Name = ""
	}
	if util.IsEmpty(p.Description) {
		p.Description = ""
	}
	if util.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if util.IsEmpty(p.IconId) {
		p.IconId = types.ID(0)
	}
	if util.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if util.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if util.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if util.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if util.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if util.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if util.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if util.IsEmpty(p.Format) {
		p.Format = ""
	}
	if util.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if util.IsEmpty(p.Query) {
		p.Query = ""
	}
	if util.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *CreateArchiveParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Archive"].Commands["create"].Params["source-disk-id"].ValidateFunc
		errs := validator("--source-disk-id", p.SourceDiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--source-disk-id", p.SourceDiskId, map[string]interface{}{

			"--archive-file":      p.ArchiveFile,
			"--size":              p.Size,
			"--source-archive-id": p.SourceArchiveId,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["create"].Params["source-archive-id"].ValidateFunc
		errs := validator("--source-archive-id", p.SourceArchiveId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--source-archive-id", p.SourceArchiveId, map[string]interface{}{

			"--archive-file":   p.ArchiveFile,
			"--size":           p.Size,
			"--source-disk-id": p.SourceDiskId,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["create"].Params["size"].ValidateFunc
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--size", p.Size, map[string]interface{}{

			"--source-archive-id": p.SourceArchiveId,
			"--source-disk-id":    p.SourceDiskId,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["create"].Params["archive-file"].ValidateFunc
		errs := validator("--archive-file", p.ArchiveFile)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--archive-file", p.ArchiveFile, map[string]interface{}{

			"--source-archive-id": p.SourceArchiveId,
			"--source-disk-id":    p.SourceDiskId,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := cli.ValidateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := cli.ValidateOutputOption(p, p.config.DefaultOutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return util.FlattenErrors(errors)
}

func (p *CreateArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *CreateArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateArchiveParam) SetSourceDiskId(v types.ID) {
	p.SourceDiskId = v
}

func (p *CreateArchiveParam) GetSourceDiskId() types.ID {
	return p.SourceDiskId
}
func (p *CreateArchiveParam) SetSourceArchiveId(v types.ID) {
	p.SourceArchiveId = v
}

func (p *CreateArchiveParam) GetSourceArchiveId() types.ID {
	return p.SourceArchiveId
}
func (p *CreateArchiveParam) SetSize(v int) {
	p.Size = v
}

func (p *CreateArchiveParam) GetSize() int {
	return p.Size
}
func (p *CreateArchiveParam) SetArchiveFile(v string) {
	p.ArchiveFile = v
}

func (p *CreateArchiveParam) GetArchiveFile() string {
	return p.ArchiveFile
}
func (p *CreateArchiveParam) SetName(v string) {
	p.Name = v
}

func (p *CreateArchiveParam) GetName() string {
	return p.Name
}
func (p *CreateArchiveParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateArchiveParam) GetDescription() string {
	return p.Description
}
func (p *CreateArchiveParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateArchiveParam) GetTags() []string {
	return p.Tags
}
func (p *CreateArchiveParam) SetIconId(v types.ID) {
	p.IconId = v
}

func (p *CreateArchiveParam) GetIconId() types.ID {
	return p.IconId
}
func (p *CreateArchiveParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateArchiveParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateArchiveParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateArchiveParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateArchiveParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateArchiveParam) GetColumn() []string {
	return p.Column
}
func (p *CreateArchiveParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateArchiveParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateArchiveParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateArchiveParam) GetFormat() string {
	return p.Format
}
func (p *CreateArchiveParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateArchiveParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateArchiveParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateArchiveParam) GetQuery() string {
	return p.Query
}
func (p *CreateArchiveParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateArchiveParam) GetQueryFile() string {
	return p.QueryFile
}

// Changed 指定の項目に入力があった場合にtrueを返す
func (p *CreateArchiveParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// ReadArchiveParam is input parameters for the sacloud API
type ReadArchiveParam struct {
	Selector         []string
	Parameters       string
	ParameterFile    string
	GenerateSkeleton bool
	OutputType       string
	Column           []string
	Quiet            bool
	Format           string
	FormatFile       string
	Query            string
	QueryFile        string
	Id               types.ID

	config *config.Config
	input  Input
}

// NewReadArchiveParam return new ReadArchiveParam
func NewReadArchiveParam() *ReadArchiveParam {
	return &ReadArchiveParam{}
}

// WithID returns new *ReadArchiveParam with id
func (p *ReadArchiveParam) WithID(id types.ID) *ReadArchiveParam {
	return &ReadArchiveParam{
		Selector:         p.Selector,
		Parameters:       p.Parameters,
		ParameterFile:    p.ParameterFile,
		GenerateSkeleton: p.GenerateSkeleton,
		OutputType:       p.OutputType,
		Column:           p.Column,
		Quiet:            p.Quiet,
		Format:           p.Format,
		FormatFile:       p.FormatFile,
		Query:            p.Query,
		QueryFile:        p.QueryFile,
		Id:               id,
	}
}

// Initialize init ReadArchiveParam
func (p *ReadArchiveParam) Initialize(in Input, args []string, config *config.Config) error {
	p.input = in
	p.config = config
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ReadArchiveParam) FillValueToSkeleton() {
	if util.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if util.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if util.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if util.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if util.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if util.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if util.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if util.IsEmpty(p.Format) {
		p.Format = ""
	}
	if util.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if util.IsEmpty(p.Query) {
		p.Query = ""
	}
	if util.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if util.IsEmpty(p.Id) {
		p.Id = types.ID(0)
	}

}

func (p *ReadArchiveParam) validate() error {
	var errors []error

	{
		validator := cli.ValidateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := cli.ValidateOutputOption(p, p.config.DefaultOutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return util.FlattenErrors(errors)
}

func (p *ReadArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *ReadArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReadArchiveParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadArchiveParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadArchiveParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadArchiveParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadArchiveParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadArchiveParam) GetColumn() []string {
	return p.Column
}
func (p *ReadArchiveParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadArchiveParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadArchiveParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadArchiveParam) GetFormat() string {
	return p.Format
}
func (p *ReadArchiveParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadArchiveParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadArchiveParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadArchiveParam) GetQuery() string {
	return p.Query
}
func (p *ReadArchiveParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadArchiveParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadArchiveParam) SetId(v types.ID) {
	p.Id = v
}

func (p *ReadArchiveParam) GetId() types.ID {
	return p.Id
}

// Changed 指定の項目に入力があった場合にtrueを返す
func (p *ReadArchiveParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// UpdateArchiveParam is input parameters for the sacloud API
type UpdateArchiveParam struct {
	Selector         []string
	Name             string
	Description      string
	Tags             []string
	IconId           types.ID
	Assumeyes        bool
	Parameters       string
	ParameterFile    string
	GenerateSkeleton bool
	OutputType       string
	Column           []string
	Quiet            bool
	Format           string
	FormatFile       string
	Query            string
	QueryFile        string
	Id               types.ID

	config *config.Config
	input  Input
}

// NewUpdateArchiveParam return new UpdateArchiveParam
func NewUpdateArchiveParam() *UpdateArchiveParam {
	return &UpdateArchiveParam{}
}

// WithID returns new *UpdateArchiveParam with id
func (p *UpdateArchiveParam) WithID(id types.ID) *UpdateArchiveParam {
	return &UpdateArchiveParam{
		Selector:         p.Selector,
		Name:             p.Name,
		Description:      p.Description,
		Tags:             p.Tags,
		IconId:           p.IconId,
		Assumeyes:        p.Assumeyes,
		Parameters:       p.Parameters,
		ParameterFile:    p.ParameterFile,
		GenerateSkeleton: p.GenerateSkeleton,
		OutputType:       p.OutputType,
		Column:           p.Column,
		Quiet:            p.Quiet,
		Format:           p.Format,
		FormatFile:       p.FormatFile,
		Query:            p.Query,
		QueryFile:        p.QueryFile,
		Id:               id,
	}
}

// Initialize init UpdateArchiveParam
func (p *UpdateArchiveParam) Initialize(in Input, args []string, config *config.Config) error {
	p.input = in
	p.config = config
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *UpdateArchiveParam) FillValueToSkeleton() {
	if util.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if util.IsEmpty(p.Name) {
		p.Name = ""
	}
	if util.IsEmpty(p.Description) {
		p.Description = ""
	}
	if util.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if util.IsEmpty(p.IconId) {
		p.IconId = types.ID(0)
	}
	if util.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if util.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if util.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if util.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if util.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if util.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if util.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if util.IsEmpty(p.Format) {
		p.Format = ""
	}
	if util.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if util.IsEmpty(p.Query) {
		p.Query = ""
	}
	if util.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if util.IsEmpty(p.Id) {
		p.Id = types.ID(0)
	}

}

func (p *UpdateArchiveParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Archive"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := cli.ValidateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := cli.ValidateOutputOption(p, p.config.DefaultOutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return util.FlattenErrors(errors)
}

func (p *UpdateArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *UpdateArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateArchiveParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateArchiveParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateArchiveParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateArchiveParam) GetName() string {
	return p.Name
}
func (p *UpdateArchiveParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateArchiveParam) GetDescription() string {
	return p.Description
}
func (p *UpdateArchiveParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateArchiveParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateArchiveParam) SetIconId(v types.ID) {
	p.IconId = v
}

func (p *UpdateArchiveParam) GetIconId() types.ID {
	return p.IconId
}
func (p *UpdateArchiveParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateArchiveParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateArchiveParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateArchiveParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateArchiveParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateArchiveParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateArchiveParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateArchiveParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateArchiveParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateArchiveParam) GetFormat() string {
	return p.Format
}
func (p *UpdateArchiveParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateArchiveParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateArchiveParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateArchiveParam) GetQuery() string {
	return p.Query
}
func (p *UpdateArchiveParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateArchiveParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateArchiveParam) SetId(v types.ID) {
	p.Id = v
}

func (p *UpdateArchiveParam) GetId() types.ID {
	return p.Id
}

// Changed 指定の項目に入力があった場合にtrueを返す
func (p *UpdateArchiveParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// DeleteArchiveParam is input parameters for the sacloud API
type DeleteArchiveParam struct {
	Selector         []string
	Assumeyes        bool
	Parameters       string
	ParameterFile    string
	GenerateSkeleton bool
	OutputType       string
	Column           []string
	Quiet            bool
	Format           string
	FormatFile       string
	Query            string
	QueryFile        string
	Id               types.ID

	config *config.Config
	input  Input
}

// NewDeleteArchiveParam return new DeleteArchiveParam
func NewDeleteArchiveParam() *DeleteArchiveParam {
	return &DeleteArchiveParam{}
}

// WithID returns new *DeleteArchiveParam with id
func (p *DeleteArchiveParam) WithID(id types.ID) *DeleteArchiveParam {
	return &DeleteArchiveParam{
		Selector:         p.Selector,
		Assumeyes:        p.Assumeyes,
		Parameters:       p.Parameters,
		ParameterFile:    p.ParameterFile,
		GenerateSkeleton: p.GenerateSkeleton,
		OutputType:       p.OutputType,
		Column:           p.Column,
		Quiet:            p.Quiet,
		Format:           p.Format,
		FormatFile:       p.FormatFile,
		Query:            p.Query,
		QueryFile:        p.QueryFile,
		Id:               id,
	}
}

// Initialize init DeleteArchiveParam
func (p *DeleteArchiveParam) Initialize(in Input, args []string, config *config.Config) error {
	p.input = in
	p.config = config
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *DeleteArchiveParam) FillValueToSkeleton() {
	if util.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if util.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if util.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if util.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if util.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if util.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if util.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if util.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if util.IsEmpty(p.Format) {
		p.Format = ""
	}
	if util.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if util.IsEmpty(p.Query) {
		p.Query = ""
	}
	if util.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if util.IsEmpty(p.Id) {
		p.Id = types.ID(0)
	}

}

func (p *DeleteArchiveParam) validate() error {
	var errors []error

	{
		validator := cli.ValidateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := cli.ValidateOutputOption(p, p.config.DefaultOutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return util.FlattenErrors(errors)
}

func (p *DeleteArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *DeleteArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteArchiveParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteArchiveParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteArchiveParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteArchiveParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteArchiveParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteArchiveParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteArchiveParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteArchiveParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteArchiveParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteArchiveParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteArchiveParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteArchiveParam) GetFormat() string {
	return p.Format
}
func (p *DeleteArchiveParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteArchiveParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteArchiveParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteArchiveParam) GetQuery() string {
	return p.Query
}
func (p *DeleteArchiveParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteArchiveParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteArchiveParam) SetId(v types.ID) {
	p.Id = v
}

func (p *DeleteArchiveParam) GetId() types.ID {
	return p.Id
}

// Changed 指定の項目に入力があった場合にtrueを返す
func (p *DeleteArchiveParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// UploadArchiveParam is input parameters for the sacloud API
type UploadArchiveParam struct {
	ArchiveFile      string
	Selector         []string
	Assumeyes        bool
	Parameters       string
	ParameterFile    string
	GenerateSkeleton bool
	OutputType       string
	Column           []string
	Quiet            bool
	Format           string
	FormatFile       string
	Query            string
	QueryFile        string
	Id               types.ID

	config *config.Config
	input  Input
}

// NewUploadArchiveParam return new UploadArchiveParam
func NewUploadArchiveParam() *UploadArchiveParam {
	return &UploadArchiveParam{}
}

// WithID returns new *UploadArchiveParam with id
func (p *UploadArchiveParam) WithID(id types.ID) *UploadArchiveParam {
	return &UploadArchiveParam{
		ArchiveFile:      p.ArchiveFile,
		Selector:         p.Selector,
		Assumeyes:        p.Assumeyes,
		Parameters:       p.Parameters,
		ParameterFile:    p.ParameterFile,
		GenerateSkeleton: p.GenerateSkeleton,
		OutputType:       p.OutputType,
		Column:           p.Column,
		Quiet:            p.Quiet,
		Format:           p.Format,
		FormatFile:       p.FormatFile,
		Query:            p.Query,
		QueryFile:        p.QueryFile,
		Id:               id,
	}
}

// Initialize init UploadArchiveParam
func (p *UploadArchiveParam) Initialize(in Input, args []string, config *config.Config) error {
	p.input = in
	p.config = config
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UploadArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *UploadArchiveParam) FillValueToSkeleton() {
	if util.IsEmpty(p.ArchiveFile) {
		p.ArchiveFile = ""
	}
	if util.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if util.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if util.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if util.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if util.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if util.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if util.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if util.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if util.IsEmpty(p.Format) {
		p.Format = ""
	}
	if util.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if util.IsEmpty(p.Query) {
		p.Query = ""
	}
	if util.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if util.IsEmpty(p.Id) {
		p.Id = types.ID(0)
	}

}

func (p *UploadArchiveParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Archive"].Commands["upload"].Params["archive-file"].ValidateFunc
		errs := validator("--archive-file", p.ArchiveFile)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := cli.ValidateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := cli.ValidateOutputOption(p, p.config.DefaultOutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return util.FlattenErrors(errors)
}

func (p *UploadArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *UploadArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["upload"]
}

func (p *UploadArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UploadArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UploadArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UploadArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UploadArchiveParam) SetArchiveFile(v string) {
	p.ArchiveFile = v
}

func (p *UploadArchiveParam) GetArchiveFile() string {
	return p.ArchiveFile
}
func (p *UploadArchiveParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UploadArchiveParam) GetSelector() []string {
	return p.Selector
}
func (p *UploadArchiveParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UploadArchiveParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UploadArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UploadArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *UploadArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UploadArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UploadArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UploadArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UploadArchiveParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UploadArchiveParam) GetOutputType() string {
	return p.OutputType
}
func (p *UploadArchiveParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UploadArchiveParam) GetColumn() []string {
	return p.Column
}
func (p *UploadArchiveParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UploadArchiveParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UploadArchiveParam) SetFormat(v string) {
	p.Format = v
}

func (p *UploadArchiveParam) GetFormat() string {
	return p.Format
}
func (p *UploadArchiveParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UploadArchiveParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UploadArchiveParam) SetQuery(v string) {
	p.Query = v
}

func (p *UploadArchiveParam) GetQuery() string {
	return p.Query
}
func (p *UploadArchiveParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UploadArchiveParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UploadArchiveParam) SetId(v types.ID) {
	p.Id = v
}

func (p *UploadArchiveParam) GetId() types.ID {
	return p.Id
}

// Changed 指定の項目に入力があった場合にtrueを返す
func (p *UploadArchiveParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// DownloadArchiveParam is input parameters for the sacloud API
type DownloadArchiveParam struct {
	FileDestination  string
	Selector         []string
	Assumeyes        bool
	Parameters       string
	ParameterFile    string
	GenerateSkeleton bool
	Id               types.ID

	config *config.Config
	input  Input
}

// NewDownloadArchiveParam return new DownloadArchiveParam
func NewDownloadArchiveParam() *DownloadArchiveParam {
	return &DownloadArchiveParam{}
}

// WithID returns new *DownloadArchiveParam with id
func (p *DownloadArchiveParam) WithID(id types.ID) *DownloadArchiveParam {
	return &DownloadArchiveParam{
		FileDestination:  p.FileDestination,
		Selector:         p.Selector,
		Assumeyes:        p.Assumeyes,
		Parameters:       p.Parameters,
		ParameterFile:    p.ParameterFile,
		GenerateSkeleton: p.GenerateSkeleton,
		Id:               id,
	}
}

// Initialize init DownloadArchiveParam
func (p *DownloadArchiveParam) Initialize(in Input, args []string, config *config.Config) error {
	p.input = in
	p.config = config
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DownloadArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *DownloadArchiveParam) FillValueToSkeleton() {
	if util.IsEmpty(p.FileDestination) {
		p.FileDestination = ""
	}
	if util.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if util.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if util.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if util.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if util.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if util.IsEmpty(p.Id) {
		p.Id = types.ID(0)
	}

}

func (p *DownloadArchiveParam) validate() error {
	var errors []error

	{
		validator := cli.ValidateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return util.FlattenErrors(errors)
}

func (p *DownloadArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *DownloadArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["download"]
}

func (p *DownloadArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DownloadArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DownloadArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DownloadArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DownloadArchiveParam) SetFileDestination(v string) {
	p.FileDestination = v
}

func (p *DownloadArchiveParam) GetFileDestination() string {
	return p.FileDestination
}
func (p *DownloadArchiveParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DownloadArchiveParam) GetSelector() []string {
	return p.Selector
}
func (p *DownloadArchiveParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DownloadArchiveParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DownloadArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DownloadArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *DownloadArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DownloadArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DownloadArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DownloadArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DownloadArchiveParam) SetId(v types.ID) {
	p.Id = v
}

func (p *DownloadArchiveParam) GetId() types.ID {
	return p.Id
}

// Changed 指定の項目に入力があった場合にtrueを返す
func (p *DownloadArchiveParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// FTPOpenArchiveParam is input parameters for the sacloud API
type FTPOpenArchiveParam struct {
	Selector         []string
	Assumeyes        bool
	Parameters       string
	ParameterFile    string
	GenerateSkeleton bool
	OutputType       string
	Column           []string
	Quiet            bool
	Format           string
	FormatFile       string
	Query            string
	QueryFile        string
	Id               types.ID

	config *config.Config
	input  Input
}

// NewFTPOpenArchiveParam return new FTPOpenArchiveParam
func NewFTPOpenArchiveParam() *FTPOpenArchiveParam {
	return &FTPOpenArchiveParam{}
}

// WithID returns new *FTPOpenArchiveParam with id
func (p *FTPOpenArchiveParam) WithID(id types.ID) *FTPOpenArchiveParam {
	return &FTPOpenArchiveParam{
		Selector:         p.Selector,
		Assumeyes:        p.Assumeyes,
		Parameters:       p.Parameters,
		ParameterFile:    p.ParameterFile,
		GenerateSkeleton: p.GenerateSkeleton,
		OutputType:       p.OutputType,
		Column:           p.Column,
		Quiet:            p.Quiet,
		Format:           p.Format,
		FormatFile:       p.FormatFile,
		Query:            p.Query,
		QueryFile:        p.QueryFile,
		Id:               id,
	}
}

// Initialize init FTPOpenArchiveParam
func (p *FTPOpenArchiveParam) Initialize(in Input, args []string, config *config.Config) error {
	p.input = in
	p.config = config
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *FTPOpenArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *FTPOpenArchiveParam) FillValueToSkeleton() {
	if util.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if util.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if util.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if util.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if util.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if util.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if util.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if util.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if util.IsEmpty(p.Format) {
		p.Format = ""
	}
	if util.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if util.IsEmpty(p.Query) {
		p.Query = ""
	}
	if util.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if util.IsEmpty(p.Id) {
		p.Id = types.ID(0)
	}

}

func (p *FTPOpenArchiveParam) validate() error {
	var errors []error

	{
		validator := cli.ValidateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := cli.ValidateOutputOption(p, p.config.DefaultOutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return util.FlattenErrors(errors)
}

func (p *FTPOpenArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *FTPOpenArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ftp-open"]
}

func (p *FTPOpenArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *FTPOpenArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *FTPOpenArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *FTPOpenArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *FTPOpenArchiveParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *FTPOpenArchiveParam) GetSelector() []string {
	return p.Selector
}
func (p *FTPOpenArchiveParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *FTPOpenArchiveParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *FTPOpenArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *FTPOpenArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *FTPOpenArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *FTPOpenArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *FTPOpenArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *FTPOpenArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *FTPOpenArchiveParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *FTPOpenArchiveParam) GetOutputType() string {
	return p.OutputType
}
func (p *FTPOpenArchiveParam) SetColumn(v []string) {
	p.Column = v
}

func (p *FTPOpenArchiveParam) GetColumn() []string {
	return p.Column
}
func (p *FTPOpenArchiveParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *FTPOpenArchiveParam) GetQuiet() bool {
	return p.Quiet
}
func (p *FTPOpenArchiveParam) SetFormat(v string) {
	p.Format = v
}

func (p *FTPOpenArchiveParam) GetFormat() string {
	return p.Format
}
func (p *FTPOpenArchiveParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *FTPOpenArchiveParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *FTPOpenArchiveParam) SetQuery(v string) {
	p.Query = v
}

func (p *FTPOpenArchiveParam) GetQuery() string {
	return p.Query
}
func (p *FTPOpenArchiveParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *FTPOpenArchiveParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *FTPOpenArchiveParam) SetId(v types.ID) {
	p.Id = v
}

func (p *FTPOpenArchiveParam) GetId() types.ID {
	return p.Id
}

// Changed 指定の項目に入力があった場合にtrueを返す
func (p *FTPOpenArchiveParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// FTPCloseArchiveParam is input parameters for the sacloud API
type FTPCloseArchiveParam struct {
	Selector         []string
	Assumeyes        bool
	Parameters       string
	ParameterFile    string
	GenerateSkeleton bool
	Id               types.ID

	config *config.Config
	input  Input
}

// NewFTPCloseArchiveParam return new FTPCloseArchiveParam
func NewFTPCloseArchiveParam() *FTPCloseArchiveParam {
	return &FTPCloseArchiveParam{}
}

// WithID returns new *FTPCloseArchiveParam with id
func (p *FTPCloseArchiveParam) WithID(id types.ID) *FTPCloseArchiveParam {
	return &FTPCloseArchiveParam{
		Selector:         p.Selector,
		Assumeyes:        p.Assumeyes,
		Parameters:       p.Parameters,
		ParameterFile:    p.ParameterFile,
		GenerateSkeleton: p.GenerateSkeleton,
		Id:               id,
	}
}

// Initialize init FTPCloseArchiveParam
func (p *FTPCloseArchiveParam) Initialize(in Input, args []string, config *config.Config) error {
	p.input = in
	p.config = config
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *FTPCloseArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *FTPCloseArchiveParam) FillValueToSkeleton() {
	if util.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if util.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if util.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if util.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if util.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if util.IsEmpty(p.Id) {
		p.Id = types.ID(0)
	}

}

func (p *FTPCloseArchiveParam) validate() error {
	var errors []error

	{
		validator := cli.ValidateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return util.FlattenErrors(errors)
}

func (p *FTPCloseArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *FTPCloseArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ftp-close"]
}

func (p *FTPCloseArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *FTPCloseArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *FTPCloseArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *FTPCloseArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *FTPCloseArchiveParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *FTPCloseArchiveParam) GetSelector() []string {
	return p.Selector
}
func (p *FTPCloseArchiveParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *FTPCloseArchiveParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *FTPCloseArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *FTPCloseArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *FTPCloseArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *FTPCloseArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *FTPCloseArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *FTPCloseArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *FTPCloseArchiveParam) SetId(v types.ID) {
	p.Id = v
}

func (p *FTPCloseArchiveParam) GetId() types.ID {
	return p.Id
}

// Changed 指定の項目に入力があった場合にtrueを返す
func (p *FTPCloseArchiveParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// WaitForCopyArchiveParam is input parameters for the sacloud API
type WaitForCopyArchiveParam struct {
	Selector         []string
	Parameters       string
	ParameterFile    string
	GenerateSkeleton bool
	Id               types.ID

	config *config.Config
	input  Input
}

// NewWaitForCopyArchiveParam return new WaitForCopyArchiveParam
func NewWaitForCopyArchiveParam() *WaitForCopyArchiveParam {
	return &WaitForCopyArchiveParam{}
}

// WithID returns new *WaitForCopyArchiveParam with id
func (p *WaitForCopyArchiveParam) WithID(id types.ID) *WaitForCopyArchiveParam {
	return &WaitForCopyArchiveParam{
		Selector:         p.Selector,
		Parameters:       p.Parameters,
		ParameterFile:    p.ParameterFile,
		GenerateSkeleton: p.GenerateSkeleton,
		Id:               id,
	}
}

// Initialize init WaitForCopyArchiveParam
func (p *WaitForCopyArchiveParam) Initialize(in Input, args []string, config *config.Config) error {
	p.input = in
	p.config = config
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForCopyArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *WaitForCopyArchiveParam) FillValueToSkeleton() {
	if util.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if util.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if util.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if util.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if util.IsEmpty(p.Id) {
		p.Id = types.ID(0)
	}

}

func (p *WaitForCopyArchiveParam) validate() error {
	var errors []error

	{
		validator := cli.ValidateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return util.FlattenErrors(errors)
}

func (p *WaitForCopyArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *WaitForCopyArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-copy"]
}

func (p *WaitForCopyArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForCopyArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForCopyArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForCopyArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *WaitForCopyArchiveParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *WaitForCopyArchiveParam) GetSelector() []string {
	return p.Selector
}
func (p *WaitForCopyArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *WaitForCopyArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *WaitForCopyArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *WaitForCopyArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *WaitForCopyArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *WaitForCopyArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *WaitForCopyArchiveParam) SetId(v types.ID) {
	p.Id = v
}

func (p *WaitForCopyArchiveParam) GetId() types.ID {
	return p.Id
}

// Changed 指定の項目に入力があった場合にtrueを返す
func (p *WaitForCopyArchiveParam) Changed(name string) bool {
	return p.input.Changed(name)
}
