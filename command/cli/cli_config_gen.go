// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-commands'; DO NOT EDIT

package cli

import (
	"encoding/json"
	"fmt"

	"github.com/imdario/mergo"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/funcs"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/schema"
	"gopkg.in/urfave/cli.v2"
)

func init() {
	currentParam := params.NewCurrentConfigParam()
	deleteParam := params.NewDeleteConfigParam()
	editParam := params.NewEditConfigParam()
	listParam := params.NewListConfigParam()
	migrateParam := params.NewMigrateConfigParam()
	showParam := params.NewShowConfigParam()
	useParam := params.NewUseConfigParam()

	cliCommand := &cli.Command{
		Name:    "config",
		Aliases: []string{"profile"},
		Usage:   "A manage command of APIKey settings",
		Action: func(c *cli.Context) error {
			comm := c.App.Command("edit")
			if comm != nil {
				return comm.Action(c)
			}
			return cli.ShowSubcommandHelp(c)
		},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "token",
				Usage: "API Token of SakuraCloud",
			},
			&cli.StringFlag{
				Name:  "secret",
				Usage: "API Secret of SakuraCloud",
			},
			&cli.StringFlag{
				Name:  "zone",
				Usage: "Target zone of SakuraCloud",
			},
			&cli.StringFlag{
				Name:  "default-output-type",
				Usage: "Default output format type",
			},
			&cli.StringFlag{
				Name:  "param-template",
				Usage: "Set input parameter from string(JSON)",
			},
			&cli.StringFlag{
				Name:  "param-template-file",
				Usage: "Set input parameter from file",
			},
			&cli.BoolFlag{
				Name:  "generate-skeleton",
				Usage: "Output skelton of parameter JSON",
			},
		},
		Subcommands: []*cli.Command{
			{
				Name:  "current",
				Usage: "Current Config",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
				},
				Action: func(c *cli.Context) error {

					currentParam.ParamTemplate = c.String("param-template")
					currentParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(currentParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCurrentConfigParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(currentParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("param-template") {
						currentParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						currentParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						currentParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}

					var outputTypeHolder interface{} = currentParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if currentParam.GenerateSkeleton {
						currentParam.GenerateSkeleton = false
						currentParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(currentParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := currentParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), currentParam)

					// Run command with params
					return funcs.ConfigCurrent(ctx, currentParam)

				},
			},
			{
				Name:    "delete",
				Aliases: []string{"rm"},
				Usage:   "Delete Config",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
				},
				Action: func(c *cli.Context) error {

					deleteParam.ParamTemplate = c.String("param-template")
					deleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(deleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDeleteConfigParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(deleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("assumeyes") {
						deleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						deleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						deleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						deleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}

					var outputTypeHolder interface{} = deleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if deleteParam.GenerateSkeleton {
						deleteParam.GenerateSkeleton = false
						deleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(deleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := deleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), deleteParam)

					// confirm
					if !deleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete") {
							return nil
						}
					}

					// Run command with params
					return funcs.ConfigDelete(ctx, deleteParam)

				},
			},
			{
				Name:  "edit",
				Usage: "Edit Config (default)",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "token",
						Usage: "API Token of SakuraCloud",
					},
					&cli.StringFlag{
						Name:  "secret",
						Usage: "API Secret of SakuraCloud",
					},
					&cli.StringFlag{
						Name:  "zone",
						Usage: "Target zone of SakuraCloud",
					},
					&cli.StringFlag{
						Name:  "default-output-type",
						Usage: "Default output format type",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
				},
				Action: func(c *cli.Context) error {

					editParam.ParamTemplate = c.String("param-template")
					editParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(editParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewEditConfigParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(editParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("token") {
						editParam.Token = c.String("token")
					}
					if c.IsSet("secret") {
						editParam.Secret = c.String("secret")
					}
					if c.IsSet("zone") {
						editParam.Zone = c.String("zone")
					}
					if c.IsSet("default-output-type") {
						editParam.DefaultOutputType = c.String("default-output-type")
					}
					if c.IsSet("param-template") {
						editParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						editParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						editParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}

					var outputTypeHolder interface{} = editParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if editParam.GenerateSkeleton {
						editParam.GenerateSkeleton = false
						editParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(editParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := editParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), editParam)

					// Run command with params
					return funcs.ConfigEdit(ctx, editParam)

				},
			},
			{
				Name:    "list",
				Aliases: []string{"ls"},
				Usage:   "List Config",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
				},
				Action: func(c *cli.Context) error {

					listParam.ParamTemplate = c.String("param-template")
					listParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(listParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewListConfigParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(listParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("param-template") {
						listParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						listParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						listParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}

					var outputTypeHolder interface{} = listParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if listParam.GenerateSkeleton {
						listParam.GenerateSkeleton = false
						listParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(listParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := listParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), listParam)

					// Run command with params
					return funcs.ConfigList(ctx, listParam)

				},
			},
			{
				Name:  "migrate",
				Usage: "Migrate Config",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
				},
				Action: func(c *cli.Context) error {

					migrateParam.ParamTemplate = c.String("param-template")
					migrateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(migrateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewMigrateConfigParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(migrateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("param-template") {
						migrateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						migrateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						migrateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}

					var outputTypeHolder interface{} = migrateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if migrateParam.GenerateSkeleton {
						migrateParam.GenerateSkeleton = false
						migrateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(migrateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := migrateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), migrateParam)

					// Run command with params
					return funcs.ConfigMigrate(ctx, migrateParam)

				},
			},
			{
				Name:  "show",
				Usage: "Show Config",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
				},
				Action: func(c *cli.Context) error {

					showParam.ParamTemplate = c.String("param-template")
					showParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(showParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewShowConfigParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(showParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("param-template") {
						showParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						showParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						showParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}

					var outputTypeHolder interface{} = showParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if showParam.GenerateSkeleton {
						showParam.GenerateSkeleton = false
						showParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(showParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := showParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), showParam)

					// Run command with params
					return funcs.ConfigShow(ctx, showParam)

				},
			},
			{
				Name:  "use",
				Usage: "Use Config",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
				},
				Action: func(c *cli.Context) error {

					useParam.ParamTemplate = c.String("param-template")
					useParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(useParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewUseConfigParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(useParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("param-template") {
						useParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						useParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						useParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}

					var outputTypeHolder interface{} = useParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if useParam.GenerateSkeleton {
						useParam.GenerateSkeleton = false
						useParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(useParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := useParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), useParam)

					// Run command with params
					return funcs.ConfigUse(ctx, useParam)

				},
			},
		},
	}

	// build Category-Resource mapping
	AppendResourceCategoryMap("config", &schema.Category{
		Key:         "config",
		DisplayName: "Configuration",
		Order:       3,
	})

	// build Category-Command mapping

	AppendCommandCategoryMap("config", "current", &schema.Category{
		Key:         "default",
		DisplayName: "",
		Order:       2147483647,
	})
	AppendCommandCategoryMap("config", "delete", &schema.Category{
		Key:         "default",
		DisplayName: "",
		Order:       2147483647,
	})
	AppendCommandCategoryMap("config", "edit", &schema.Category{
		Key:         "default",
		DisplayName: "",
		Order:       2147483647,
	})
	AppendCommandCategoryMap("config", "list", &schema.Category{
		Key:         "default",
		DisplayName: "",
		Order:       2147483647,
	})
	AppendCommandCategoryMap("config", "migrate", &schema.Category{
		Key:         "default",
		DisplayName: "",
		Order:       2147483647,
	})
	AppendCommandCategoryMap("config", "show", &schema.Category{
		Key:         "default",
		DisplayName: "",
		Order:       2147483647,
	})
	AppendCommandCategoryMap("config", "use", &schema.Category{
		Key:         "default",
		DisplayName: "",
		Order:       2147483647,
	})

	// build Category-Param mapping

	AppendFlagCategoryMap("config", "current", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "current", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "current", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "edit", "default-output-type", &schema.Category{
		Key:         "config",
		DisplayName: "Config options",
		Order:       1,
	})
	AppendFlagCategoryMap("config", "edit", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "edit", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "edit", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "edit", "secret", &schema.Category{
		Key:         "config",
		DisplayName: "Config options",
		Order:       1,
	})
	AppendFlagCategoryMap("config", "edit", "token", &schema.Category{
		Key:         "config",
		DisplayName: "Config options",
		Order:       1,
	})
	AppendFlagCategoryMap("config", "edit", "zone", &schema.Category{
		Key:         "config",
		DisplayName: "Config options",
		Order:       1,
	})
	AppendFlagCategoryMap("config", "list", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "list", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "list", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "migrate", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "migrate", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "migrate", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "show", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "show", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "show", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "use", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "use", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "use", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})

	// append command to GlobalContext
	Commands = append(Commands, cliCommand)
}
