// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-commands'; DO NOT EDIT

package cli

import (
	"encoding/json"
	"fmt"
	"strings"
	"sync"

	"github.com/imdario/mergo"
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/completion"
	"github.com/sacloud/usacloud/command/funcs"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/schema"
	"gopkg.in/urfave/cli.v2"
)

func init() {
	listParam := params.NewListProxyLBParam()
	createParam := params.NewCreateProxyLBParam()
	readParam := params.NewReadProxyLBParam()
	updateParam := params.NewUpdateProxyLBParam()
	deleteParam := params.NewDeleteProxyLBParam()
	planChangeParam := params.NewPlanChangeProxyLBParam()
	bindPortInfoParam := params.NewBindPortInfoProxyLBParam()
	bindPortAddParam := params.NewBindPortAddProxyLBParam()
	bindPortUpdateParam := params.NewBindPortUpdateProxyLBParam()
	bindPortDeleteParam := params.NewBindPortDeleteProxyLBParam()
	responseHeaderInfoParam := params.NewResponseHeaderInfoProxyLBParam()
	responseHeaderAddParam := params.NewResponseHeaderAddProxyLBParam()
	responseHeaderUpdateParam := params.NewResponseHeaderUpdateProxyLBParam()
	responseHeaderDeleteParam := params.NewResponseHeaderDeleteProxyLBParam()
	acmeInfoParam := params.NewAcmeInfoProxyLBParam()
	acmeSettingParam := params.NewAcmeSettingProxyLBParam()
	acmeRenewParam := params.NewAcmeRenewProxyLBParam()
	serverInfoParam := params.NewServerInfoProxyLBParam()
	serverAddParam := params.NewServerAddProxyLBParam()
	serverUpdateParam := params.NewServerUpdateProxyLBParam()
	serverDeleteParam := params.NewServerDeleteProxyLBParam()
	certificateInfoParam := params.NewCertificateInfoProxyLBParam()
	certificateAddParam := params.NewCertificateAddProxyLBParam()
	certificateUpdateParam := params.NewCertificateUpdateProxyLBParam()
	certificateDeleteParam := params.NewCertificateDeleteProxyLBParam()
	monitorParam := params.NewMonitorProxyLBParam()

	cliCommand := &cli.Command{
		Name:    "proxy-lb",
		Aliases: []string{"enhanced-load-balancer", "proxylb"},
		Usage:   "A manage commands of ProxyLB",
		Subcommands: []*cli.Command{
			{
				Name:    "list",
				Aliases: []string{"ls", "find", "selector"},
				Usage:   "List ProxyLB",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "name",
						Usage: "set filter by name(s)",
					},
					&cli.Int64SliceFlag{
						Name:  "id",
						Usage: "set filter by id(s)",
					},
					&cli.StringSliceFlag{
						Name:    "tags",
						Aliases: []string{"selector"},
						Usage:   "set filter by tags(AND)",
					},
					&cli.IntFlag{
						Name:    "from",
						Aliases: []string{"offset"},
						Usage:   "set offset",
					},
					&cli.IntFlag{
						Name:    "max",
						Aliases: []string{"limit"},
						Usage:   "set limit",
					},
					&cli.StringSliceFlag{
						Name:  "sort",
						Usage: "set field(s) for sort",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = listParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, listParam)

					// Set option values
					if c.IsSet("name") {
						listParam.Name = c.StringSlice("name")
					}
					if c.IsSet("id") {
						listParam.Id = toSakuraIDs(c.Int64Slice("id"))
					}
					if c.IsSet("tags") {
						listParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("from") {
						listParam.From = c.Int("from")
					}
					if c.IsSet("max") {
						listParam.Max = c.Int("max")
					}
					if c.IsSet("sort") {
						listParam.Sort = c.StringSlice("sort")
					}
					if c.IsSet("param-template") {
						listParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						listParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						listParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						listParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						listParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						listParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						listParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						listParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						listParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						listParam.QueryFile = c.String("query-file")
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBListCompleteArgs(ctx, listParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBListCompleteArgs(ctx, listParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBListCompleteFlags(ctx, listParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBListCompleteArgs(ctx, listParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					listParam.ParamTemplate = c.String("param-template")
					listParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(listParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewListProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(listParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("name") {
						listParam.Name = c.StringSlice("name")
					}
					if c.IsSet("id") {
						listParam.Id = toSakuraIDs(c.Int64Slice("id"))
					}
					if c.IsSet("tags") {
						listParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("from") {
						listParam.From = c.Int("from")
					}
					if c.IsSet("max") {
						listParam.Max = c.Int("max")
					}
					if c.IsSet("sort") {
						listParam.Sort = c.StringSlice("sort")
					}
					if c.IsSet("param-template") {
						listParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						listParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						listParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						listParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						listParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						listParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						listParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						listParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						listParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						listParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = listParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if listParam.GenerateSkeleton {
						listParam.GenerateSkeleton = false
						listParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(listParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := listParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), listParam)

					// Run command with params
					return funcs.ProxyLBList(ctx, listParam)

				},
			},
			{
				Name:  "create",
				Usage: "Create ProxyLB",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "plan",
						Usage: "set plan",
						Value: 1000,
					},
					&cli.StringFlag{
						Name:  "protocol",
						Usage: "[Required] set healthcheck protocol[http/tcp]",
						Value: "tcp",
					},
					&cli.StringFlag{
						Name:  "host-header",
						Usage: "set host header of http/https healthcheck request",
					},
					&cli.StringFlag{
						Name:  "path",
						Usage: "set path of http/https healthcheck request",
						Value: "/",
					},
					&cli.IntFlag{
						Name:  "delay-loop",
						Usage: "[Required] set delay-loop of healthcheck",
						Value: 10,
					},
					&cli.BoolFlag{
						Name:  "sticky-session",
						Usage: "enable sticky-session",
					},
					&cli.StringFlag{
						Name:  "sorry-server-ipaddress",
						Usage: "set sorry-server ip address",
					},
					&cli.IntFlag{
						Name:  "sorry-server-port",
						Usage: "set sorry-server ports",
					},
					&cli.IntFlag{
						Name:  "timeout",
						Usage: "set timeout",
						Value: 10,
					},
					&cli.StringFlag{
						Name:  "name",
						Usage: "[Required] set resource display name",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set resource description",
					},
					&cli.StringSliceFlag{
						Name:  "tags",
						Usage: "set resource tags",
					},
					&cli.Int64Flag{
						Name:  "icon-id",
						Usage: "set Icon ID",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = createParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, createParam)

					// Set option values
					if c.IsSet("plan") {
						createParam.Plan = c.Int("plan")
					}
					if c.IsSet("protocol") {
						createParam.Protocol = c.String("protocol")
					}
					if c.IsSet("host-header") {
						createParam.HostHeader = c.String("host-header")
					}
					if c.IsSet("path") {
						createParam.Path = c.String("path")
					}
					if c.IsSet("delay-loop") {
						createParam.DelayLoop = c.Int("delay-loop")
					}
					if c.IsSet("sticky-session") {
						createParam.StickySession = c.Bool("sticky-session")
					}
					if c.IsSet("sorry-server-ipaddress") {
						createParam.SorryServerIpaddress = c.String("sorry-server-ipaddress")
					}
					if c.IsSet("sorry-server-port") {
						createParam.SorryServerPort = c.Int("sorry-server-port")
					}
					if c.IsSet("timeout") {
						createParam.Timeout = c.Int("timeout")
					}
					if c.IsSet("name") {
						createParam.Name = c.String("name")
					}
					if c.IsSet("description") {
						createParam.Description = c.String("description")
					}
					if c.IsSet("tags") {
						createParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("icon-id") {
						createParam.IconId = sacloud.ID(c.Int64("icon-id"))
					}
					if c.IsSet("assumeyes") {
						createParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						createParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						createParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						createParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						createParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						createParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						createParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						createParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						createParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						createParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						createParam.QueryFile = c.String("query-file")
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBCreateCompleteArgs(ctx, createParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBCreateCompleteArgs(ctx, createParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBCreateCompleteFlags(ctx, createParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBCreateCompleteArgs(ctx, createParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					createParam.ParamTemplate = c.String("param-template")
					createParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(createParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCreateProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(createParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("plan") {
						createParam.Plan = c.Int("plan")
					}
					if c.IsSet("protocol") {
						createParam.Protocol = c.String("protocol")
					}
					if c.IsSet("host-header") {
						createParam.HostHeader = c.String("host-header")
					}
					if c.IsSet("path") {
						createParam.Path = c.String("path")
					}
					if c.IsSet("delay-loop") {
						createParam.DelayLoop = c.Int("delay-loop")
					}
					if c.IsSet("sticky-session") {
						createParam.StickySession = c.Bool("sticky-session")
					}
					if c.IsSet("sorry-server-ipaddress") {
						createParam.SorryServerIpaddress = c.String("sorry-server-ipaddress")
					}
					if c.IsSet("sorry-server-port") {
						createParam.SorryServerPort = c.Int("sorry-server-port")
					}
					if c.IsSet("timeout") {
						createParam.Timeout = c.Int("timeout")
					}
					if c.IsSet("name") {
						createParam.Name = c.String("name")
					}
					if c.IsSet("description") {
						createParam.Description = c.String("description")
					}
					if c.IsSet("tags") {
						createParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("icon-id") {
						createParam.IconId = sacloud.ID(c.Int64("icon-id"))
					}
					if c.IsSet("assumeyes") {
						createParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						createParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						createParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						createParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						createParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						createParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						createParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						createParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						createParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						createParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						createParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = createParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if createParam.GenerateSkeleton {
						createParam.GenerateSkeleton = false
						createParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(createParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := createParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), createParam)

					// confirm
					if !createParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("create") {
							return nil
						}
					}

					// Run command with params
					return funcs.ProxyLBCreate(ctx, createParam)

				},
			},
			{
				Name:      "read",
				Usage:     "Read ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = readParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, readParam)

					// Set option values
					if c.IsSet("selector") {
						readParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						readParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						readParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						readParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						readParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						readParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						readParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						readParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						readParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						readParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						readParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						readParam.Id = sacloud.ID(c.Int64("id"))
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBReadCompleteArgs(ctx, readParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBReadCompleteArgs(ctx, readParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBReadCompleteFlags(ctx, readParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBReadCompleteArgs(ctx, readParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					readParam.ParamTemplate = c.String("param-template")
					readParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(readParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewReadProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(readParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						readParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						readParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						readParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						readParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						readParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						readParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						readParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						readParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						readParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						readParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						readParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						readParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = readParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if readParam.GenerateSkeleton {
						readParam.GenerateSkeleton = false
						readParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(readParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := readParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), readParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(readParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, readParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", readParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(readParam.Selector) == 0 || hasTags(&v, readParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						readParam.SetId(id)
						p := *readParam // copy struct value
						readParam := &p
						go func() {
							err := funcs.ProxyLBRead(ctx, readParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "update",
				Usage:     "Update ProxyLB",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "protocol",
						Usage: "set healthcheck protocol[http/tcp]",
					},
					&cli.StringFlag{
						Name:  "host-header",
						Usage: "set host header of http/https healthcheck request",
					},
					&cli.StringFlag{
						Name:  "path",
						Usage: "set path of http/https healthcheck request",
					},
					&cli.IntFlag{
						Name:  "delay-loop",
						Usage: "set delay-loop of healthcheck",
					},
					&cli.BoolFlag{
						Name:  "sticky-session",
						Usage: "enable sticky-session",
					},
					&cli.StringFlag{
						Name:  "sorry-server-ipaddress",
						Usage: "set sorry-server ip address",
					},
					&cli.IntFlag{
						Name:  "sorry-server-port",
						Usage: "set sorry-server ports",
					},
					&cli.IntFlag{
						Name:  "timeout",
						Usage: "set timeout",
						Value: 10,
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "name",
						Usage: "set resource display name",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set resource description",
					},
					&cli.StringSliceFlag{
						Name:  "tags",
						Usage: "set resource tags",
					},
					&cli.Int64Flag{
						Name:  "icon-id",
						Usage: "set Icon ID",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = updateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, updateParam)

					// Set option values
					if c.IsSet("protocol") {
						updateParam.Protocol = c.String("protocol")
					}
					if c.IsSet("host-header") {
						updateParam.HostHeader = c.String("host-header")
					}
					if c.IsSet("path") {
						updateParam.Path = c.String("path")
					}
					if c.IsSet("delay-loop") {
						updateParam.DelayLoop = c.Int("delay-loop")
					}
					if c.IsSet("sticky-session") {
						updateParam.StickySession = c.Bool("sticky-session")
					}
					if c.IsSet("sorry-server-ipaddress") {
						updateParam.SorryServerIpaddress = c.String("sorry-server-ipaddress")
					}
					if c.IsSet("sorry-server-port") {
						updateParam.SorryServerPort = c.Int("sorry-server-port")
					}
					if c.IsSet("timeout") {
						updateParam.Timeout = c.Int("timeout")
					}
					if c.IsSet("selector") {
						updateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("name") {
						updateParam.Name = c.String("name")
					}
					if c.IsSet("description") {
						updateParam.Description = c.String("description")
					}
					if c.IsSet("tags") {
						updateParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("icon-id") {
						updateParam.IconId = sacloud.ID(c.Int64("icon-id"))
					}
					if c.IsSet("assumeyes") {
						updateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						updateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						updateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						updateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						updateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						updateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						updateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						updateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						updateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						updateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						updateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						updateParam.Id = sacloud.ID(c.Int64("id"))
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBUpdateCompleteArgs(ctx, updateParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBUpdateCompleteArgs(ctx, updateParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBUpdateCompleteFlags(ctx, updateParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBUpdateCompleteArgs(ctx, updateParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					updateParam.ParamTemplate = c.String("param-template")
					updateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(updateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewUpdateProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(updateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("protocol") {
						updateParam.Protocol = c.String("protocol")
					}
					if c.IsSet("host-header") {
						updateParam.HostHeader = c.String("host-header")
					}
					if c.IsSet("path") {
						updateParam.Path = c.String("path")
					}
					if c.IsSet("delay-loop") {
						updateParam.DelayLoop = c.Int("delay-loop")
					}
					if c.IsSet("sticky-session") {
						updateParam.StickySession = c.Bool("sticky-session")
					}
					if c.IsSet("sorry-server-ipaddress") {
						updateParam.SorryServerIpaddress = c.String("sorry-server-ipaddress")
					}
					if c.IsSet("sorry-server-port") {
						updateParam.SorryServerPort = c.Int("sorry-server-port")
					}
					if c.IsSet("timeout") {
						updateParam.Timeout = c.Int("timeout")
					}
					if c.IsSet("selector") {
						updateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("name") {
						updateParam.Name = c.String("name")
					}
					if c.IsSet("description") {
						updateParam.Description = c.String("description")
					}
					if c.IsSet("tags") {
						updateParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("icon-id") {
						updateParam.IconId = sacloud.ID(c.Int64("icon-id"))
					}
					if c.IsSet("assumeyes") {
						updateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						updateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						updateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						updateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						updateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						updateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						updateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						updateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						updateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						updateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						updateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						updateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = updateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if updateParam.GenerateSkeleton {
						updateParam.GenerateSkeleton = false
						updateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(updateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := updateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), updateParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(updateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, updateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", updateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(updateParam.Selector) == 0 || hasTags(&v, updateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !updateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						updateParam.SetId(id)
						p := *updateParam // copy struct value
						updateParam := &p
						go func() {
							err := funcs.ProxyLBUpdate(ctx, updateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "delete",
				Aliases:   []string{"rm"},
				Usage:     "Delete ProxyLB",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = deleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, deleteParam)

					// Set option values
					if c.IsSet("selector") {
						deleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						deleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						deleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						deleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						deleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						deleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						deleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						deleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						deleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						deleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						deleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						deleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						deleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBDeleteCompleteArgs(ctx, deleteParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBDeleteCompleteArgs(ctx, deleteParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBDeleteCompleteFlags(ctx, deleteParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBDeleteCompleteArgs(ctx, deleteParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					deleteParam.ParamTemplate = c.String("param-template")
					deleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(deleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDeleteProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(deleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						deleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						deleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						deleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						deleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						deleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						deleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						deleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						deleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						deleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						deleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						deleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						deleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						deleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = deleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if deleteParam.GenerateSkeleton {
						deleteParam.GenerateSkeleton = false
						deleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(deleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := deleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), deleteParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(deleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, deleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", deleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(deleteParam.Selector) == 0 || hasTags(&v, deleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !deleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						deleteParam.SetId(id)
						p := *deleteParam // copy struct value
						deleteParam := &p
						go func() {
							err := funcs.ProxyLBDelete(ctx, deleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "plan-change",
				Usage:     "Change ProxyLB plan",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "plan",
						Usage: "[Required] set plan",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = planChangeParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, planChangeParam)

					// Set option values
					if c.IsSet("plan") {
						planChangeParam.Plan = c.Int("plan")
					}
					if c.IsSet("selector") {
						planChangeParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						planChangeParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						planChangeParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						planChangeParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						planChangeParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						planChangeParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						planChangeParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						planChangeParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						planChangeParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						planChangeParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						planChangeParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						planChangeParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						planChangeParam.Id = sacloud.ID(c.Int64("id"))
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBPlanChangeCompleteArgs(ctx, planChangeParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBPlanChangeCompleteArgs(ctx, planChangeParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBPlanChangeCompleteFlags(ctx, planChangeParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBPlanChangeCompleteArgs(ctx, planChangeParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					planChangeParam.ParamTemplate = c.String("param-template")
					planChangeParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(planChangeParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewPlanChangeProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(planChangeParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("plan") {
						planChangeParam.Plan = c.Int("plan")
					}
					if c.IsSet("selector") {
						planChangeParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						planChangeParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						planChangeParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						planChangeParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						planChangeParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						planChangeParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						planChangeParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						planChangeParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						planChangeParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						planChangeParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						planChangeParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						planChangeParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						planChangeParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = planChangeParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if planChangeParam.GenerateSkeleton {
						planChangeParam.GenerateSkeleton = false
						planChangeParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(planChangeParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := planChangeParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), planChangeParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(planChangeParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, planChangeParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", planChangeParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(planChangeParam.Selector) == 0 || hasTags(&v, planChangeParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !planChangeParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("plan-change", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						planChangeParam.SetId(id)
						p := *planChangeParam // copy struct value
						planChangeParam := &p
						go func() {
							err := funcs.ProxyLBPlanChange(ctx, planChangeParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "bind-port-info",
				Aliases:   []string{"bind-port-list"},
				Usage:     "BindPortInfo ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = bindPortInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, bindPortInfoParam)

					// Set option values
					if c.IsSet("selector") {
						bindPortInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						bindPortInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						bindPortInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						bindPortInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						bindPortInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						bindPortInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						bindPortInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						bindPortInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						bindPortInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						bindPortInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						bindPortInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						bindPortInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBBindPortInfoCompleteArgs(ctx, bindPortInfoParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBBindPortInfoCompleteArgs(ctx, bindPortInfoParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBBindPortInfoCompleteFlags(ctx, bindPortInfoParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBBindPortInfoCompleteArgs(ctx, bindPortInfoParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					bindPortInfoParam.ParamTemplate = c.String("param-template")
					bindPortInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(bindPortInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewBindPortInfoProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(bindPortInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						bindPortInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						bindPortInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						bindPortInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						bindPortInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						bindPortInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						bindPortInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						bindPortInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						bindPortInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						bindPortInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						bindPortInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						bindPortInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						bindPortInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = bindPortInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if bindPortInfoParam.GenerateSkeleton {
						bindPortInfoParam.GenerateSkeleton = false
						bindPortInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(bindPortInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := bindPortInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), bindPortInfoParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(bindPortInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, bindPortInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", bindPortInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(bindPortInfoParam.Selector) == 0 || hasTags(&v, bindPortInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						bindPortInfoParam.SetId(id)
						p := *bindPortInfoParam // copy struct value
						bindPortInfoParam := &p
						go func() {
							err := funcs.ProxyLBBindPortInfo(ctx, bindPortInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "bind-port-add",
				Usage:     "BindPortAdd ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "mode",
						Usage: "[Required] set bind mode[http/https/tcp]",
					},
					&cli.IntFlag{
						Name:  "port",
						Usage: "[Required] set port number",
					},
					&cli.BoolFlag{
						Name:  "redirect-to-https",
						Usage: "enable to redirect to https",
					},
					&cli.BoolFlag{
						Name:  "support-http2",
						Usage: "enable http/2",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = bindPortAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, bindPortAddParam)

					// Set option values
					if c.IsSet("mode") {
						bindPortAddParam.Mode = c.String("mode")
					}
					if c.IsSet("port") {
						bindPortAddParam.Port = c.Int("port")
					}
					if c.IsSet("redirect-to-https") {
						bindPortAddParam.RedirectToHttps = c.Bool("redirect-to-https")
					}
					if c.IsSet("support-http2") {
						bindPortAddParam.SupportHttp2 = c.Bool("support-http2")
					}
					if c.IsSet("selector") {
						bindPortAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						bindPortAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						bindPortAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						bindPortAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						bindPortAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						bindPortAddParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						bindPortAddParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						bindPortAddParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						bindPortAddParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						bindPortAddParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						bindPortAddParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						bindPortAddParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						bindPortAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBBindPortAddCompleteArgs(ctx, bindPortAddParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBBindPortAddCompleteArgs(ctx, bindPortAddParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBBindPortAddCompleteFlags(ctx, bindPortAddParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBBindPortAddCompleteArgs(ctx, bindPortAddParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					bindPortAddParam.ParamTemplate = c.String("param-template")
					bindPortAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(bindPortAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewBindPortAddProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(bindPortAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("mode") {
						bindPortAddParam.Mode = c.String("mode")
					}
					if c.IsSet("port") {
						bindPortAddParam.Port = c.Int("port")
					}
					if c.IsSet("redirect-to-https") {
						bindPortAddParam.RedirectToHttps = c.Bool("redirect-to-https")
					}
					if c.IsSet("support-http2") {
						bindPortAddParam.SupportHttp2 = c.Bool("support-http2")
					}
					if c.IsSet("selector") {
						bindPortAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						bindPortAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						bindPortAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						bindPortAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						bindPortAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						bindPortAddParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						bindPortAddParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						bindPortAddParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						bindPortAddParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						bindPortAddParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						bindPortAddParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						bindPortAddParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						bindPortAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = bindPortAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if bindPortAddParam.GenerateSkeleton {
						bindPortAddParam.GenerateSkeleton = false
						bindPortAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(bindPortAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := bindPortAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), bindPortAddParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(bindPortAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, bindPortAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", bindPortAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(bindPortAddParam.Selector) == 0 || hasTags(&v, bindPortAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !bindPortAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("bind-port-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						bindPortAddParam.SetId(id)
						p := *bindPortAddParam // copy struct value
						bindPortAddParam := &p
						go func() {
							err := funcs.ProxyLBBindPortAdd(ctx, bindPortAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "bind-port-update",
				Usage:     "BindPortUpdate ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target server",
					},
					&cli.StringFlag{
						Name:  "mode",
						Usage: "set bind mode[http/https/tcp]",
					},
					&cli.IntFlag{
						Name:  "port",
						Usage: "set port number",
					},
					&cli.BoolFlag{
						Name:  "redirect-to-https",
						Usage: "enable to redirect to https",
					},
					&cli.BoolFlag{
						Name:  "support-http2",
						Usage: "enable http/2",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = bindPortUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, bindPortUpdateParam)

					// Set option values
					if c.IsSet("index") {
						bindPortUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("mode") {
						bindPortUpdateParam.Mode = c.String("mode")
					}
					if c.IsSet("port") {
						bindPortUpdateParam.Port = c.Int("port")
					}
					if c.IsSet("redirect-to-https") {
						bindPortUpdateParam.RedirectToHttps = c.Bool("redirect-to-https")
					}
					if c.IsSet("support-http2") {
						bindPortUpdateParam.SupportHttp2 = c.Bool("support-http2")
					}
					if c.IsSet("selector") {
						bindPortUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						bindPortUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						bindPortUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						bindPortUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						bindPortUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						bindPortUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						bindPortUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						bindPortUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						bindPortUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						bindPortUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						bindPortUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						bindPortUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						bindPortUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBBindPortUpdateCompleteArgs(ctx, bindPortUpdateParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBBindPortUpdateCompleteArgs(ctx, bindPortUpdateParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBBindPortUpdateCompleteFlags(ctx, bindPortUpdateParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBBindPortUpdateCompleteArgs(ctx, bindPortUpdateParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					bindPortUpdateParam.ParamTemplate = c.String("param-template")
					bindPortUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(bindPortUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewBindPortUpdateProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(bindPortUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						bindPortUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("mode") {
						bindPortUpdateParam.Mode = c.String("mode")
					}
					if c.IsSet("port") {
						bindPortUpdateParam.Port = c.Int("port")
					}
					if c.IsSet("redirect-to-https") {
						bindPortUpdateParam.RedirectToHttps = c.Bool("redirect-to-https")
					}
					if c.IsSet("support-http2") {
						bindPortUpdateParam.SupportHttp2 = c.Bool("support-http2")
					}
					if c.IsSet("selector") {
						bindPortUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						bindPortUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						bindPortUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						bindPortUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						bindPortUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						bindPortUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						bindPortUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						bindPortUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						bindPortUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						bindPortUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						bindPortUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						bindPortUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						bindPortUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = bindPortUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if bindPortUpdateParam.GenerateSkeleton {
						bindPortUpdateParam.GenerateSkeleton = false
						bindPortUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(bindPortUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := bindPortUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), bindPortUpdateParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(bindPortUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, bindPortUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", bindPortUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(bindPortUpdateParam.Selector) == 0 || hasTags(&v, bindPortUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !bindPortUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("bind-port-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						bindPortUpdateParam.SetId(id)
						p := *bindPortUpdateParam // copy struct value
						bindPortUpdateParam := &p
						go func() {
							err := funcs.ProxyLBBindPortUpdate(ctx, bindPortUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "bind-port-delete",
				Usage:     "BindPortDelete ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target bind-port",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = bindPortDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, bindPortDeleteParam)

					// Set option values
					if c.IsSet("index") {
						bindPortDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						bindPortDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						bindPortDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						bindPortDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						bindPortDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						bindPortDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						bindPortDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						bindPortDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						bindPortDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						bindPortDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						bindPortDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						bindPortDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						bindPortDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						bindPortDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBBindPortDeleteCompleteArgs(ctx, bindPortDeleteParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBBindPortDeleteCompleteArgs(ctx, bindPortDeleteParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBBindPortDeleteCompleteFlags(ctx, bindPortDeleteParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBBindPortDeleteCompleteArgs(ctx, bindPortDeleteParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					bindPortDeleteParam.ParamTemplate = c.String("param-template")
					bindPortDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(bindPortDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewBindPortDeleteProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(bindPortDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						bindPortDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						bindPortDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						bindPortDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						bindPortDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						bindPortDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						bindPortDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						bindPortDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						bindPortDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						bindPortDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						bindPortDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						bindPortDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						bindPortDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						bindPortDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						bindPortDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = bindPortDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if bindPortDeleteParam.GenerateSkeleton {
						bindPortDeleteParam.GenerateSkeleton = false
						bindPortDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(bindPortDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := bindPortDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), bindPortDeleteParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(bindPortDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, bindPortDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", bindPortDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(bindPortDeleteParam.Selector) == 0 || hasTags(&v, bindPortDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !bindPortDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete bind-port", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						bindPortDeleteParam.SetId(id)
						p := *bindPortDeleteParam // copy struct value
						bindPortDeleteParam := &p
						go func() {
							err := funcs.ProxyLBBindPortDelete(ctx, bindPortDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "response-header-info",
				Aliases:   []string{"response-header-list"},
				Usage:     "ResponseHeaderInfo ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "port-index",
						Usage: "[Required] index of target bind-port",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = responseHeaderInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, responseHeaderInfoParam)

					// Set option values
					if c.IsSet("port-index") {
						responseHeaderInfoParam.PortIndex = c.Int("port-index")
					}
					if c.IsSet("selector") {
						responseHeaderInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						responseHeaderInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						responseHeaderInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						responseHeaderInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						responseHeaderInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						responseHeaderInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						responseHeaderInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						responseHeaderInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						responseHeaderInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						responseHeaderInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						responseHeaderInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						responseHeaderInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBResponseHeaderInfoCompleteArgs(ctx, responseHeaderInfoParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBResponseHeaderInfoCompleteArgs(ctx, responseHeaderInfoParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBResponseHeaderInfoCompleteFlags(ctx, responseHeaderInfoParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBResponseHeaderInfoCompleteArgs(ctx, responseHeaderInfoParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					responseHeaderInfoParam.ParamTemplate = c.String("param-template")
					responseHeaderInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(responseHeaderInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewResponseHeaderInfoProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(responseHeaderInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("port-index") {
						responseHeaderInfoParam.PortIndex = c.Int("port-index")
					}
					if c.IsSet("selector") {
						responseHeaderInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						responseHeaderInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						responseHeaderInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						responseHeaderInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						responseHeaderInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						responseHeaderInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						responseHeaderInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						responseHeaderInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						responseHeaderInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						responseHeaderInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						responseHeaderInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						responseHeaderInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = responseHeaderInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if responseHeaderInfoParam.GenerateSkeleton {
						responseHeaderInfoParam.GenerateSkeleton = false
						responseHeaderInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(responseHeaderInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := responseHeaderInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), responseHeaderInfoParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(responseHeaderInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, responseHeaderInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", responseHeaderInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(responseHeaderInfoParam.Selector) == 0 || hasTags(&v, responseHeaderInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						responseHeaderInfoParam.SetId(id)
						p := *responseHeaderInfoParam // copy struct value
						responseHeaderInfoParam := &p
						go func() {
							err := funcs.ProxyLBResponseHeaderInfo(ctx, responseHeaderInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "response-header-add",
				Usage:     "ResponseHeaderAdd ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "port-index",
						Usage: "[Required] index of target bind-port",
					},
					&cli.StringFlag{
						Name:  "header",
						Usage: "[Required] set Header",
					},
					&cli.StringFlag{
						Name:  "value",
						Usage: "[Required] set Value",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = responseHeaderAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, responseHeaderAddParam)

					// Set option values
					if c.IsSet("port-index") {
						responseHeaderAddParam.PortIndex = c.Int("port-index")
					}
					if c.IsSet("header") {
						responseHeaderAddParam.Header = c.String("header")
					}
					if c.IsSet("value") {
						responseHeaderAddParam.Value = c.String("value")
					}
					if c.IsSet("selector") {
						responseHeaderAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						responseHeaderAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						responseHeaderAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						responseHeaderAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						responseHeaderAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						responseHeaderAddParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						responseHeaderAddParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						responseHeaderAddParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						responseHeaderAddParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						responseHeaderAddParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						responseHeaderAddParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						responseHeaderAddParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						responseHeaderAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBResponseHeaderAddCompleteArgs(ctx, responseHeaderAddParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBResponseHeaderAddCompleteArgs(ctx, responseHeaderAddParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBResponseHeaderAddCompleteFlags(ctx, responseHeaderAddParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBResponseHeaderAddCompleteArgs(ctx, responseHeaderAddParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					responseHeaderAddParam.ParamTemplate = c.String("param-template")
					responseHeaderAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(responseHeaderAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewResponseHeaderAddProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(responseHeaderAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("port-index") {
						responseHeaderAddParam.PortIndex = c.Int("port-index")
					}
					if c.IsSet("header") {
						responseHeaderAddParam.Header = c.String("header")
					}
					if c.IsSet("value") {
						responseHeaderAddParam.Value = c.String("value")
					}
					if c.IsSet("selector") {
						responseHeaderAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						responseHeaderAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						responseHeaderAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						responseHeaderAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						responseHeaderAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						responseHeaderAddParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						responseHeaderAddParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						responseHeaderAddParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						responseHeaderAddParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						responseHeaderAddParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						responseHeaderAddParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						responseHeaderAddParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						responseHeaderAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = responseHeaderAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if responseHeaderAddParam.GenerateSkeleton {
						responseHeaderAddParam.GenerateSkeleton = false
						responseHeaderAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(responseHeaderAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := responseHeaderAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), responseHeaderAddParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(responseHeaderAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, responseHeaderAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", responseHeaderAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(responseHeaderAddParam.Selector) == 0 || hasTags(&v, responseHeaderAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !responseHeaderAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("response-header-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						responseHeaderAddParam.SetId(id)
						p := *responseHeaderAddParam // copy struct value
						responseHeaderAddParam := &p
						go func() {
							err := funcs.ProxyLBResponseHeaderAdd(ctx, responseHeaderAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "response-header-update",
				Usage:     "ResponseHeaderUpdate ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target server",
					},
					&cli.IntFlag{
						Name:  "port-index",
						Usage: "[Required] index of target bind-port",
					},
					&cli.StringFlag{
						Name:  "header",
						Usage: "set Header",
					},
					&cli.StringFlag{
						Name:  "value",
						Usage: "set Value",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = responseHeaderUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, responseHeaderUpdateParam)

					// Set option values
					if c.IsSet("index") {
						responseHeaderUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("port-index") {
						responseHeaderUpdateParam.PortIndex = c.Int("port-index")
					}
					if c.IsSet("header") {
						responseHeaderUpdateParam.Header = c.String("header")
					}
					if c.IsSet("value") {
						responseHeaderUpdateParam.Value = c.String("value")
					}
					if c.IsSet("selector") {
						responseHeaderUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						responseHeaderUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						responseHeaderUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						responseHeaderUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						responseHeaderUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						responseHeaderUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						responseHeaderUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						responseHeaderUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						responseHeaderUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						responseHeaderUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						responseHeaderUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						responseHeaderUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						responseHeaderUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBResponseHeaderUpdateCompleteArgs(ctx, responseHeaderUpdateParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBResponseHeaderUpdateCompleteArgs(ctx, responseHeaderUpdateParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBResponseHeaderUpdateCompleteFlags(ctx, responseHeaderUpdateParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBResponseHeaderUpdateCompleteArgs(ctx, responseHeaderUpdateParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					responseHeaderUpdateParam.ParamTemplate = c.String("param-template")
					responseHeaderUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(responseHeaderUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewResponseHeaderUpdateProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(responseHeaderUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						responseHeaderUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("port-index") {
						responseHeaderUpdateParam.PortIndex = c.Int("port-index")
					}
					if c.IsSet("header") {
						responseHeaderUpdateParam.Header = c.String("header")
					}
					if c.IsSet("value") {
						responseHeaderUpdateParam.Value = c.String("value")
					}
					if c.IsSet("selector") {
						responseHeaderUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						responseHeaderUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						responseHeaderUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						responseHeaderUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						responseHeaderUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						responseHeaderUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						responseHeaderUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						responseHeaderUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						responseHeaderUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						responseHeaderUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						responseHeaderUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						responseHeaderUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						responseHeaderUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = responseHeaderUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if responseHeaderUpdateParam.GenerateSkeleton {
						responseHeaderUpdateParam.GenerateSkeleton = false
						responseHeaderUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(responseHeaderUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := responseHeaderUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), responseHeaderUpdateParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(responseHeaderUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, responseHeaderUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", responseHeaderUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(responseHeaderUpdateParam.Selector) == 0 || hasTags(&v, responseHeaderUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !responseHeaderUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("response-header-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						responseHeaderUpdateParam.SetId(id)
						p := *responseHeaderUpdateParam // copy struct value
						responseHeaderUpdateParam := &p
						go func() {
							err := funcs.ProxyLBResponseHeaderUpdate(ctx, responseHeaderUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "response-header-delete",
				Usage:     "ResponseHeaderDelete ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target bind-port",
					},
					&cli.IntFlag{
						Name:  "port-index",
						Usage: "[Required] index of target bind-port",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = responseHeaderDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, responseHeaderDeleteParam)

					// Set option values
					if c.IsSet("index") {
						responseHeaderDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("port-index") {
						responseHeaderDeleteParam.PortIndex = c.Int("port-index")
					}
					if c.IsSet("selector") {
						responseHeaderDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						responseHeaderDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						responseHeaderDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						responseHeaderDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						responseHeaderDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						responseHeaderDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						responseHeaderDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						responseHeaderDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						responseHeaderDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						responseHeaderDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						responseHeaderDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						responseHeaderDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						responseHeaderDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBResponseHeaderDeleteCompleteArgs(ctx, responseHeaderDeleteParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBResponseHeaderDeleteCompleteArgs(ctx, responseHeaderDeleteParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBResponseHeaderDeleteCompleteFlags(ctx, responseHeaderDeleteParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBResponseHeaderDeleteCompleteArgs(ctx, responseHeaderDeleteParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					responseHeaderDeleteParam.ParamTemplate = c.String("param-template")
					responseHeaderDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(responseHeaderDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewResponseHeaderDeleteProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(responseHeaderDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						responseHeaderDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("port-index") {
						responseHeaderDeleteParam.PortIndex = c.Int("port-index")
					}
					if c.IsSet("selector") {
						responseHeaderDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						responseHeaderDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						responseHeaderDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						responseHeaderDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						responseHeaderDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						responseHeaderDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						responseHeaderDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						responseHeaderDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						responseHeaderDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						responseHeaderDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						responseHeaderDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						responseHeaderDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						responseHeaderDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = responseHeaderDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if responseHeaderDeleteParam.GenerateSkeleton {
						responseHeaderDeleteParam.GenerateSkeleton = false
						responseHeaderDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(responseHeaderDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := responseHeaderDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), responseHeaderDeleteParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(responseHeaderDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, responseHeaderDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", responseHeaderDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(responseHeaderDeleteParam.Selector) == 0 || hasTags(&v, responseHeaderDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !responseHeaderDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete response-header", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						responseHeaderDeleteParam.SetId(id)
						p := *responseHeaderDeleteParam // copy struct value
						responseHeaderDeleteParam := &p
						go func() {
							err := funcs.ProxyLBResponseHeaderDelete(ctx, responseHeaderDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "acme-info",
				Usage:     "AcmeInfo ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = acmeInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, acmeInfoParam)

					// Set option values
					if c.IsSet("selector") {
						acmeInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						acmeInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						acmeInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						acmeInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						acmeInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						acmeInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						acmeInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						acmeInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						acmeInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						acmeInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						acmeInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						acmeInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBAcmeInfoCompleteArgs(ctx, acmeInfoParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBAcmeInfoCompleteArgs(ctx, acmeInfoParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBAcmeInfoCompleteFlags(ctx, acmeInfoParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBAcmeInfoCompleteArgs(ctx, acmeInfoParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					acmeInfoParam.ParamTemplate = c.String("param-template")
					acmeInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(acmeInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewAcmeInfoProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(acmeInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						acmeInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						acmeInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						acmeInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						acmeInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						acmeInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						acmeInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						acmeInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						acmeInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						acmeInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						acmeInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						acmeInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						acmeInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = acmeInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if acmeInfoParam.GenerateSkeleton {
						acmeInfoParam.GenerateSkeleton = false
						acmeInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(acmeInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := acmeInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), acmeInfoParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(acmeInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, acmeInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", acmeInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(acmeInfoParam.Selector) == 0 || hasTags(&v, acmeInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						acmeInfoParam.SetId(id)
						p := *acmeInfoParam // copy struct value
						acmeInfoParam := &p
						go func() {
							err := funcs.ProxyLBAcmeInfo(ctx, acmeInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "acme-setting",
				Usage:     "AcmeSetting ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:  "accept-tos",
						Usage: "the flag of accept Let's Encrypt's terms of services: https://letsencrypt.org/repository/",
					},
					&cli.StringFlag{
						Name:  "common-name",
						Usage: "set common name",
					},
					&cli.BoolFlag{
						Name:  "disable",
						Usage: "the flag of disable Let's Encrypt",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = acmeSettingParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, acmeSettingParam)

					// Set option values
					if c.IsSet("accept-tos") {
						acmeSettingParam.AcceptTos = c.Bool("accept-tos")
					}
					if c.IsSet("common-name") {
						acmeSettingParam.CommonName = c.String("common-name")
					}
					if c.IsSet("disable") {
						acmeSettingParam.Disable = c.Bool("disable")
					}
					if c.IsSet("selector") {
						acmeSettingParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						acmeSettingParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						acmeSettingParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						acmeSettingParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						acmeSettingParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						acmeSettingParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						acmeSettingParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						acmeSettingParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						acmeSettingParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						acmeSettingParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						acmeSettingParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						acmeSettingParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						acmeSettingParam.Id = sacloud.ID(c.Int64("id"))
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBAcmeSettingCompleteArgs(ctx, acmeSettingParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBAcmeSettingCompleteArgs(ctx, acmeSettingParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBAcmeSettingCompleteFlags(ctx, acmeSettingParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBAcmeSettingCompleteArgs(ctx, acmeSettingParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					acmeSettingParam.ParamTemplate = c.String("param-template")
					acmeSettingParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(acmeSettingParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewAcmeSettingProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(acmeSettingParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("accept-tos") {
						acmeSettingParam.AcceptTos = c.Bool("accept-tos")
					}
					if c.IsSet("common-name") {
						acmeSettingParam.CommonName = c.String("common-name")
					}
					if c.IsSet("disable") {
						acmeSettingParam.Disable = c.Bool("disable")
					}
					if c.IsSet("selector") {
						acmeSettingParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						acmeSettingParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						acmeSettingParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						acmeSettingParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						acmeSettingParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						acmeSettingParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						acmeSettingParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						acmeSettingParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						acmeSettingParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						acmeSettingParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						acmeSettingParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						acmeSettingParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						acmeSettingParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = acmeSettingParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if acmeSettingParam.GenerateSkeleton {
						acmeSettingParam.GenerateSkeleton = false
						acmeSettingParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(acmeSettingParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := acmeSettingParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), acmeSettingParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(acmeSettingParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, acmeSettingParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", acmeSettingParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(acmeSettingParam.Selector) == 0 || hasTags(&v, acmeSettingParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !acmeSettingParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("acme-setting", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						acmeSettingParam.SetId(id)
						p := *acmeSettingParam // copy struct value
						acmeSettingParam := &p
						go func() {
							err := funcs.ProxyLBAcmeSetting(ctx, acmeSettingParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "acme-renew",
				Usage:     "AcmeRenew ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = acmeRenewParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, acmeRenewParam)

					// Set option values
					if c.IsSet("selector") {
						acmeRenewParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						acmeRenewParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						acmeRenewParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						acmeRenewParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						acmeRenewParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						acmeRenewParam.Id = sacloud.ID(c.Int64("id"))
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBAcmeRenewCompleteArgs(ctx, acmeRenewParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBAcmeRenewCompleteArgs(ctx, acmeRenewParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBAcmeRenewCompleteFlags(ctx, acmeRenewParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBAcmeRenewCompleteArgs(ctx, acmeRenewParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					acmeRenewParam.ParamTemplate = c.String("param-template")
					acmeRenewParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(acmeRenewParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewAcmeRenewProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(acmeRenewParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						acmeRenewParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						acmeRenewParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						acmeRenewParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						acmeRenewParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						acmeRenewParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						acmeRenewParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = acmeRenewParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if acmeRenewParam.GenerateSkeleton {
						acmeRenewParam.GenerateSkeleton = false
						acmeRenewParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(acmeRenewParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := acmeRenewParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), acmeRenewParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(acmeRenewParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, acmeRenewParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", acmeRenewParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(acmeRenewParam.Selector) == 0 || hasTags(&v, acmeRenewParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !acmeRenewParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("acme-renew", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						acmeRenewParam.SetId(id)
						p := *acmeRenewParam // copy struct value
						acmeRenewParam := &p
						go func() {
							err := funcs.ProxyLBAcmeRenew(ctx, acmeRenewParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "server-info",
				Aliases:   []string{"server-list"},
				Usage:     "ServerInfo ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = serverInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, serverInfoParam)

					// Set option values
					if c.IsSet("selector") {
						serverInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						serverInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						serverInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						serverInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						serverInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						serverInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						serverInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						serverInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						serverInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						serverInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						serverInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						serverInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBServerInfoCompleteArgs(ctx, serverInfoParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBServerInfoCompleteArgs(ctx, serverInfoParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBServerInfoCompleteFlags(ctx, serverInfoParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBServerInfoCompleteArgs(ctx, serverInfoParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					serverInfoParam.ParamTemplate = c.String("param-template")
					serverInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(serverInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewServerInfoProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(serverInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						serverInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						serverInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						serverInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						serverInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						serverInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						serverInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						serverInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						serverInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						serverInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						serverInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						serverInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						serverInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = serverInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if serverInfoParam.GenerateSkeleton {
						serverInfoParam.GenerateSkeleton = false
						serverInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(serverInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := serverInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), serverInfoParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(serverInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, serverInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", serverInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(serverInfoParam.Selector) == 0 || hasTags(&v, serverInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						serverInfoParam.SetId(id)
						p := *serverInfoParam // copy struct value
						serverInfoParam := &p
						go func() {
							err := funcs.ProxyLBServerInfo(ctx, serverInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "server-add",
				Usage:     "ServerAdd ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "ipaddress",
						Usage: "[Required] set target ipaddress",
					},
					&cli.BoolFlag{
						Name:  "disabled",
						Usage: "set disabled",
					},
					&cli.IntFlag{
						Name:  "port",
						Usage: "[Required] set server ports",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = serverAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, serverAddParam)

					// Set option values
					if c.IsSet("ipaddress") {
						serverAddParam.Ipaddress = c.String("ipaddress")
					}
					if c.IsSet("disabled") {
						serverAddParam.Disabled = c.Bool("disabled")
					}
					if c.IsSet("port") {
						serverAddParam.Port = c.Int("port")
					}
					if c.IsSet("selector") {
						serverAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						serverAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						serverAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						serverAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						serverAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						serverAddParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						serverAddParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						serverAddParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						serverAddParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						serverAddParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						serverAddParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						serverAddParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						serverAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBServerAddCompleteArgs(ctx, serverAddParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBServerAddCompleteArgs(ctx, serverAddParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBServerAddCompleteFlags(ctx, serverAddParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBServerAddCompleteArgs(ctx, serverAddParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					serverAddParam.ParamTemplate = c.String("param-template")
					serverAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(serverAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewServerAddProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(serverAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("ipaddress") {
						serverAddParam.Ipaddress = c.String("ipaddress")
					}
					if c.IsSet("disabled") {
						serverAddParam.Disabled = c.Bool("disabled")
					}
					if c.IsSet("port") {
						serverAddParam.Port = c.Int("port")
					}
					if c.IsSet("selector") {
						serverAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						serverAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						serverAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						serverAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						serverAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						serverAddParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						serverAddParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						serverAddParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						serverAddParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						serverAddParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						serverAddParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						serverAddParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						serverAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = serverAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if serverAddParam.GenerateSkeleton {
						serverAddParam.GenerateSkeleton = false
						serverAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(serverAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := serverAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), serverAddParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(serverAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, serverAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", serverAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(serverAddParam.Selector) == 0 || hasTags(&v, serverAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !serverAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("server-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						serverAddParam.SetId(id)
						p := *serverAddParam // copy struct value
						serverAddParam := &p
						go func() {
							err := funcs.ProxyLBServerAdd(ctx, serverAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "server-update",
				Usage:     "ServerUpdate ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target server",
					},
					&cli.StringFlag{
						Name:  "ipaddress",
						Usage: "set target ipaddress",
					},
					&cli.BoolFlag{
						Name:  "disabled",
						Usage: "set disabled",
					},
					&cli.IntFlag{
						Name:  "port",
						Usage: "set server ports",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = serverUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, serverUpdateParam)

					// Set option values
					if c.IsSet("index") {
						serverUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("ipaddress") {
						serverUpdateParam.Ipaddress = c.String("ipaddress")
					}
					if c.IsSet("disabled") {
						serverUpdateParam.Disabled = c.Bool("disabled")
					}
					if c.IsSet("port") {
						serverUpdateParam.Port = c.Int("port")
					}
					if c.IsSet("selector") {
						serverUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						serverUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						serverUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						serverUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						serverUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						serverUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						serverUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						serverUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						serverUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						serverUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						serverUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						serverUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						serverUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBServerUpdateCompleteArgs(ctx, serverUpdateParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBServerUpdateCompleteArgs(ctx, serverUpdateParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBServerUpdateCompleteFlags(ctx, serverUpdateParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBServerUpdateCompleteArgs(ctx, serverUpdateParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					serverUpdateParam.ParamTemplate = c.String("param-template")
					serverUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(serverUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewServerUpdateProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(serverUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						serverUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("ipaddress") {
						serverUpdateParam.Ipaddress = c.String("ipaddress")
					}
					if c.IsSet("disabled") {
						serverUpdateParam.Disabled = c.Bool("disabled")
					}
					if c.IsSet("port") {
						serverUpdateParam.Port = c.Int("port")
					}
					if c.IsSet("selector") {
						serverUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						serverUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						serverUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						serverUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						serverUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						serverUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						serverUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						serverUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						serverUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						serverUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						serverUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						serverUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						serverUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = serverUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if serverUpdateParam.GenerateSkeleton {
						serverUpdateParam.GenerateSkeleton = false
						serverUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(serverUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := serverUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), serverUpdateParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(serverUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, serverUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", serverUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(serverUpdateParam.Selector) == 0 || hasTags(&v, serverUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !serverUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("server-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						serverUpdateParam.SetId(id)
						p := *serverUpdateParam // copy struct value
						serverUpdateParam := &p
						go func() {
							err := funcs.ProxyLBServerUpdate(ctx, serverUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "server-delete",
				Usage:     "ServerDelete ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target server",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = serverDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, serverDeleteParam)

					// Set option values
					if c.IsSet("index") {
						serverDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						serverDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						serverDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						serverDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						serverDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						serverDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						serverDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						serverDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						serverDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						serverDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						serverDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						serverDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						serverDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						serverDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBServerDeleteCompleteArgs(ctx, serverDeleteParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBServerDeleteCompleteArgs(ctx, serverDeleteParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBServerDeleteCompleteFlags(ctx, serverDeleteParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBServerDeleteCompleteArgs(ctx, serverDeleteParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					serverDeleteParam.ParamTemplate = c.String("param-template")
					serverDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(serverDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewServerDeleteProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(serverDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						serverDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						serverDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						serverDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						serverDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						serverDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						serverDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						serverDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						serverDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						serverDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						serverDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						serverDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						serverDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						serverDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						serverDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = serverDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if serverDeleteParam.GenerateSkeleton {
						serverDeleteParam.GenerateSkeleton = false
						serverDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(serverDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := serverDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), serverDeleteParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(serverDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, serverDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", serverDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(serverDeleteParam.Selector) == 0 || hasTags(&v, serverDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !serverDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete server", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						serverDeleteParam.SetId(id)
						p := *serverDeleteParam // copy struct value
						serverDeleteParam := &p
						go func() {
							err := funcs.ProxyLBServerDelete(ctx, serverDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "certificate-info",
				Aliases:   []string{"certificate-list", "cert-list", "cert-info"},
				Usage:     "CertificateInfo ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = certificateInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, certificateInfoParam)

					// Set option values
					if c.IsSet("selector") {
						certificateInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						certificateInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						certificateInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						certificateInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						certificateInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						certificateInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						certificateInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						certificateInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						certificateInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						certificateInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						certificateInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						certificateInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBCertificateInfoCompleteArgs(ctx, certificateInfoParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBCertificateInfoCompleteArgs(ctx, certificateInfoParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBCertificateInfoCompleteFlags(ctx, certificateInfoParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBCertificateInfoCompleteArgs(ctx, certificateInfoParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					certificateInfoParam.ParamTemplate = c.String("param-template")
					certificateInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(certificateInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCertificateInfoProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(certificateInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						certificateInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						certificateInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						certificateInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						certificateInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						certificateInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						certificateInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						certificateInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						certificateInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						certificateInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						certificateInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						certificateInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						certificateInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = certificateInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if certificateInfoParam.GenerateSkeleton {
						certificateInfoParam.GenerateSkeleton = false
						certificateInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(certificateInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := certificateInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), certificateInfoParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(certificateInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, certificateInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", certificateInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(certificateInfoParam.Selector) == 0 || hasTags(&v, certificateInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						certificateInfoParam.SetId(id)
						p := *certificateInfoParam // copy struct value
						certificateInfoParam := &p
						go func() {
							err := funcs.ProxyLBCertificateInfo(ctx, certificateInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "certificate-add",
				Aliases:   []string{"cert-add"},
				Usage:     "CertificateAdd ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "server-certificate",
						Aliases: []string{"server-cert"},
						Usage:   "[Required] ",
					},
					&cli.StringFlag{
						Name:    "intermediate-certificate",
						Aliases: []string{"issuer-cert"},
					},
					&cli.StringFlag{
						Name:  "private-key",
						Usage: "[Required] ",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = certificateAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, certificateAddParam)

					// Set option values
					if c.IsSet("server-certificate") {
						certificateAddParam.ServerCertificate = c.String("server-certificate")
					}
					if c.IsSet("intermediate-certificate") {
						certificateAddParam.IntermediateCertificate = c.String("intermediate-certificate")
					}
					if c.IsSet("private-key") {
						certificateAddParam.PrivateKey = c.String("private-key")
					}
					if c.IsSet("selector") {
						certificateAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						certificateAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						certificateAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						certificateAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						certificateAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						certificateAddParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						certificateAddParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						certificateAddParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						certificateAddParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						certificateAddParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						certificateAddParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						certificateAddParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						certificateAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBCertificateAddCompleteArgs(ctx, certificateAddParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBCertificateAddCompleteArgs(ctx, certificateAddParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBCertificateAddCompleteFlags(ctx, certificateAddParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBCertificateAddCompleteArgs(ctx, certificateAddParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					certificateAddParam.ParamTemplate = c.String("param-template")
					certificateAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(certificateAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCertificateAddProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(certificateAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("server-certificate") {
						certificateAddParam.ServerCertificate = c.String("server-certificate")
					}
					if c.IsSet("intermediate-certificate") {
						certificateAddParam.IntermediateCertificate = c.String("intermediate-certificate")
					}
					if c.IsSet("private-key") {
						certificateAddParam.PrivateKey = c.String("private-key")
					}
					if c.IsSet("selector") {
						certificateAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						certificateAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						certificateAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						certificateAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						certificateAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						certificateAddParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						certificateAddParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						certificateAddParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						certificateAddParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						certificateAddParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						certificateAddParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						certificateAddParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						certificateAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = certificateAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if certificateAddParam.GenerateSkeleton {
						certificateAddParam.GenerateSkeleton = false
						certificateAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(certificateAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := certificateAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), certificateAddParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(certificateAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, certificateAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", certificateAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(certificateAddParam.Selector) == 0 || hasTags(&v, certificateAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !certificateAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("certificate-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						certificateAddParam.SetId(id)
						p := *certificateAddParam // copy struct value
						certificateAddParam := &p
						go func() {
							err := funcs.ProxyLBCertificateAdd(ctx, certificateAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "certificate-update",
				Aliases:   []string{"cert-update"},
				Usage:     "CertificateUpdate ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "server-certificate",
						Aliases: []string{"server-cert"},
					},
					&cli.StringFlag{
						Name:    "intermediate-certificate",
						Aliases: []string{"issuer-cert"},
					},
					&cli.StringFlag{
						Name: "private-key",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = certificateUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, certificateUpdateParam)

					// Set option values
					if c.IsSet("server-certificate") {
						certificateUpdateParam.ServerCertificate = c.String("server-certificate")
					}
					if c.IsSet("intermediate-certificate") {
						certificateUpdateParam.IntermediateCertificate = c.String("intermediate-certificate")
					}
					if c.IsSet("private-key") {
						certificateUpdateParam.PrivateKey = c.String("private-key")
					}
					if c.IsSet("selector") {
						certificateUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						certificateUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						certificateUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						certificateUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						certificateUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						certificateUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						certificateUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						certificateUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						certificateUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						certificateUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						certificateUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						certificateUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						certificateUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBCertificateUpdateCompleteArgs(ctx, certificateUpdateParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBCertificateUpdateCompleteArgs(ctx, certificateUpdateParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBCertificateUpdateCompleteFlags(ctx, certificateUpdateParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBCertificateUpdateCompleteArgs(ctx, certificateUpdateParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					certificateUpdateParam.ParamTemplate = c.String("param-template")
					certificateUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(certificateUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCertificateUpdateProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(certificateUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("server-certificate") {
						certificateUpdateParam.ServerCertificate = c.String("server-certificate")
					}
					if c.IsSet("intermediate-certificate") {
						certificateUpdateParam.IntermediateCertificate = c.String("intermediate-certificate")
					}
					if c.IsSet("private-key") {
						certificateUpdateParam.PrivateKey = c.String("private-key")
					}
					if c.IsSet("selector") {
						certificateUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						certificateUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						certificateUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						certificateUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						certificateUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						certificateUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						certificateUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						certificateUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						certificateUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						certificateUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						certificateUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						certificateUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						certificateUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = certificateUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if certificateUpdateParam.GenerateSkeleton {
						certificateUpdateParam.GenerateSkeleton = false
						certificateUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(certificateUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := certificateUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), certificateUpdateParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(certificateUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, certificateUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", certificateUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(certificateUpdateParam.Selector) == 0 || hasTags(&v, certificateUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !certificateUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("certificate-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						certificateUpdateParam.SetId(id)
						p := *certificateUpdateParam // copy struct value
						certificateUpdateParam := &p
						go func() {
							err := funcs.ProxyLBCertificateUpdate(ctx, certificateUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "certificate-delete",
				Aliases:   []string{"cert-delete"},
				Usage:     "CertificateDelete ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = certificateDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, certificateDeleteParam)

					// Set option values
					if c.IsSet("selector") {
						certificateDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						certificateDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						certificateDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						certificateDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						certificateDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						certificateDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						certificateDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						certificateDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						certificateDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						certificateDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						certificateDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						certificateDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						certificateDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBCertificateDeleteCompleteArgs(ctx, certificateDeleteParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBCertificateDeleteCompleteArgs(ctx, certificateDeleteParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBCertificateDeleteCompleteFlags(ctx, certificateDeleteParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBCertificateDeleteCompleteArgs(ctx, certificateDeleteParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					certificateDeleteParam.ParamTemplate = c.String("param-template")
					certificateDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(certificateDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCertificateDeleteProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(certificateDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						certificateDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						certificateDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						certificateDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						certificateDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						certificateDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						certificateDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						certificateDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						certificateDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						certificateDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						certificateDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						certificateDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						certificateDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						certificateDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = certificateDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if certificateDeleteParam.GenerateSkeleton {
						certificateDeleteParam.GenerateSkeleton = false
						certificateDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(certificateDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := certificateDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), certificateDeleteParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(certificateDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, certificateDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", certificateDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(certificateDeleteParam.Selector) == 0 || hasTags(&v, certificateDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !certificateDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete certificate", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						certificateDeleteParam.SetId(id)
						p := *certificateDeleteParam // copy struct value
						certificateDeleteParam := &p
						go func() {
							err := funcs.ProxyLBCertificateDelete(ctx, certificateDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "monitor",
				Usage:     "Monitor ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "start",
						Usage: "set start-time",
					},
					&cli.StringFlag{
						Name:  "end",
						Usage: "set end-time",
					},
					&cli.StringFlag{
						Name:  "key-format",
						Usage: "[Required] set monitoring value key-format",
						Value: "sakuracloud.proxylb.{{.ID}}",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				ShellComplete: func(c *cli.Context) {

					if c.NArg() < 3 { // invalid args
						return
					}

					if err := checkConfigVersion(); err != nil {
						return
					}
					if err := applyConfigFromFile(c); err != nil {
						return
					}

					// c.Args() == arg1 arg2 arg3 -- [cur] [prev] [commandName]
					args := c.Args().Slice()
					commandName := args[c.NArg()-1]
					prev := args[c.NArg()-2]
					cur := args[c.NArg()-3]

					// set real args
					realArgs := args[0 : c.NArg()-3]

					// Validate global params
					command.GlobalOption.Validate(false)

					// set default output-type
					// when params have output-type option and have empty value
					var outputTypeHolder interface{} = monitorParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// build command context
					ctx := command.NewContext(c, realArgs, monitorParam)

					// Set option values
					if c.IsSet("start") {
						monitorParam.Start = c.String("start")
					}
					if c.IsSet("end") {
						monitorParam.End = c.String("end")
					}
					if c.IsSet("key-format") {
						monitorParam.KeyFormat = c.String("key-format")
					}
					if c.IsSet("selector") {
						monitorParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						monitorParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						monitorParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						monitorParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						monitorParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						monitorParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						monitorParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						monitorParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						monitorParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						monitorParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						monitorParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						monitorParam.Id = sacloud.ID(c.Int64("id"))
					}

					if strings.HasPrefix(prev, "-") {
						// prev if flag , is values setted?
						if strings.Contains(prev, "=") {
							if strings.HasPrefix(cur, "-") {
								completion.FlagNames(c, commandName)
								return
							} else {
								completion.ProxyLBMonitorCompleteArgs(ctx, monitorParam, cur, prev, commandName)
								return
							}
						}

						// cleanup flag name
						name := prev
						for {
							if !strings.HasPrefix(name, "-") {
								break
							}
							name = strings.Replace(name, "-", "", 1)
						}

						// flag is exists? , is BoolFlag?
						exists := false
						for _, flag := range c.App.Command(commandName).Flags {

							for _, n := range flag.Names() {
								if n == name {
									exists = true
									break
								}
							}

							if exists {
								if _, ok := flag.(*cli.BoolFlag); ok {
									if strings.HasPrefix(cur, "-") {
										completion.FlagNames(c, commandName)
										return
									} else {
										completion.ProxyLBMonitorCompleteArgs(ctx, monitorParam, cur, prev, commandName)
										return
									}
								} else {
									// prev is flag , call completion func of each flags
									completion.ProxyLBMonitorCompleteFlags(ctx, monitorParam, name, cur)
									return
								}
							}
						}
						// here, prev is wrong, so noop.
					} else {
						if strings.HasPrefix(cur, "-") {
							completion.FlagNames(c, commandName)
							return
						} else {
							completion.ProxyLBMonitorCompleteArgs(ctx, monitorParam, cur, prev, commandName)
							return
						}
					}
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					monitorParam.ParamTemplate = c.String("param-template")
					monitorParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(monitorParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewMonitorProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(monitorParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("start") {
						monitorParam.Start = c.String("start")
					}
					if c.IsSet("end") {
						monitorParam.End = c.String("end")
					}
					if c.IsSet("key-format") {
						monitorParam.KeyFormat = c.String("key-format")
					}
					if c.IsSet("selector") {
						monitorParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						monitorParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("param-template-file") {
						monitorParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("generate-skeleton") {
						monitorParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						monitorParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						monitorParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						monitorParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						monitorParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						monitorParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						monitorParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						monitorParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						monitorParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = monitorParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if monitorParam.GenerateSkeleton {
						monitorParam.GenerateSkeleton = false
						monitorParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(monitorParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := monitorParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), monitorParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(monitorParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, monitorParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", monitorParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(monitorParam.Selector) == 0 || hasTags(&v, monitorParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						monitorParam.SetId(id)
						p := *monitorParam // copy struct value
						monitorParam := &p
						go func() {
							err := funcs.ProxyLBMonitor(ctx, monitorParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
		},
	}

	// build Category-Resource mapping
	AppendResourceCategoryMap("proxy-lb", &schema.Category{
		Key:         "commonserviceitem",
		DisplayName: "Common service items",
		Order:       50,
	})

	// build Category-Command mapping

	AppendCommandCategoryMap("proxy-lb", "acme-info", &schema.Category{
		Key:         "acme",
		DisplayName: "ACME settings",
		Order:       25,
	})
	AppendCommandCategoryMap("proxy-lb", "acme-renew", &schema.Category{
		Key:         "acme",
		DisplayName: "ACME settings",
		Order:       25,
	})
	AppendCommandCategoryMap("proxy-lb", "acme-setting", &schema.Category{
		Key:         "acme",
		DisplayName: "ACME settings",
		Order:       25,
	})
	AppendCommandCategoryMap("proxy-lb", "bind-port-add", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind Port(s) Management",
		Order:       20,
	})
	AppendCommandCategoryMap("proxy-lb", "bind-port-delete", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind Port(s) Management",
		Order:       20,
	})
	AppendCommandCategoryMap("proxy-lb", "bind-port-info", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind Port(s) Management",
		Order:       20,
	})
	AppendCommandCategoryMap("proxy-lb", "bind-port-update", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind Port(s) Management",
		Order:       20,
	})
	AppendCommandCategoryMap("proxy-lb", "certificate-add", &schema.Category{
		Key:         "certificate",
		DisplayName: "Certificate(s) Management",
		Order:       40,
	})
	AppendCommandCategoryMap("proxy-lb", "certificate-delete", &schema.Category{
		Key:         "certificate",
		DisplayName: "Certificate(s) Management",
		Order:       40,
	})
	AppendCommandCategoryMap("proxy-lb", "certificate-info", &schema.Category{
		Key:         "certificate",
		DisplayName: "Certificate(s) Management",
		Order:       40,
	})
	AppendCommandCategoryMap("proxy-lb", "certificate-update", &schema.Category{
		Key:         "certificate",
		DisplayName: "Certificate(s) Management",
		Order:       40,
	})
	AppendCommandCategoryMap("proxy-lb", "create", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("proxy-lb", "delete", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("proxy-lb", "list", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("proxy-lb", "monitor", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitoring",
		Order:       50,
	})
	AppendCommandCategoryMap("proxy-lb", "plan-change", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("proxy-lb", "read", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("proxy-lb", "response-header-add", &schema.Category{
		Key:         "response-header",
		DisplayName: "Additional Response Header(s) Management",
		Order:       22,
	})
	AppendCommandCategoryMap("proxy-lb", "response-header-delete", &schema.Category{
		Key:         "response-header",
		DisplayName: "Additional Response Header(s) Management",
		Order:       22,
	})
	AppendCommandCategoryMap("proxy-lb", "response-header-info", &schema.Category{
		Key:         "response-header",
		DisplayName: "Additional Response Header(s) Management",
		Order:       22,
	})
	AppendCommandCategoryMap("proxy-lb", "response-header-update", &schema.Category{
		Key:         "response-header",
		DisplayName: "Additional Response Header(s) Management",
		Order:       22,
	})
	AppendCommandCategoryMap("proxy-lb", "server-add", &schema.Category{
		Key:         "servers",
		DisplayName: "Real Server(s) Management",
		Order:       30,
	})
	AppendCommandCategoryMap("proxy-lb", "server-delete", &schema.Category{
		Key:         "servers",
		DisplayName: "Real Server(s) Management",
		Order:       30,
	})
	AppendCommandCategoryMap("proxy-lb", "server-info", &schema.Category{
		Key:         "servers",
		DisplayName: "Real Server(s) Management",
		Order:       30,
	})
	AppendCommandCategoryMap("proxy-lb", "server-update", &schema.Category{
		Key:         "servers",
		DisplayName: "Real Server(s) Management",
		Order:       30,
	})
	AppendCommandCategoryMap("proxy-lb", "update", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})

	// build Category-Param mapping

	AppendFlagCategoryMap("proxy-lb", "acme-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-renew", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-renew", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-renew", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-renew", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-renew", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-renew", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "accept-tos", &schema.Category{
		Key:         "acme",
		DisplayName: "Acme options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "common-name", &schema.Category{
		Key:         "acme",
		DisplayName: "Acme options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "disable", &schema.Category{
		Key:         "acme",
		DisplayName: "Acme options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "mode", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "port", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "redirect-to-https", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "support-http2", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "index", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "index", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "mode", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "port", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "redirect-to-https", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "support-http2", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "intermediate-certificate", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "private-key", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "server-certificate", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "intermediate-certificate", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "private-key", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "server-certificate", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "delay-loop", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "description", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "host-header", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "icon-id", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "name", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "path", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "plan", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "protocol", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "sorry-server-ipaddress", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "sorry-server-port", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "sticky-session", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "tags", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "timeout", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "from", &schema.Category{
		Key:         "limit-offset",
		DisplayName: "Limit/Offset options",
		Order:       2147483597,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "id", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "max", &schema.Category{
		Key:         "limit-offset",
		DisplayName: "Limit/Offset options",
		Order:       2147483597,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "name", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "sort", &schema.Category{
		Key:         "sort",
		DisplayName: "Sort options",
		Order:       2147483607,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "tags", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "end", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "key-format", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "start", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "plan", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "header", &schema.Category{
		Key:         "response-header",
		DisplayName: "Response-Header options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "port-index", &schema.Category{
		Key:         "response-header",
		DisplayName: "Response-Header options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "value", &schema.Category{
		Key:         "response-header",
		DisplayName: "Response-Header options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "index", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "port-index", &schema.Category{
		Key:         "response-header",
		DisplayName: "Response-Header options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "port-index", &schema.Category{
		Key:         "response-header",
		DisplayName: "Response-Header options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "header", &schema.Category{
		Key:         "response-header",
		DisplayName: "Response-Header options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "index", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "port-index", &schema.Category{
		Key:         "response-header",
		DisplayName: "Response-Header options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "value", &schema.Category{
		Key:         "response-header",
		DisplayName: "Response-Header options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "disabled", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "ipaddress", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "port", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "index", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "disabled", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "index", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "ipaddress", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "port", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "delay-loop", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "description", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "host-header", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "icon-id", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "name", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "path", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "protocol", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "sorry-server-ipaddress", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "sorry-server-port", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "sticky-session", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "tags", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "timeout", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})

	// append command to GlobalContext
	Commands = append(Commands, cliCommand)
}
