// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListISOImageParam is input parameters for the sacloud API
type ListISOImageParam struct {
	Name              []string `json:"name"`
	Id                []int64  `json:"id"`
	Scope             string   `json:"scope"`
	Tags              []string `json:"tags"`
	From              int      `json:"from"`
	Max               int      `json:"max"`
	Sort              []string `json:"sort"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Query             string   `json:"query"`
	QueryFile         string   `json:"query-file"`
}

// NewListISOImageParam return new ListISOImageParam
func NewListISOImageParam() *ListISOImageParam {
	return &ListISOImageParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ListISOImageParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = []string{""}
	}
	if isEmpty(p.Id) {
		p.Id = []int64{0}
	}
	if isEmpty(p.Scope) {
		p.Scope = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.From) {
		p.From = 0
	}
	if isEmpty(p.Max) {
		p.Max = 0
	}
	if isEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *ListISOImageParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["list"].Params["scope"].ValidateFunc
		errs := validator("--scope", p.Scope)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListISOImageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *ListISOImageParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListISOImageParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListISOImageParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListISOImageParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListISOImageParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListISOImageParam) SetName(v []string) {
	p.Name = v
}

func (p *ListISOImageParam) GetName() []string {
	return p.Name
}
func (p *ListISOImageParam) SetId(v []int64) {
	p.Id = v
}

func (p *ListISOImageParam) GetId() []int64 {
	return p.Id
}
func (p *ListISOImageParam) SetScope(v string) {
	p.Scope = v
}

func (p *ListISOImageParam) GetScope() string {
	return p.Scope
}
func (p *ListISOImageParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListISOImageParam) GetTags() []string {
	return p.Tags
}
func (p *ListISOImageParam) SetFrom(v int) {
	p.From = v
}

func (p *ListISOImageParam) GetFrom() int {
	return p.From
}
func (p *ListISOImageParam) SetMax(v int) {
	p.Max = v
}

func (p *ListISOImageParam) GetMax() int {
	return p.Max
}
func (p *ListISOImageParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListISOImageParam) GetSort() []string {
	return p.Sort
}
func (p *ListISOImageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListISOImageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListISOImageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListISOImageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListISOImageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListISOImageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListISOImageParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListISOImageParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListISOImageParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListISOImageParam) GetColumn() []string {
	return p.Column
}
func (p *ListISOImageParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListISOImageParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListISOImageParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListISOImageParam) GetFormat() string {
	return p.Format
}
func (p *ListISOImageParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListISOImageParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListISOImageParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListISOImageParam) GetQuery() string {
	return p.Query
}
func (p *ListISOImageParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListISOImageParam) GetQueryFile() string {
	return p.QueryFile
}

// CreateISOImageParam is input parameters for the sacloud API
type CreateISOImageParam struct {
	Size              int      `json:"size"`
	IsoFile           string   `json:"iso-file"`
	Name              string   `json:"name"`
	Description       string   `json:"description"`
	Tags              []string `json:"tags"`
	IconId            int64    `json:"icon-id"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Query             string   `json:"query"`
	QueryFile         string   `json:"query-file"`
}

// NewCreateISOImageParam return new CreateISOImageParam
func NewCreateISOImageParam() *CreateISOImageParam {
	return &CreateISOImageParam{

		Size: 5,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *CreateISOImageParam) FillValueToSkeleton() {
	if isEmpty(p.Size) {
		p.Size = 0
	}
	if isEmpty(p.IsoFile) {
		p.IsoFile = ""
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = 0
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *CreateISOImageParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["create"].Params["size"].ValidateFunc
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["create"].Params["iso-file"].ValidateFunc
		errs := validator("--iso-file", p.IsoFile)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CreateISOImageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *CreateISOImageParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["create"]
}

func (p *CreateISOImageParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CreateISOImageParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CreateISOImageParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CreateISOImageParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CreateISOImageParam) SetSize(v int) {
	p.Size = v
}

func (p *CreateISOImageParam) GetSize() int {
	return p.Size
}
func (p *CreateISOImageParam) SetIsoFile(v string) {
	p.IsoFile = v
}

func (p *CreateISOImageParam) GetIsoFile() string {
	return p.IsoFile
}
func (p *CreateISOImageParam) SetName(v string) {
	p.Name = v
}

func (p *CreateISOImageParam) GetName() string {
	return p.Name
}
func (p *CreateISOImageParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateISOImageParam) GetDescription() string {
	return p.Description
}
func (p *CreateISOImageParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateISOImageParam) GetTags() []string {
	return p.Tags
}
func (p *CreateISOImageParam) SetIconId(v int64) {
	p.IconId = v
}

func (p *CreateISOImageParam) GetIconId() int64 {
	return p.IconId
}
func (p *CreateISOImageParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateISOImageParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateISOImageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateISOImageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateISOImageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateISOImageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateISOImageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateISOImageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateISOImageParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateISOImageParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateISOImageParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateISOImageParam) GetColumn() []string {
	return p.Column
}
func (p *CreateISOImageParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateISOImageParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateISOImageParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateISOImageParam) GetFormat() string {
	return p.Format
}
func (p *CreateISOImageParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateISOImageParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateISOImageParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateISOImageParam) GetQuery() string {
	return p.Query
}
func (p *CreateISOImageParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateISOImageParam) GetQueryFile() string {
	return p.QueryFile
}

// ReadISOImageParam is input parameters for the sacloud API
type ReadISOImageParam struct {
	Selector          []string `json:"selector"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Query             string   `json:"query"`
	QueryFile         string   `json:"query-file"`
	Id                int64    `json:"id"`
}

// NewReadISOImageParam return new ReadISOImageParam
func NewReadISOImageParam() *ReadISOImageParam {
	return &ReadISOImageParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ReadISOImageParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *ReadISOImageParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadISOImageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *ReadISOImageParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadISOImageParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadISOImageParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadISOImageParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadISOImageParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadISOImageParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadISOImageParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadISOImageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadISOImageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadISOImageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadISOImageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadISOImageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadISOImageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadISOImageParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadISOImageParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadISOImageParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadISOImageParam) GetColumn() []string {
	return p.Column
}
func (p *ReadISOImageParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadISOImageParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadISOImageParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadISOImageParam) GetFormat() string {
	return p.Format
}
func (p *ReadISOImageParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadISOImageParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadISOImageParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadISOImageParam) GetQuery() string {
	return p.Query
}
func (p *ReadISOImageParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadISOImageParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadISOImageParam) SetId(v int64) {
	p.Id = v
}

func (p *ReadISOImageParam) GetId() int64 {
	return p.Id
}

// UpdateISOImageParam is input parameters for the sacloud API
type UpdateISOImageParam struct {
	Selector          []string `json:"selector"`
	Name              string   `json:"name"`
	Description       string   `json:"description"`
	Tags              []string `json:"tags"`
	IconId            int64    `json:"icon-id"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Query             string   `json:"query"`
	QueryFile         string   `json:"query-file"`
	Id                int64    `json:"id"`
}

// NewUpdateISOImageParam return new UpdateISOImageParam
func NewUpdateISOImageParam() *UpdateISOImageParam {
	return &UpdateISOImageParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UpdateISOImageParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = 0
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *UpdateISOImageParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["ISOImage"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UpdateISOImageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *UpdateISOImageParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["update"]
}

func (p *UpdateISOImageParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UpdateISOImageParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UpdateISOImageParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UpdateISOImageParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UpdateISOImageParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateISOImageParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateISOImageParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateISOImageParam) GetName() string {
	return p.Name
}
func (p *UpdateISOImageParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateISOImageParam) GetDescription() string {
	return p.Description
}
func (p *UpdateISOImageParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateISOImageParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateISOImageParam) SetIconId(v int64) {
	p.IconId = v
}

func (p *UpdateISOImageParam) GetIconId() int64 {
	return p.IconId
}
func (p *UpdateISOImageParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateISOImageParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateISOImageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateISOImageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateISOImageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateISOImageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateISOImageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateISOImageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateISOImageParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateISOImageParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateISOImageParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateISOImageParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateISOImageParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateISOImageParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateISOImageParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateISOImageParam) GetFormat() string {
	return p.Format
}
func (p *UpdateISOImageParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateISOImageParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateISOImageParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateISOImageParam) GetQuery() string {
	return p.Query
}
func (p *UpdateISOImageParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateISOImageParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateISOImageParam) SetId(v int64) {
	p.Id = v
}

func (p *UpdateISOImageParam) GetId() int64 {
	return p.Id
}

// DeleteISOImageParam is input parameters for the sacloud API
type DeleteISOImageParam struct {
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Query             string   `json:"query"`
	QueryFile         string   `json:"query-file"`
	Id                int64    `json:"id"`
}

// NewDeleteISOImageParam return new DeleteISOImageParam
func NewDeleteISOImageParam() *DeleteISOImageParam {
	return &DeleteISOImageParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DeleteISOImageParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *DeleteISOImageParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeleteISOImageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *DeleteISOImageParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeleteISOImageParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeleteISOImageParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeleteISOImageParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeleteISOImageParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeleteISOImageParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteISOImageParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteISOImageParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteISOImageParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteISOImageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteISOImageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteISOImageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteISOImageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteISOImageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteISOImageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteISOImageParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteISOImageParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteISOImageParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteISOImageParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteISOImageParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteISOImageParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteISOImageParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteISOImageParam) GetFormat() string {
	return p.Format
}
func (p *DeleteISOImageParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteISOImageParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteISOImageParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteISOImageParam) GetQuery() string {
	return p.Query
}
func (p *DeleteISOImageParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteISOImageParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteISOImageParam) SetId(v int64) {
	p.Id = v
}

func (p *DeleteISOImageParam) GetId() int64 {
	return p.Id
}

// UploadISOImageParam is input parameters for the sacloud API
type UploadISOImageParam struct {
	IsoFile           string   `json:"iso-file"`
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Query             string   `json:"query"`
	QueryFile         string   `json:"query-file"`
	Id                int64    `json:"id"`
}

// NewUploadISOImageParam return new UploadISOImageParam
func NewUploadISOImageParam() *UploadISOImageParam {
	return &UploadISOImageParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UploadISOImageParam) FillValueToSkeleton() {
	if isEmpty(p.IsoFile) {
		p.IsoFile = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *UploadISOImageParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["ISOImage"].Commands["upload"].Params["iso-file"].ValidateFunc
		errs := validator("--iso-file", p.IsoFile)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UploadISOImageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *UploadISOImageParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["upload"]
}

func (p *UploadISOImageParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UploadISOImageParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UploadISOImageParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UploadISOImageParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UploadISOImageParam) SetIsoFile(v string) {
	p.IsoFile = v
}

func (p *UploadISOImageParam) GetIsoFile() string {
	return p.IsoFile
}
func (p *UploadISOImageParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UploadISOImageParam) GetSelector() []string {
	return p.Selector
}
func (p *UploadISOImageParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UploadISOImageParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UploadISOImageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UploadISOImageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UploadISOImageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UploadISOImageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UploadISOImageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UploadISOImageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UploadISOImageParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UploadISOImageParam) GetOutputType() string {
	return p.OutputType
}
func (p *UploadISOImageParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UploadISOImageParam) GetColumn() []string {
	return p.Column
}
func (p *UploadISOImageParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UploadISOImageParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UploadISOImageParam) SetFormat(v string) {
	p.Format = v
}

func (p *UploadISOImageParam) GetFormat() string {
	return p.Format
}
func (p *UploadISOImageParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UploadISOImageParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UploadISOImageParam) SetQuery(v string) {
	p.Query = v
}

func (p *UploadISOImageParam) GetQuery() string {
	return p.Query
}
func (p *UploadISOImageParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UploadISOImageParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UploadISOImageParam) SetId(v int64) {
	p.Id = v
}

func (p *UploadISOImageParam) GetId() int64 {
	return p.Id
}

// DownloadISOImageParam is input parameters for the sacloud API
type DownloadISOImageParam struct {
	FileDestination   string   `json:"file-destination"`
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	Id                int64    `json:"id"`
}

// NewDownloadISOImageParam return new DownloadISOImageParam
func NewDownloadISOImageParam() *DownloadISOImageParam {
	return &DownloadISOImageParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DownloadISOImageParam) FillValueToSkeleton() {
	if isEmpty(p.FileDestination) {
		p.FileDestination = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *DownloadISOImageParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DownloadISOImageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *DownloadISOImageParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["download"]
}

func (p *DownloadISOImageParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DownloadISOImageParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DownloadISOImageParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DownloadISOImageParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DownloadISOImageParam) SetFileDestination(v string) {
	p.FileDestination = v
}

func (p *DownloadISOImageParam) GetFileDestination() string {
	return p.FileDestination
}
func (p *DownloadISOImageParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DownloadISOImageParam) GetSelector() []string {
	return p.Selector
}
func (p *DownloadISOImageParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DownloadISOImageParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DownloadISOImageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DownloadISOImageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DownloadISOImageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DownloadISOImageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DownloadISOImageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DownloadISOImageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DownloadISOImageParam) SetId(v int64) {
	p.Id = v
}

func (p *DownloadISOImageParam) GetId() int64 {
	return p.Id
}

// FtpOpenISOImageParam is input parameters for the sacloud API
type FtpOpenISOImageParam struct {
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Query             string   `json:"query"`
	QueryFile         string   `json:"query-file"`
	Id                int64    `json:"id"`
}

// NewFtpOpenISOImageParam return new FtpOpenISOImageParam
func NewFtpOpenISOImageParam() *FtpOpenISOImageParam {
	return &FtpOpenISOImageParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *FtpOpenISOImageParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *FtpOpenISOImageParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *FtpOpenISOImageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *FtpOpenISOImageParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["ftp-open"]
}

func (p *FtpOpenISOImageParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *FtpOpenISOImageParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *FtpOpenISOImageParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *FtpOpenISOImageParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *FtpOpenISOImageParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *FtpOpenISOImageParam) GetSelector() []string {
	return p.Selector
}
func (p *FtpOpenISOImageParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *FtpOpenISOImageParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *FtpOpenISOImageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *FtpOpenISOImageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *FtpOpenISOImageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *FtpOpenISOImageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *FtpOpenISOImageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *FtpOpenISOImageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *FtpOpenISOImageParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *FtpOpenISOImageParam) GetOutputType() string {
	return p.OutputType
}
func (p *FtpOpenISOImageParam) SetColumn(v []string) {
	p.Column = v
}

func (p *FtpOpenISOImageParam) GetColumn() []string {
	return p.Column
}
func (p *FtpOpenISOImageParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *FtpOpenISOImageParam) GetQuiet() bool {
	return p.Quiet
}
func (p *FtpOpenISOImageParam) SetFormat(v string) {
	p.Format = v
}

func (p *FtpOpenISOImageParam) GetFormat() string {
	return p.Format
}
func (p *FtpOpenISOImageParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *FtpOpenISOImageParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *FtpOpenISOImageParam) SetQuery(v string) {
	p.Query = v
}

func (p *FtpOpenISOImageParam) GetQuery() string {
	return p.Query
}
func (p *FtpOpenISOImageParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *FtpOpenISOImageParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *FtpOpenISOImageParam) SetId(v int64) {
	p.Id = v
}

func (p *FtpOpenISOImageParam) GetId() int64 {
	return p.Id
}

// FtpCloseISOImageParam is input parameters for the sacloud API
type FtpCloseISOImageParam struct {
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	Id                int64    `json:"id"`
}

// NewFtpCloseISOImageParam return new FtpCloseISOImageParam
func NewFtpCloseISOImageParam() *FtpCloseISOImageParam {
	return &FtpCloseISOImageParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *FtpCloseISOImageParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *FtpCloseISOImageParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *FtpCloseISOImageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *FtpCloseISOImageParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["ftp-close"]
}

func (p *FtpCloseISOImageParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *FtpCloseISOImageParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *FtpCloseISOImageParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *FtpCloseISOImageParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *FtpCloseISOImageParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *FtpCloseISOImageParam) GetSelector() []string {
	return p.Selector
}
func (p *FtpCloseISOImageParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *FtpCloseISOImageParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *FtpCloseISOImageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *FtpCloseISOImageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *FtpCloseISOImageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *FtpCloseISOImageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *FtpCloseISOImageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *FtpCloseISOImageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *FtpCloseISOImageParam) SetId(v int64) {
	p.Id = v
}

func (p *FtpCloseISOImageParam) GetId() int64 {
	return p.Id
}
