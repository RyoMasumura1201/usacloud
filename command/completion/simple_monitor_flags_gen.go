// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-completion'; DO NOT EDIT

package completion

import (
	"fmt"

	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/schema"
)

func SimpleMonitorListCompleteFlags(ctx command.Context, params *params.ListSimpleMonitorParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "name":
		param := define.Resources["SimpleMonitor"].Commands["list"].BuildedParams().Get("name")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["SimpleMonitor"].Commands["list"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "tags", "selector":
		param := define.Resources["SimpleMonitor"].Commands["list"].BuildedParams().Get("tags")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "from", "offset":
		param := define.Resources["SimpleMonitor"].Commands["list"].BuildedParams().Get("from")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "max", "limit":
		param := define.Resources["SimpleMonitor"].Commands["list"].BuildedParams().Get("max")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "sort":
		param := define.Resources["SimpleMonitor"].Commands["list"].BuildedParams().Get("sort")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func SimpleMonitorCreateCompleteFlags(ctx command.Context, params *params.CreateSimpleMonitorParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "target":
		param := define.Resources["SimpleMonitor"].Commands["create"].BuildedParams().Get("target")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "protocol":
		param := define.Resources["SimpleMonitor"].Commands["create"].BuildedParams().Get("protocol")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "port":
		param := define.Resources["SimpleMonitor"].Commands["create"].BuildedParams().Get("port")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "delay-loop":
		param := define.Resources["SimpleMonitor"].Commands["create"].BuildedParams().Get("delay-loop")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "disabled":
		param := define.Resources["SimpleMonitor"].Commands["create"].BuildedParams().Get("disabled")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "host-header":
		param := define.Resources["SimpleMonitor"].Commands["create"].BuildedParams().Get("host-header")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "path":
		param := define.Resources["SimpleMonitor"].Commands["create"].BuildedParams().Get("path")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "response-code":
		param := define.Resources["SimpleMonitor"].Commands["create"].BuildedParams().Get("response-code")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "sni":
		param := define.Resources["SimpleMonitor"].Commands["create"].BuildedParams().Get("sni")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "username", "user":
		param := define.Resources["SimpleMonitor"].Commands["create"].BuildedParams().Get("username")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "password", "pass":
		param := define.Resources["SimpleMonitor"].Commands["create"].BuildedParams().Get("password")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "dns-qname":
		param := define.Resources["SimpleMonitor"].Commands["create"].BuildedParams().Get("dns-qname")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "dns-excepted":
		param := define.Resources["SimpleMonitor"].Commands["create"].BuildedParams().Get("dns-excepted")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "remaining-days":
		param := define.Resources["SimpleMonitor"].Commands["create"].BuildedParams().Get("remaining-days")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "notify-email":
		param := define.Resources["SimpleMonitor"].Commands["create"].BuildedParams().Get("notify-email")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "email-type":
		param := define.Resources["SimpleMonitor"].Commands["create"].BuildedParams().Get("email-type")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "slack-webhook":
		param := define.Resources["SimpleMonitor"].Commands["create"].BuildedParams().Get("slack-webhook")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "description", "desc":
		param := define.Resources["SimpleMonitor"].Commands["create"].BuildedParams().Get("description")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "tags":
		param := define.Resources["SimpleMonitor"].Commands["create"].BuildedParams().Get("tags")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "icon-id":
		param := define.Resources["SimpleMonitor"].Commands["create"].BuildedParams().Get("icon-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func SimpleMonitorReadCompleteFlags(ctx command.Context, params *params.ReadSimpleMonitorParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["SimpleMonitor"].Commands["read"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["SimpleMonitor"].Commands["read"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func SimpleMonitorUpdateCompleteFlags(ctx command.Context, params *params.UpdateSimpleMonitorParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "protocol":
		param := define.Resources["SimpleMonitor"].Commands["update"].BuildedParams().Get("protocol")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "port":
		param := define.Resources["SimpleMonitor"].Commands["update"].BuildedParams().Get("port")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "delay-loop":
		param := define.Resources["SimpleMonitor"].Commands["update"].BuildedParams().Get("delay-loop")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "disabled":
		param := define.Resources["SimpleMonitor"].Commands["update"].BuildedParams().Get("disabled")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "host-header":
		param := define.Resources["SimpleMonitor"].Commands["update"].BuildedParams().Get("host-header")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "path":
		param := define.Resources["SimpleMonitor"].Commands["update"].BuildedParams().Get("path")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "response-code":
		param := define.Resources["SimpleMonitor"].Commands["update"].BuildedParams().Get("response-code")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "sni":
		param := define.Resources["SimpleMonitor"].Commands["update"].BuildedParams().Get("sni")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "username", "user":
		param := define.Resources["SimpleMonitor"].Commands["update"].BuildedParams().Get("username")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "password", "pass":
		param := define.Resources["SimpleMonitor"].Commands["update"].BuildedParams().Get("password")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "dns_qname":
		param := define.Resources["SimpleMonitor"].Commands["update"].BuildedParams().Get("dns_qname")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "dns_excepted":
		param := define.Resources["SimpleMonitor"].Commands["update"].BuildedParams().Get("dns_excepted")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "remaining-days":
		param := define.Resources["SimpleMonitor"].Commands["update"].BuildedParams().Get("remaining-days")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "notify-email":
		param := define.Resources["SimpleMonitor"].Commands["update"].BuildedParams().Get("notify-email")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "email-type":
		param := define.Resources["SimpleMonitor"].Commands["update"].BuildedParams().Get("email-type")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "slack-webhook":
		param := define.Resources["SimpleMonitor"].Commands["update"].BuildedParams().Get("slack-webhook")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["SimpleMonitor"].Commands["update"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "description", "desc":
		param := define.Resources["SimpleMonitor"].Commands["update"].BuildedParams().Get("description")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "tags":
		param := define.Resources["SimpleMonitor"].Commands["update"].BuildedParams().Get("tags")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "icon-id":
		param := define.Resources["SimpleMonitor"].Commands["update"].BuildedParams().Get("icon-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["SimpleMonitor"].Commands["update"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func SimpleMonitorDeleteCompleteFlags(ctx command.Context, params *params.DeleteSimpleMonitorParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["SimpleMonitor"].Commands["delete"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["SimpleMonitor"].Commands["delete"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}
