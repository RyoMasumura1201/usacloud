// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-completion'; DO NOT EDIT

package completion

import (
	"fmt"

	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/schema"
)

func VPCRouterListCompleteFlags(ctx command.Context, params *params.ListVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "name":
		param := define.Resources["VPCRouter"].Commands["list"].BuildedParams().Get("name")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["list"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "tags", "selector":
		param := define.Resources["VPCRouter"].Commands["list"].BuildedParams().Get("tags")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "from", "offset":
		param := define.Resources["VPCRouter"].Commands["list"].BuildedParams().Get("from")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "max", "limit":
		param := define.Resources["VPCRouter"].Commands["list"].BuildedParams().Get("max")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "sort":
		param := define.Resources["VPCRouter"].Commands["list"].BuildedParams().Get("sort")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterCreateCompleteFlags(ctx command.Context, params *params.CreateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "plan":
		param := define.Resources["VPCRouter"].Commands["create"].BuildedParams().Get("plan")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "switch-id":
		param := define.Resources["VPCRouter"].Commands["create"].BuildedParams().Get("switch-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "vrid", "VRID":
		param := define.Resources["VPCRouter"].Commands["create"].BuildedParams().Get("vrid")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "vip":
		param := define.Resources["VPCRouter"].Commands["create"].BuildedParams().Get("vip")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ipaddress1", "ip1":
		param := define.Resources["VPCRouter"].Commands["create"].BuildedParams().Get("ipaddress1")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ipaddress2", "ip2":
		param := define.Resources["VPCRouter"].Commands["create"].BuildedParams().Get("ipaddress2")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "disable-internet-connection":
		param := define.Resources["VPCRouter"].Commands["create"].BuildedParams().Get("disable-internet-connection")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "boot-after-create":
		param := define.Resources["VPCRouter"].Commands["create"].BuildedParams().Get("boot-after-create")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "name":
		param := define.Resources["VPCRouter"].Commands["create"].BuildedParams().Get("name")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "description", "desc":
		param := define.Resources["VPCRouter"].Commands["create"].BuildedParams().Get("description")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "tags":
		param := define.Resources["VPCRouter"].Commands["create"].BuildedParams().Get("tags")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "icon-id":
		param := define.Resources["VPCRouter"].Commands["create"].BuildedParams().Get("icon-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterReadCompleteFlags(ctx command.Context, params *params.ReadVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["VPCRouter"].Commands["read"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["read"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterUpdateCompleteFlags(ctx command.Context, params *params.UpdateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "syslog-host":
		param := define.Resources["VPCRouter"].Commands["update"].BuildedParams().Get("syslog-host")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "internet-connection":
		param := define.Resources["VPCRouter"].Commands["update"].BuildedParams().Get("internet-connection")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["update"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "name":
		param := define.Resources["VPCRouter"].Commands["update"].BuildedParams().Get("name")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "description", "desc":
		param := define.Resources["VPCRouter"].Commands["update"].BuildedParams().Get("description")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "tags":
		param := define.Resources["VPCRouter"].Commands["update"].BuildedParams().Get("tags")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "icon-id":
		param := define.Resources["VPCRouter"].Commands["update"].BuildedParams().Get("icon-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["update"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterDeleteCompleteFlags(ctx command.Context, params *params.DeleteVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "force", "f":
		param := define.Resources["VPCRouter"].Commands["delete"].BuildedParams().Get("force")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["delete"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["delete"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterBootCompleteFlags(ctx command.Context, params *params.BootVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["VPCRouter"].Commands["boot"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["boot"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterShutdownCompleteFlags(ctx command.Context, params *params.ShutdownVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["VPCRouter"].Commands["shutdown"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["shutdown"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterShutdownForceCompleteFlags(ctx command.Context, params *params.ShutdownForceVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["VPCRouter"].Commands["shutdown-force"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["shutdown-force"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterResetCompleteFlags(ctx command.Context, params *params.ResetVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["VPCRouter"].Commands["reset"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["reset"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterWaitForBootCompleteFlags(ctx command.Context, params *params.WaitForBootVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["VPCRouter"].Commands["wait-for-boot"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["wait-for-boot"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterWaitForDownCompleteFlags(ctx command.Context, params *params.WaitForDownVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["VPCRouter"].Commands["wait-for-down"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["wait-for-down"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterEnableInternetConnectionCompleteFlags(ctx command.Context, params *params.EnableInternetConnectionVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["VPCRouter"].Commands["enable-internet-connection"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["enable-internet-connection"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterDisableInternetConnectionCompleteFlags(ctx command.Context, params *params.DisableInternetConnectionVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["VPCRouter"].Commands["disable-internet-connection"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["disable-internet-connection"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterInterfaceInfoCompleteFlags(ctx command.Context, params *params.InterfaceInfoVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["VPCRouter"].Commands["interface-info"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["interface-info"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterInterfaceConnectCompleteFlags(ctx command.Context, params *params.InterfaceConnectVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "interface":
		param := define.Resources["VPCRouter"].Commands["interface-connect"].BuildedParams().Get("interface")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ipaddress", "ip", "vip":
		param := define.Resources["VPCRouter"].Commands["interface-connect"].BuildedParams().Get("ipaddress")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "with-reboot":
		param := define.Resources["VPCRouter"].Commands["interface-connect"].BuildedParams().Get("with-reboot")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ipaddress1", "ip1":
		param := define.Resources["VPCRouter"].Commands["interface-connect"].BuildedParams().Get("ipaddress1")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "switch-id":
		param := define.Resources["VPCRouter"].Commands["interface-connect"].BuildedParams().Get("switch-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ipaddress2", "ip2":
		param := define.Resources["VPCRouter"].Commands["interface-connect"].BuildedParams().Get("ipaddress2")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "nw-masklen", "network-masklen":
		param := define.Resources["VPCRouter"].Commands["interface-connect"].BuildedParams().Get("nw-masklen")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["interface-connect"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["interface-connect"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterInterfaceUpdateCompleteFlags(ctx command.Context, params *params.InterfaceUpdateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "interface":
		param := define.Resources["VPCRouter"].Commands["interface-update"].BuildedParams().Get("interface")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ipaddress", "ip", "vip":
		param := define.Resources["VPCRouter"].Commands["interface-update"].BuildedParams().Get("ipaddress")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "with-reboot":
		param := define.Resources["VPCRouter"].Commands["interface-update"].BuildedParams().Get("with-reboot")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ipaddress1", "ip1":
		param := define.Resources["VPCRouter"].Commands["interface-update"].BuildedParams().Get("ipaddress1")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "switch-id":
		param := define.Resources["VPCRouter"].Commands["interface-update"].BuildedParams().Get("switch-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ipaddress2", "ip2":
		param := define.Resources["VPCRouter"].Commands["interface-update"].BuildedParams().Get("ipaddress2")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "alias":
		param := define.Resources["VPCRouter"].Commands["interface-update"].BuildedParams().Get("alias")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "nw-masklen", "network-masklen":
		param := define.Resources["VPCRouter"].Commands["interface-update"].BuildedParams().Get("nw-masklen")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["interface-update"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["interface-update"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterInterfaceDisconnectCompleteFlags(ctx command.Context, params *params.InterfaceDisconnectVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "interface":
		param := define.Resources["VPCRouter"].Commands["interface-disconnect"].BuildedParams().Get("interface")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "with-reboot":
		param := define.Resources["VPCRouter"].Commands["interface-disconnect"].BuildedParams().Get("with-reboot")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["interface-disconnect"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["interface-disconnect"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterStaticNatInfoCompleteFlags(ctx command.Context, params *params.StaticNatInfoVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["VPCRouter"].Commands["static-nat-info"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["static-nat-info"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterStaticNatAddCompleteFlags(ctx command.Context, params *params.StaticNatAddVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "global", "global-ip", "global-address":
		param := define.Resources["VPCRouter"].Commands["static-nat-add"].BuildedParams().Get("global")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "private", "private-ip", "private-address":
		param := define.Resources["VPCRouter"].Commands["static-nat-add"].BuildedParams().Get("private")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "description", "desc":
		param := define.Resources["VPCRouter"].Commands["static-nat-add"].BuildedParams().Get("description")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["static-nat-add"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["static-nat-add"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterStaticNatUpdateCompleteFlags(ctx command.Context, params *params.StaticNatUpdateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		param := define.Resources["VPCRouter"].Commands["static-nat-update"].BuildedParams().Get("index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "global", "global-ip", "global-address":
		param := define.Resources["VPCRouter"].Commands["static-nat-update"].BuildedParams().Get("global")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "private", "private-ip", "private-address":
		param := define.Resources["VPCRouter"].Commands["static-nat-update"].BuildedParams().Get("private")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "description", "desc":
		param := define.Resources["VPCRouter"].Commands["static-nat-update"].BuildedParams().Get("description")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["static-nat-update"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["static-nat-update"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterStaticNatDeleteCompleteFlags(ctx command.Context, params *params.StaticNatDeleteVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		param := define.Resources["VPCRouter"].Commands["static-nat-delete"].BuildedParams().Get("index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["static-nat-delete"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["static-nat-delete"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterPortForwardingInfoCompleteFlags(ctx command.Context, params *params.PortForwardingInfoVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["VPCRouter"].Commands["port-forwarding-info"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["port-forwarding-info"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterPortForwardingAddCompleteFlags(ctx command.Context, params *params.PortForwardingAddVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "protocol":
		param := define.Resources["VPCRouter"].Commands["port-forwarding-add"].BuildedParams().Get("protocol")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "global-port":
		param := define.Resources["VPCRouter"].Commands["port-forwarding-add"].BuildedParams().Get("global-port")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "private-ipaddress", "private-ip", "private-address":
		param := define.Resources["VPCRouter"].Commands["port-forwarding-add"].BuildedParams().Get("private-ipaddress")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "private-port":
		param := define.Resources["VPCRouter"].Commands["port-forwarding-add"].BuildedParams().Get("private-port")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "description", "desc":
		param := define.Resources["VPCRouter"].Commands["port-forwarding-add"].BuildedParams().Get("description")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["port-forwarding-add"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["port-forwarding-add"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterPortForwardingUpdateCompleteFlags(ctx command.Context, params *params.PortForwardingUpdateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		param := define.Resources["VPCRouter"].Commands["port-forwarding-update"].BuildedParams().Get("index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "protocol":
		param := define.Resources["VPCRouter"].Commands["port-forwarding-update"].BuildedParams().Get("protocol")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "global-port":
		param := define.Resources["VPCRouter"].Commands["port-forwarding-update"].BuildedParams().Get("global-port")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "private-ipaddress", "private-ip", "private-address":
		param := define.Resources["VPCRouter"].Commands["port-forwarding-update"].BuildedParams().Get("private-ipaddress")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "private-port":
		param := define.Resources["VPCRouter"].Commands["port-forwarding-update"].BuildedParams().Get("private-port")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "description", "desc":
		param := define.Resources["VPCRouter"].Commands["port-forwarding-update"].BuildedParams().Get("description")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["port-forwarding-update"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["port-forwarding-update"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterPortForwardingDeleteCompleteFlags(ctx command.Context, params *params.PortForwardingDeleteVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		param := define.Resources["VPCRouter"].Commands["port-forwarding-delete"].BuildedParams().Get("index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["port-forwarding-delete"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["port-forwarding-delete"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterFirewallInfoCompleteFlags(ctx command.Context, params *params.FirewallInfoVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "interface":
		param := define.Resources["VPCRouter"].Commands["firewall-info"].BuildedParams().Get("interface")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "direction":
		param := define.Resources["VPCRouter"].Commands["firewall-info"].BuildedParams().Get("direction")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["firewall-info"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["firewall-info"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterFirewallAddCompleteFlags(ctx command.Context, params *params.FirewallAddVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "interface":
		param := define.Resources["VPCRouter"].Commands["firewall-add"].BuildedParams().Get("interface")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "direction":
		param := define.Resources["VPCRouter"].Commands["firewall-add"].BuildedParams().Get("direction")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "protocol":
		param := define.Resources["VPCRouter"].Commands["firewall-add"].BuildedParams().Get("protocol")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "source-network":
		param := define.Resources["VPCRouter"].Commands["firewall-add"].BuildedParams().Get("source-network")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "source-port":
		param := define.Resources["VPCRouter"].Commands["firewall-add"].BuildedParams().Get("source-port")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "destination-network", "dest-network":
		param := define.Resources["VPCRouter"].Commands["firewall-add"].BuildedParams().Get("destination-network")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "destination-port", "dest-port":
		param := define.Resources["VPCRouter"].Commands["firewall-add"].BuildedParams().Get("destination-port")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "action":
		param := define.Resources["VPCRouter"].Commands["firewall-add"].BuildedParams().Get("action")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "enable-logging":
		param := define.Resources["VPCRouter"].Commands["firewall-add"].BuildedParams().Get("enable-logging")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "description", "desc":
		param := define.Resources["VPCRouter"].Commands["firewall-add"].BuildedParams().Get("description")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["firewall-add"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["firewall-add"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterFirewallUpdateCompleteFlags(ctx command.Context, params *params.FirewallUpdateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "interface":
		param := define.Resources["VPCRouter"].Commands["firewall-update"].BuildedParams().Get("interface")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "direction":
		param := define.Resources["VPCRouter"].Commands["firewall-update"].BuildedParams().Get("direction")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "index":
		param := define.Resources["VPCRouter"].Commands["firewall-update"].BuildedParams().Get("index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "protocol":
		param := define.Resources["VPCRouter"].Commands["firewall-update"].BuildedParams().Get("protocol")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "source-network":
		param := define.Resources["VPCRouter"].Commands["firewall-update"].BuildedParams().Get("source-network")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "source-port":
		param := define.Resources["VPCRouter"].Commands["firewall-update"].BuildedParams().Get("source-port")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "destination-network", "dest-network":
		param := define.Resources["VPCRouter"].Commands["firewall-update"].BuildedParams().Get("destination-network")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "destination-port", "dest-port":
		param := define.Resources["VPCRouter"].Commands["firewall-update"].BuildedParams().Get("destination-port")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "action":
		param := define.Resources["VPCRouter"].Commands["firewall-update"].BuildedParams().Get("action")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "enable-logging":
		param := define.Resources["VPCRouter"].Commands["firewall-update"].BuildedParams().Get("enable-logging")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "description", "desc":
		param := define.Resources["VPCRouter"].Commands["firewall-update"].BuildedParams().Get("description")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["firewall-update"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["firewall-update"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterFirewallDeleteCompleteFlags(ctx command.Context, params *params.FirewallDeleteVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "interface":
		param := define.Resources["VPCRouter"].Commands["firewall-delete"].BuildedParams().Get("interface")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "direction":
		param := define.Resources["VPCRouter"].Commands["firewall-delete"].BuildedParams().Get("direction")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "index":
		param := define.Resources["VPCRouter"].Commands["firewall-delete"].BuildedParams().Get("index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["firewall-delete"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["firewall-delete"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterDhcpServerInfoCompleteFlags(ctx command.Context, params *params.DhcpServerInfoVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["VPCRouter"].Commands["dhcp-server-info"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["dhcp-server-info"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterDhcpServerAddCompleteFlags(ctx command.Context, params *params.DhcpServerAddVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "interface":
		param := define.Resources["VPCRouter"].Commands["dhcp-server-add"].BuildedParams().Get("interface")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "range-start":
		param := define.Resources["VPCRouter"].Commands["dhcp-server-add"].BuildedParams().Get("range-start")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "range-stop", "range-end":
		param := define.Resources["VPCRouter"].Commands["dhcp-server-add"].BuildedParams().Get("range-stop")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "dns-servers":
		param := define.Resources["VPCRouter"].Commands["dhcp-server-add"].BuildedParams().Get("dns-servers")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["dhcp-server-add"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["dhcp-server-add"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterDhcpServerUpdateCompleteFlags(ctx command.Context, params *params.DhcpServerUpdateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "interface":
		param := define.Resources["VPCRouter"].Commands["dhcp-server-update"].BuildedParams().Get("interface")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "range-start":
		param := define.Resources["VPCRouter"].Commands["dhcp-server-update"].BuildedParams().Get("range-start")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "range-stop", "range-end":
		param := define.Resources["VPCRouter"].Commands["dhcp-server-update"].BuildedParams().Get("range-stop")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "dns-servers":
		param := define.Resources["VPCRouter"].Commands["dhcp-server-update"].BuildedParams().Get("dns-servers")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["dhcp-server-update"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["dhcp-server-update"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterDhcpServerDeleteCompleteFlags(ctx command.Context, params *params.DhcpServerDeleteVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "interface":
		param := define.Resources["VPCRouter"].Commands["dhcp-server-delete"].BuildedParams().Get("interface")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["dhcp-server-delete"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["dhcp-server-delete"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterDhcpStaticMappingInfoCompleteFlags(ctx command.Context, params *params.DhcpStaticMappingInfoVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-info"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-info"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterDhcpStaticMappingAddCompleteFlags(ctx command.Context, params *params.DhcpStaticMappingAddVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "macaddress", "mac":
		param := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-add"].BuildedParams().Get("macaddress")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ipaddress", "ip":
		param := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-add"].BuildedParams().Get("ipaddress")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-add"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-add"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterDhcpStaticMappingUpdateCompleteFlags(ctx command.Context, params *params.DhcpStaticMappingUpdateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		param := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-update"].BuildedParams().Get("index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "macaddress", "mac":
		param := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-update"].BuildedParams().Get("macaddress")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ipaddress", "ip":
		param := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-update"].BuildedParams().Get("ipaddress")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-update"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-update"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterDhcpStaticMappingDeleteCompleteFlags(ctx command.Context, params *params.DhcpStaticMappingDeleteVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		param := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-delete"].BuildedParams().Get("index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-delete"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-delete"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterPptpServerInfoCompleteFlags(ctx command.Context, params *params.PptpServerInfoVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["VPCRouter"].Commands["pptp-server-info"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["pptp-server-info"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterPptpServerUpdateCompleteFlags(ctx command.Context, params *params.PptpServerUpdateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "disabled":
		param := define.Resources["VPCRouter"].Commands["pptp-server-update"].BuildedParams().Get("disabled")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "range-start":
		param := define.Resources["VPCRouter"].Commands["pptp-server-update"].BuildedParams().Get("range-start")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "range-stop", "range-end":
		param := define.Resources["VPCRouter"].Commands["pptp-server-update"].BuildedParams().Get("range-stop")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["pptp-server-update"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["pptp-server-update"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterL2tpServerInfoCompleteFlags(ctx command.Context, params *params.L2tpServerInfoVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["VPCRouter"].Commands["l2tp-server-info"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["l2tp-server-info"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterL2tpServerUpdateCompleteFlags(ctx command.Context, params *params.L2tpServerUpdateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "disabled":
		param := define.Resources["VPCRouter"].Commands["l2tp-server-update"].BuildedParams().Get("disabled")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "range-start":
		param := define.Resources["VPCRouter"].Commands["l2tp-server-update"].BuildedParams().Get("range-start")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "range-stop", "range-end":
		param := define.Resources["VPCRouter"].Commands["l2tp-server-update"].BuildedParams().Get("range-stop")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "pre-shared-secret":
		param := define.Resources["VPCRouter"].Commands["l2tp-server-update"].BuildedParams().Get("pre-shared-secret")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["l2tp-server-update"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["l2tp-server-update"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterUserInfoCompleteFlags(ctx command.Context, params *params.UserInfoVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["VPCRouter"].Commands["user-info"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["user-info"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterUserAddCompleteFlags(ctx command.Context, params *params.UserAddVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "username", "user":
		param := define.Resources["VPCRouter"].Commands["user-add"].BuildedParams().Get("username")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "password", "pass":
		param := define.Resources["VPCRouter"].Commands["user-add"].BuildedParams().Get("password")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["user-add"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["user-add"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterUserUpdateCompleteFlags(ctx command.Context, params *params.UserUpdateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		param := define.Resources["VPCRouter"].Commands["user-update"].BuildedParams().Get("index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "username", "user":
		param := define.Resources["VPCRouter"].Commands["user-update"].BuildedParams().Get("username")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "password", "pass":
		param := define.Resources["VPCRouter"].Commands["user-update"].BuildedParams().Get("password")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["user-update"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["user-update"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterUserDeleteCompleteFlags(ctx command.Context, params *params.UserDeleteVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		param := define.Resources["VPCRouter"].Commands["user-delete"].BuildedParams().Get("index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["user-delete"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["user-delete"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterSiteToSiteVpnInfoCompleteFlags(ctx command.Context, params *params.SiteToSiteVpnInfoVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["VPCRouter"].Commands["site-to-site-vpn-info"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["site-to-site-vpn-info"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterSiteToSiteVpnAddCompleteFlags(ctx command.Context, params *params.SiteToSiteVpnAddVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "peer":
		param := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].BuildedParams().Get("peer")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "remote-id":
		param := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].BuildedParams().Get("remote-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "pre-shared-secret":
		param := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].BuildedParams().Get("pre-shared-secret")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "routes":
		param := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].BuildedParams().Get("routes")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "local-prefix":
		param := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].BuildedParams().Get("local-prefix")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterSiteToSiteVpnUpdateCompleteFlags(ctx command.Context, params *params.SiteToSiteVpnUpdateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		param := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].BuildedParams().Get("index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "peer":
		param := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].BuildedParams().Get("peer")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "remote-id":
		param := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].BuildedParams().Get("remote-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "pre-shared-secret":
		param := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].BuildedParams().Get("pre-shared-secret")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "routes":
		param := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].BuildedParams().Get("routes")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "local-prefix":
		param := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].BuildedParams().Get("local-prefix")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterSiteToSiteVpnDeleteCompleteFlags(ctx command.Context, params *params.SiteToSiteVpnDeleteVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		param := define.Resources["VPCRouter"].Commands["site-to-site-vpn-delete"].BuildedParams().Get("index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["site-to-site-vpn-delete"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["site-to-site-vpn-delete"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterSiteToSiteVpnPeersCompleteFlags(ctx command.Context, params *params.SiteToSiteVpnPeersVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["VPCRouter"].Commands["site-to-site-vpn-peers"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["site-to-site-vpn-peers"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterStaticRouteInfoCompleteFlags(ctx command.Context, params *params.StaticRouteInfoVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["VPCRouter"].Commands["static-route-info"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["static-route-info"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterStaticRouteAddCompleteFlags(ctx command.Context, params *params.StaticRouteAddVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "prefix":
		param := define.Resources["VPCRouter"].Commands["static-route-add"].BuildedParams().Get("prefix")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "next-hop":
		param := define.Resources["VPCRouter"].Commands["static-route-add"].BuildedParams().Get("next-hop")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["static-route-add"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["static-route-add"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterStaticRouteUpdateCompleteFlags(ctx command.Context, params *params.StaticRouteUpdateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		param := define.Resources["VPCRouter"].Commands["static-route-update"].BuildedParams().Get("index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "prefix":
		param := define.Resources["VPCRouter"].Commands["static-route-update"].BuildedParams().Get("prefix")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "next-hop":
		param := define.Resources["VPCRouter"].Commands["static-route-update"].BuildedParams().Get("next-hop")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["static-route-update"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["static-route-update"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterStaticRouteDeleteCompleteFlags(ctx command.Context, params *params.StaticRouteDeleteVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		param := define.Resources["VPCRouter"].Commands["static-route-delete"].BuildedParams().Get("index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["static-route-delete"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["static-route-delete"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterMonitorCompleteFlags(ctx command.Context, params *params.MonitorVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "interface":
		param := define.Resources["VPCRouter"].Commands["monitor"].BuildedParams().Get("interface")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "start":
		param := define.Resources["VPCRouter"].Commands["monitor"].BuildedParams().Get("start")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "end":
		param := define.Resources["VPCRouter"].Commands["monitor"].BuildedParams().Get("end")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "key-format":
		param := define.Resources["VPCRouter"].Commands["monitor"].BuildedParams().Get("key-format")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["monitor"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["monitor"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterLogsCompleteFlags(ctx command.Context, params *params.LogsVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "log-name", "name":
		param := define.Resources["VPCRouter"].Commands["logs"].BuildedParams().Get("log-name")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "follow", "f":
		param := define.Resources["VPCRouter"].Commands["logs"].BuildedParams().Get("follow")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "refresh-interval":
		param := define.Resources["VPCRouter"].Commands["logs"].BuildedParams().Get("refresh-interval")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "list-log-names":
		param := define.Resources["VPCRouter"].Commands["logs"].BuildedParams().Get("list-log-names")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["VPCRouter"].Commands["logs"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["VPCRouter"].Commands["logs"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}
