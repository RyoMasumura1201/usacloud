// Copyright 2017-2019 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-completion'; DO NOT EDIT

package completion

import (
	"fmt"

	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/schema"
)

func WebAccelListCompleteFlags(ctx command.Context, params *params.ListWebAccelParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "yaml", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func WebAccelReadCompleteFlags(ctx command.Context, params *params.ReadWebAccelParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["WebAccel"].Commands["read"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["WebAccel"].Commands["read"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "yaml", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func WebAccelCertificateInfoCompleteFlags(ctx command.Context, params *params.CertificateInfoWebAccelParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["WebAccel"].Commands["certificate-info"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["WebAccel"].Commands["certificate-info"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "yaml", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func WebAccelCertificateNewCompleteFlags(ctx command.Context, params *params.CertificateNewWebAccelParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "cert":
		param := define.Resources["WebAccel"].Commands["certificate-new"].BuildedParams().Get("cert")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "key":
		param := define.Resources["WebAccel"].Commands["certificate-new"].BuildedParams().Get("key")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "cert-content":
		param := define.Resources["WebAccel"].Commands["certificate-new"].BuildedParams().Get("cert-content")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "key-content":
		param := define.Resources["WebAccel"].Commands["certificate-new"].BuildedParams().Get("key-content")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["WebAccel"].Commands["certificate-new"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["WebAccel"].Commands["certificate-new"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "yaml", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func WebAccelCertificateUpdateCompleteFlags(ctx command.Context, params *params.CertificateUpdateWebAccelParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "cert":
		param := define.Resources["WebAccel"].Commands["certificate-update"].BuildedParams().Get("cert")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "key":
		param := define.Resources["WebAccel"].Commands["certificate-update"].BuildedParams().Get("key")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "cert-content":
		param := define.Resources["WebAccel"].Commands["certificate-update"].BuildedParams().Get("cert-content")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "key-content":
		param := define.Resources["WebAccel"].Commands["certificate-update"].BuildedParams().Get("key-content")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["WebAccel"].Commands["certificate-update"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["WebAccel"].Commands["certificate-update"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "yaml", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func WebAccelDeleteCacheCompleteFlags(ctx command.Context, params *params.DeleteCacheWebAccelParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "yaml", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}
