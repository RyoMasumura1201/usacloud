// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-completion'; DO NOT EDIT

package completion

import (
	"fmt"

	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/params"
)

func SSHKeyListCompleteArgs(ctx command.Context, params *params.ListSSHKeyParam, cur, prev, commandName string) {

}

func SSHKeyCreateCompleteArgs(ctx command.Context, params *params.CreateSSHKeyParam, cur, prev, commandName string) {

}

func SSHKeyReadCompleteArgs(ctx command.Context, params *params.ReadSSHKeyParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetSSHKeyAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.SSHKeys {
		fmt.Println(res.SSHKeys[i].ID)
		var target interface{} = &res.SSHKeys[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func SSHKeyUpdateCompleteArgs(ctx command.Context, params *params.UpdateSSHKeyParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetSSHKeyAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.SSHKeys {
		fmt.Println(res.SSHKeys[i].ID)
		var target interface{} = &res.SSHKeys[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func SSHKeyDeleteCompleteArgs(ctx command.Context, params *params.DeleteSSHKeyParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetSSHKeyAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.SSHKeys {
		fmt.Println(res.SSHKeys[i].ID)
		var target interface{} = &res.SSHKeys[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func SSHKeyGenerateCompleteArgs(ctx command.Context, params *params.GenerateSSHKeyParam, cur, prev, commandName string) {

}
