// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-completion'; DO NOT EDIT

package completion

import (
	"fmt"

	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/schema"
)

func DatabaseListCompleteFlags(ctx command.Context, params *params.ListDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "name":
		param := define.Resources["Database"].Commands["list"].BuildedParams().Get("name")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Database"].Commands["list"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "tags", "selector":
		param := define.Resources["Database"].Commands["list"].BuildedParams().Get("tags")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "from", "offset":
		param := define.Resources["Database"].Commands["list"].BuildedParams().Get("from")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "max", "limit":
		param := define.Resources["Database"].Commands["list"].BuildedParams().Get("max")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "sort":
		param := define.Resources["Database"].Commands["list"].BuildedParams().Get("sort")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseCreateCompleteFlags(ctx command.Context, params *params.CreateDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "switch-id":
		param := define.Resources["Database"].Commands["create"].BuildedParams().Get("switch-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "plan":
		param := define.Resources["Database"].Commands["create"].BuildedParams().Get("plan")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "database", "db":
		param := define.Resources["Database"].Commands["create"].BuildedParams().Get("database")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "username":
		param := define.Resources["Database"].Commands["create"].BuildedParams().Get("username")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "password":
		param := define.Resources["Database"].Commands["create"].BuildedParams().Get("password")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "replica-user-password":
		param := define.Resources["Database"].Commands["create"].BuildedParams().Get("replica-user-password")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "source-networks":
		param := define.Resources["Database"].Commands["create"].BuildedParams().Get("source-networks")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "enable-web-ui":
		param := define.Resources["Database"].Commands["create"].BuildedParams().Get("enable-web-ui")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "enable-backup":
		param := define.Resources["Database"].Commands["create"].BuildedParams().Get("enable-backup")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "backup-weekdays":
		param := define.Resources["Database"].Commands["create"].BuildedParams().Get("backup-weekdays")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "backup-time":
		param := define.Resources["Database"].Commands["create"].BuildedParams().Get("backup-time")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "port":
		param := define.Resources["Database"].Commands["create"].BuildedParams().Get("port")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ipaddress1", "ip1", "ipaddress", "ip":
		param := define.Resources["Database"].Commands["create"].BuildedParams().Get("ipaddress1")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "nw-mask-len":
		param := define.Resources["Database"].Commands["create"].BuildedParams().Get("nw-mask-len")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "default-route":
		param := define.Resources["Database"].Commands["create"].BuildedParams().Get("default-route")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "name":
		param := define.Resources["Database"].Commands["create"].BuildedParams().Get("name")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "description", "desc":
		param := define.Resources["Database"].Commands["create"].BuildedParams().Get("description")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "tags":
		param := define.Resources["Database"].Commands["create"].BuildedParams().Get("tags")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "icon-id":
		param := define.Resources["Database"].Commands["create"].BuildedParams().Get("icon-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseReadCompleteFlags(ctx command.Context, params *params.ReadDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["Database"].Commands["read"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Database"].Commands["read"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseUpdateCompleteFlags(ctx command.Context, params *params.UpdateDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "password":
		param := define.Resources["Database"].Commands["update"].BuildedParams().Get("password")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "replica-user-password":
		param := define.Resources["Database"].Commands["update"].BuildedParams().Get("replica-user-password")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "enable-replication":
		param := define.Resources["Database"].Commands["update"].BuildedParams().Get("enable-replication")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "port":
		param := define.Resources["Database"].Commands["update"].BuildedParams().Get("port")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "source-networks":
		param := define.Resources["Database"].Commands["update"].BuildedParams().Get("source-networks")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "enable-web-ui":
		param := define.Resources["Database"].Commands["update"].BuildedParams().Get("enable-web-ui")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "enable-backup":
		param := define.Resources["Database"].Commands["update"].BuildedParams().Get("enable-backup")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "backup-weekdays":
		param := define.Resources["Database"].Commands["update"].BuildedParams().Get("backup-weekdays")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "backup-time":
		param := define.Resources["Database"].Commands["update"].BuildedParams().Get("backup-time")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Database"].Commands["update"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "name":
		param := define.Resources["Database"].Commands["update"].BuildedParams().Get("name")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "description", "desc":
		param := define.Resources["Database"].Commands["update"].BuildedParams().Get("description")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "tags":
		param := define.Resources["Database"].Commands["update"].BuildedParams().Get("tags")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "icon-id":
		param := define.Resources["Database"].Commands["update"].BuildedParams().Get("icon-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Database"].Commands["update"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseDeleteCompleteFlags(ctx command.Context, params *params.DeleteDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["Database"].Commands["delete"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "force", "f":
		param := define.Resources["Database"].Commands["delete"].BuildedParams().Get("force")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Database"].Commands["delete"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseBootCompleteFlags(ctx command.Context, params *params.BootDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["Database"].Commands["boot"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Database"].Commands["boot"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseShutdownCompleteFlags(ctx command.Context, params *params.ShutdownDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["Database"].Commands["shutdown"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Database"].Commands["shutdown"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseShutdownForceCompleteFlags(ctx command.Context, params *params.ShutdownForceDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["Database"].Commands["shutdown-force"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Database"].Commands["shutdown-force"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseResetCompleteFlags(ctx command.Context, params *params.ResetDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["Database"].Commands["reset"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Database"].Commands["reset"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseWaitForBootCompleteFlags(ctx command.Context, params *params.WaitForBootDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["Database"].Commands["wait-for-boot"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Database"].Commands["wait-for-boot"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseWaitForDownCompleteFlags(ctx command.Context, params *params.WaitForDownDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["Database"].Commands["wait-for-down"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Database"].Commands["wait-for-down"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseBackupInfoCompleteFlags(ctx command.Context, params *params.BackupInfoDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["Database"].Commands["backup-info"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Database"].Commands["backup-info"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseBackupCreateCompleteFlags(ctx command.Context, params *params.BackupCreateDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		param := define.Resources["Database"].Commands["backup-create"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseBackupRestoreCompleteFlags(ctx command.Context, params *params.BackupRestoreDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		param := define.Resources["Database"].Commands["backup-restore"].BuildedParams().Get("index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Database"].Commands["backup-restore"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseBackupLockCompleteFlags(ctx command.Context, params *params.BackupLockDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		param := define.Resources["Database"].Commands["backup-lock"].BuildedParams().Get("index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Database"].Commands["backup-lock"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseBackupUnlockCompleteFlags(ctx command.Context, params *params.BackupUnlockDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		param := define.Resources["Database"].Commands["backup-unlock"].BuildedParams().Get("index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Database"].Commands["backup-unlock"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseBackupRemoveCompleteFlags(ctx command.Context, params *params.BackupRemoveDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		param := define.Resources["Database"].Commands["backup-remove"].BuildedParams().Get("index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Database"].Commands["backup-remove"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseCloneCompleteFlags(ctx command.Context, params *params.CloneDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "port":
		param := define.Resources["Database"].Commands["clone"].BuildedParams().Get("port")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "switch-id":
		param := define.Resources["Database"].Commands["clone"].BuildedParams().Get("switch-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ipaddress1", "ip1", "ipaddress", "ip":
		param := define.Resources["Database"].Commands["clone"].BuildedParams().Get("ipaddress1")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "plan":
		param := define.Resources["Database"].Commands["clone"].BuildedParams().Get("plan")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "nw-mask-len":
		param := define.Resources["Database"].Commands["clone"].BuildedParams().Get("nw-mask-len")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "default-route":
		param := define.Resources["Database"].Commands["clone"].BuildedParams().Get("default-route")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "replica-user-password":
		param := define.Resources["Database"].Commands["clone"].BuildedParams().Get("replica-user-password")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "source-networks":
		param := define.Resources["Database"].Commands["clone"].BuildedParams().Get("source-networks")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "enable-web-ui":
		param := define.Resources["Database"].Commands["clone"].BuildedParams().Get("enable-web-ui")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "enable-backup":
		param := define.Resources["Database"].Commands["clone"].BuildedParams().Get("enable-backup")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "backup-weekdays":
		param := define.Resources["Database"].Commands["clone"].BuildedParams().Get("backup-weekdays")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "backup-time":
		param := define.Resources["Database"].Commands["clone"].BuildedParams().Get("backup-time")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "name":
		param := define.Resources["Database"].Commands["clone"].BuildedParams().Get("name")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "description", "desc":
		param := define.Resources["Database"].Commands["clone"].BuildedParams().Get("description")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "tags":
		param := define.Resources["Database"].Commands["clone"].BuildedParams().Get("tags")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "icon-id":
		param := define.Resources["Database"].Commands["clone"].BuildedParams().Get("icon-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Database"].Commands["clone"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseReplicaCreateCompleteFlags(ctx command.Context, params *params.ReplicaCreateDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "switch-id":
		param := define.Resources["Database"].Commands["replica-create"].BuildedParams().Get("switch-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ipaddress1", "ip1", "ipaddress", "ip":
		param := define.Resources["Database"].Commands["replica-create"].BuildedParams().Get("ipaddress1")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "nw-mask-len":
		param := define.Resources["Database"].Commands["replica-create"].BuildedParams().Get("nw-mask-len")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "default-route":
		param := define.Resources["Database"].Commands["replica-create"].BuildedParams().Get("default-route")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "name":
		param := define.Resources["Database"].Commands["replica-create"].BuildedParams().Get("name")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "description", "desc":
		param := define.Resources["Database"].Commands["replica-create"].BuildedParams().Get("description")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "tags":
		param := define.Resources["Database"].Commands["replica-create"].BuildedParams().Get("tags")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "icon-id":
		param := define.Resources["Database"].Commands["replica-create"].BuildedParams().Get("icon-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Database"].Commands["replica-create"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseMonitorCpuCompleteFlags(ctx command.Context, params *params.MonitorCpuDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "start":
		param := define.Resources["Database"].Commands["monitor-cpu"].BuildedParams().Get("start")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "end":
		param := define.Resources["Database"].Commands["monitor-cpu"].BuildedParams().Get("end")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "key-format":
		param := define.Resources["Database"].Commands["monitor-cpu"].BuildedParams().Get("key-format")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Database"].Commands["monitor-cpu"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Database"].Commands["monitor-cpu"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseMonitorMemoryCompleteFlags(ctx command.Context, params *params.MonitorMemoryDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "start":
		param := define.Resources["Database"].Commands["monitor-memory"].BuildedParams().Get("start")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "end":
		param := define.Resources["Database"].Commands["monitor-memory"].BuildedParams().Get("end")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "key-format":
		param := define.Resources["Database"].Commands["monitor-memory"].BuildedParams().Get("key-format")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Database"].Commands["monitor-memory"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Database"].Commands["monitor-memory"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseMonitorNicCompleteFlags(ctx command.Context, params *params.MonitorNicDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "start":
		param := define.Resources["Database"].Commands["monitor-nic"].BuildedParams().Get("start")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "end":
		param := define.Resources["Database"].Commands["monitor-nic"].BuildedParams().Get("end")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "key-format":
		param := define.Resources["Database"].Commands["monitor-nic"].BuildedParams().Get("key-format")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Database"].Commands["monitor-nic"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Database"].Commands["monitor-nic"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseMonitorSystemDiskCompleteFlags(ctx command.Context, params *params.MonitorSystemDiskDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "start":
		param := define.Resources["Database"].Commands["monitor-system-disk"].BuildedParams().Get("start")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "end":
		param := define.Resources["Database"].Commands["monitor-system-disk"].BuildedParams().Get("end")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "key-format":
		param := define.Resources["Database"].Commands["monitor-system-disk"].BuildedParams().Get("key-format")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Database"].Commands["monitor-system-disk"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Database"].Commands["monitor-system-disk"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseMonitorBackupDiskCompleteFlags(ctx command.Context, params *params.MonitorBackupDiskDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "start":
		param := define.Resources["Database"].Commands["monitor-backup-disk"].BuildedParams().Get("start")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "end":
		param := define.Resources["Database"].Commands["monitor-backup-disk"].BuildedParams().Get("end")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "key-format":
		param := define.Resources["Database"].Commands["monitor-backup-disk"].BuildedParams().Get("key-format")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Database"].Commands["monitor-backup-disk"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Database"].Commands["monitor-backup-disk"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseMonitorSystemDiskSizeCompleteFlags(ctx command.Context, params *params.MonitorSystemDiskSizeDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "start":
		param := define.Resources["Database"].Commands["monitor-system-disk-size"].BuildedParams().Get("start")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "end":
		param := define.Resources["Database"].Commands["monitor-system-disk-size"].BuildedParams().Get("end")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "key-format":
		param := define.Resources["Database"].Commands["monitor-system-disk-size"].BuildedParams().Get("key-format")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Database"].Commands["monitor-system-disk-size"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Database"].Commands["monitor-system-disk-size"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseMonitorBackupDiskSizeCompleteFlags(ctx command.Context, params *params.MonitorBackupDiskSizeDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "start":
		param := define.Resources["Database"].Commands["monitor-backup-disk-size"].BuildedParams().Get("start")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "end":
		param := define.Resources["Database"].Commands["monitor-backup-disk-size"].BuildedParams().Get("end")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "key-format":
		param := define.Resources["Database"].Commands["monitor-backup-disk-size"].BuildedParams().Get("key-format")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Database"].Commands["monitor-backup-disk-size"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Database"].Commands["monitor-backup-disk-size"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DatabaseLogsCompleteFlags(ctx command.Context, params *params.LogsDatabaseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "log-name", "name":
		param := define.Resources["Database"].Commands["logs"].BuildedParams().Get("log-name")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "follow", "f":
		param := define.Resources["Database"].Commands["logs"].BuildedParams().Get("follow")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "refresh-interval":
		param := define.Resources["Database"].Commands["logs"].BuildedParams().Get("refresh-interval")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "list-log-names":
		param := define.Resources["Database"].Commands["logs"].BuildedParams().Get("list-log-names")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Database"].Commands["logs"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Database"].Commands["logs"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}
