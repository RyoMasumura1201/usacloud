// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-completion'; DO NOT EDIT

package completion

import (
	"fmt"

	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/schema"
)

func LoadBalancerListCompleteFlags(ctx command.Context, params *params.ListLoadBalancerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "name":
		param := define.Resources["LoadBalancer"].Commands["list"].BuildedParams().Get("name")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["LoadBalancer"].Commands["list"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "tags", "selector":
		param := define.Resources["LoadBalancer"].Commands["list"].BuildedParams().Get("tags")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "from", "offset":
		param := define.Resources["LoadBalancer"].Commands["list"].BuildedParams().Get("from")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "max", "limit":
		param := define.Resources["LoadBalancer"].Commands["list"].BuildedParams().Get("max")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "sort":
		param := define.Resources["LoadBalancer"].Commands["list"].BuildedParams().Get("sort")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func LoadBalancerCreateCompleteFlags(ctx command.Context, params *params.CreateLoadBalancerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "switch-id":
		param := define.Resources["LoadBalancer"].Commands["create"].BuildedParams().Get("switch-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "vrid", "VRID":
		param := define.Resources["LoadBalancer"].Commands["create"].BuildedParams().Get("vrid")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "high-availability", "ha":
		param := define.Resources["LoadBalancer"].Commands["create"].BuildedParams().Get("high-availability")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "plan":
		param := define.Resources["LoadBalancer"].Commands["create"].BuildedParams().Get("plan")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ipaddress1", "ip1":
		param := define.Resources["LoadBalancer"].Commands["create"].BuildedParams().Get("ipaddress1")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ipaddress2", "ip2":
		param := define.Resources["LoadBalancer"].Commands["create"].BuildedParams().Get("ipaddress2")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "nw-mask-len":
		param := define.Resources["LoadBalancer"].Commands["create"].BuildedParams().Get("nw-mask-len")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "default-route":
		param := define.Resources["LoadBalancer"].Commands["create"].BuildedParams().Get("default-route")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "name":
		param := define.Resources["LoadBalancer"].Commands["create"].BuildedParams().Get("name")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "description", "desc":
		param := define.Resources["LoadBalancer"].Commands["create"].BuildedParams().Get("description")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "tags":
		param := define.Resources["LoadBalancer"].Commands["create"].BuildedParams().Get("tags")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "icon-id":
		param := define.Resources["LoadBalancer"].Commands["create"].BuildedParams().Get("icon-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func LoadBalancerReadCompleteFlags(ctx command.Context, params *params.ReadLoadBalancerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["LoadBalancer"].Commands["read"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["LoadBalancer"].Commands["read"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func LoadBalancerUpdateCompleteFlags(ctx command.Context, params *params.UpdateLoadBalancerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["LoadBalancer"].Commands["update"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "name":
		param := define.Resources["LoadBalancer"].Commands["update"].BuildedParams().Get("name")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "description", "desc":
		param := define.Resources["LoadBalancer"].Commands["update"].BuildedParams().Get("description")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "tags":
		param := define.Resources["LoadBalancer"].Commands["update"].BuildedParams().Get("tags")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "icon-id":
		param := define.Resources["LoadBalancer"].Commands["update"].BuildedParams().Get("icon-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["LoadBalancer"].Commands["update"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func LoadBalancerDeleteCompleteFlags(ctx command.Context, params *params.DeleteLoadBalancerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "force", "f":
		param := define.Resources["LoadBalancer"].Commands["delete"].BuildedParams().Get("force")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["LoadBalancer"].Commands["delete"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["LoadBalancer"].Commands["delete"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func LoadBalancerBootCompleteFlags(ctx command.Context, params *params.BootLoadBalancerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["LoadBalancer"].Commands["boot"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["LoadBalancer"].Commands["boot"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func LoadBalancerShutdownCompleteFlags(ctx command.Context, params *params.ShutdownLoadBalancerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["LoadBalancer"].Commands["shutdown"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["LoadBalancer"].Commands["shutdown"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func LoadBalancerShutdownForceCompleteFlags(ctx command.Context, params *params.ShutdownForceLoadBalancerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["LoadBalancer"].Commands["shutdown-force"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["LoadBalancer"].Commands["shutdown-force"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func LoadBalancerResetCompleteFlags(ctx command.Context, params *params.ResetLoadBalancerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["LoadBalancer"].Commands["reset"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["LoadBalancer"].Commands["reset"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func LoadBalancerWaitForBootCompleteFlags(ctx command.Context, params *params.WaitForBootLoadBalancerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["LoadBalancer"].Commands["wait-for-boot"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["LoadBalancer"].Commands["wait-for-boot"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func LoadBalancerWaitForDownCompleteFlags(ctx command.Context, params *params.WaitForDownLoadBalancerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["LoadBalancer"].Commands["wait-for-down"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["LoadBalancer"].Commands["wait-for-down"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func LoadBalancerVipInfoCompleteFlags(ctx command.Context, params *params.VipInfoLoadBalancerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["LoadBalancer"].Commands["vip-info"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["LoadBalancer"].Commands["vip-info"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func LoadBalancerVipAddCompleteFlags(ctx command.Context, params *params.VipAddLoadBalancerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "vip":
		param := define.Resources["LoadBalancer"].Commands["vip-add"].BuildedParams().Get("vip")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "port":
		param := define.Resources["LoadBalancer"].Commands["vip-add"].BuildedParams().Get("port")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "delay-loop":
		param := define.Resources["LoadBalancer"].Commands["vip-add"].BuildedParams().Get("delay-loop")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "sorry-server":
		param := define.Resources["LoadBalancer"].Commands["vip-add"].BuildedParams().Get("sorry-server")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "description", "desc":
		param := define.Resources["LoadBalancer"].Commands["vip-add"].BuildedParams().Get("description")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["LoadBalancer"].Commands["vip-add"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["LoadBalancer"].Commands["vip-add"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func LoadBalancerVipUpdateCompleteFlags(ctx command.Context, params *params.VipUpdateLoadBalancerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		param := define.Resources["LoadBalancer"].Commands["vip-update"].BuildedParams().Get("index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "vip":
		param := define.Resources["LoadBalancer"].Commands["vip-update"].BuildedParams().Get("vip")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "port":
		param := define.Resources["LoadBalancer"].Commands["vip-update"].BuildedParams().Get("port")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "delay-loop":
		param := define.Resources["LoadBalancer"].Commands["vip-update"].BuildedParams().Get("delay-loop")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "sorry-server":
		param := define.Resources["LoadBalancer"].Commands["vip-update"].BuildedParams().Get("sorry-server")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "description", "desc":
		param := define.Resources["LoadBalancer"].Commands["vip-update"].BuildedParams().Get("description")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["LoadBalancer"].Commands["vip-update"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["LoadBalancer"].Commands["vip-update"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func LoadBalancerVipDeleteCompleteFlags(ctx command.Context, params *params.VipDeleteLoadBalancerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		param := define.Resources["LoadBalancer"].Commands["vip-delete"].BuildedParams().Get("index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["LoadBalancer"].Commands["vip-delete"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["LoadBalancer"].Commands["vip-delete"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func LoadBalancerServerInfoCompleteFlags(ctx command.Context, params *params.ServerInfoLoadBalancerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "vip-index":
		param := define.Resources["LoadBalancer"].Commands["server-info"].BuildedParams().Get("vip-index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "vip":
		param := define.Resources["LoadBalancer"].Commands["server-info"].BuildedParams().Get("vip")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "port":
		param := define.Resources["LoadBalancer"].Commands["server-info"].BuildedParams().Get("port")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["LoadBalancer"].Commands["server-info"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["LoadBalancer"].Commands["server-info"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func LoadBalancerServerAddCompleteFlags(ctx command.Context, params *params.ServerAddLoadBalancerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "vip-index":
		param := define.Resources["LoadBalancer"].Commands["server-add"].BuildedParams().Get("vip-index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "vip":
		param := define.Resources["LoadBalancer"].Commands["server-add"].BuildedParams().Get("vip")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "port":
		param := define.Resources["LoadBalancer"].Commands["server-add"].BuildedParams().Get("port")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ipaddress", "ip":
		param := define.Resources["LoadBalancer"].Commands["server-add"].BuildedParams().Get("ipaddress")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "protocol":
		param := define.Resources["LoadBalancer"].Commands["server-add"].BuildedParams().Get("protocol")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "path":
		param := define.Resources["LoadBalancer"].Commands["server-add"].BuildedParams().Get("path")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "response-code":
		param := define.Resources["LoadBalancer"].Commands["server-add"].BuildedParams().Get("response-code")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "disabled":
		param := define.Resources["LoadBalancer"].Commands["server-add"].BuildedParams().Get("disabled")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["LoadBalancer"].Commands["server-add"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["LoadBalancer"].Commands["server-add"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func LoadBalancerServerUpdateCompleteFlags(ctx command.Context, params *params.ServerUpdateLoadBalancerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "vip-index":
		param := define.Resources["LoadBalancer"].Commands["server-update"].BuildedParams().Get("vip-index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "vip":
		param := define.Resources["LoadBalancer"].Commands["server-update"].BuildedParams().Get("vip")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "port":
		param := define.Resources["LoadBalancer"].Commands["server-update"].BuildedParams().Get("port")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ipaddress", "ip":
		param := define.Resources["LoadBalancer"].Commands["server-update"].BuildedParams().Get("ipaddress")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "protocol":
		param := define.Resources["LoadBalancer"].Commands["server-update"].BuildedParams().Get("protocol")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "path":
		param := define.Resources["LoadBalancer"].Commands["server-update"].BuildedParams().Get("path")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "response-code":
		param := define.Resources["LoadBalancer"].Commands["server-update"].BuildedParams().Get("response-code")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "disabled":
		param := define.Resources["LoadBalancer"].Commands["server-update"].BuildedParams().Get("disabled")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["LoadBalancer"].Commands["server-update"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["LoadBalancer"].Commands["server-update"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func LoadBalancerServerDeleteCompleteFlags(ctx command.Context, params *params.ServerDeleteLoadBalancerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "vip-index":
		param := define.Resources["LoadBalancer"].Commands["server-delete"].BuildedParams().Get("vip-index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "vip":
		param := define.Resources["LoadBalancer"].Commands["server-delete"].BuildedParams().Get("vip")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "port":
		param := define.Resources["LoadBalancer"].Commands["server-delete"].BuildedParams().Get("port")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ipaddress", "ip":
		param := define.Resources["LoadBalancer"].Commands["server-delete"].BuildedParams().Get("ipaddress")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["LoadBalancer"].Commands["server-delete"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["LoadBalancer"].Commands["server-delete"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func LoadBalancerMonitorCompleteFlags(ctx command.Context, params *params.MonitorLoadBalancerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "start":
		param := define.Resources["LoadBalancer"].Commands["monitor"].BuildedParams().Get("start")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "end":
		param := define.Resources["LoadBalancer"].Commands["monitor"].BuildedParams().Get("end")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "key-format":
		param := define.Resources["LoadBalancer"].Commands["monitor"].BuildedParams().Get("key-format")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["LoadBalancer"].Commands["monitor"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["LoadBalancer"].Commands["monitor"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out", "o":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}
