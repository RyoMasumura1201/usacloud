// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-completion'; DO NOT EDIT

package completion

import (
	"fmt"

	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/params"
)

func MobileGatewayListCompleteArgs(ctx command.Context, params *params.ListMobileGatewayParam, cur, prev, commandName string) {

}

func MobileGatewayCreateCompleteArgs(ctx command.Context, params *params.CreateMobileGatewayParam, cur, prev, commandName string) {

}

func MobileGatewayReadCompleteArgs(ctx command.Context, params *params.ReadMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewayUpdateCompleteArgs(ctx command.Context, params *params.UpdateMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewayDeleteCompleteArgs(ctx command.Context, params *params.DeleteMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewayBootCompleteArgs(ctx command.Context, params *params.BootMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewayShutdownCompleteArgs(ctx command.Context, params *params.ShutdownMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewayShutdownForceCompleteArgs(ctx command.Context, params *params.ShutdownForceMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewayResetCompleteArgs(ctx command.Context, params *params.ResetMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewayWaitForBootCompleteArgs(ctx command.Context, params *params.WaitForBootMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewayWaitForDownCompleteArgs(ctx command.Context, params *params.WaitForDownMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewayInterfaceInfoCompleteArgs(ctx command.Context, params *params.InterfaceInfoMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewayInterfaceConnectCompleteArgs(ctx command.Context, params *params.InterfaceConnectMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewayInterfaceUpdateCompleteArgs(ctx command.Context, params *params.InterfaceUpdateMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewayInterfaceDisconnectCompleteArgs(ctx command.Context, params *params.InterfaceDisconnectMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewayTrafficControlInfoCompleteArgs(ctx command.Context, params *params.TrafficControlInfoMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewayTrafficControlEnableCompleteArgs(ctx command.Context, params *params.TrafficControlEnableMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewayTrafficControlUpdateCompleteArgs(ctx command.Context, params *params.TrafficControlUpdateMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewayTrafficControlDisableCompleteArgs(ctx command.Context, params *params.TrafficControlDisableMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewayStaticRouteInfoCompleteArgs(ctx command.Context, params *params.StaticRouteInfoMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewayStaticRouteAddCompleteArgs(ctx command.Context, params *params.StaticRouteAddMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewayStaticRouteUpdateCompleteArgs(ctx command.Context, params *params.StaticRouteUpdateMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewayStaticRouteDeleteCompleteArgs(ctx command.Context, params *params.StaticRouteDeleteMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewaySimInfoCompleteArgs(ctx command.Context, params *params.SimInfoMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewaySimAddCompleteArgs(ctx command.Context, params *params.SimAddMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewaySimUpdateCompleteArgs(ctx command.Context, params *params.SimUpdateMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewaySimDeleteCompleteArgs(ctx command.Context, params *params.SimDeleteMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewaySimRouteInfoCompleteArgs(ctx command.Context, params *params.SimRouteInfoMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewaySimRouteAddCompleteArgs(ctx command.Context, params *params.SimRouteAddMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewaySimRouteUpdateCompleteArgs(ctx command.Context, params *params.SimRouteUpdateMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewaySimRouteDeleteCompleteArgs(ctx command.Context, params *params.SimRouteDeleteMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewayDnsUpdateCompleteArgs(ctx command.Context, params *params.DnsUpdateMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func MobileGatewayLogsCompleteArgs(ctx command.Context, params *params.LogsMobileGatewayParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetMobileGatewayAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.MobileGateways {
		fmt.Println(res.MobileGateways[i].ID)
		var target interface{} = &res.MobileGateways[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}
