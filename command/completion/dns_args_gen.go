// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-completion'; DO NOT EDIT

package completion

import (
	"fmt"

	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/params"
)

func DNSListCompleteArgs(ctx command.Context, params *params.ListDNSParam, cur, prev, commandName string) {

}

func DNSRecordInfoCompleteArgs(ctx command.Context, params *params.RecordInfoDNSParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetDNSAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.CommonServiceDNSItems {
		fmt.Println(res.CommonServiceDNSItems[i].ID)
		var target interface{} = &res.CommonServiceDNSItems[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func DNSRecordBulkUpdateCompleteArgs(ctx command.Context, params *params.RecordBulkUpdateDNSParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetDNSAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.CommonServiceDNSItems {
		fmt.Println(res.CommonServiceDNSItems[i].ID)
		var target interface{} = &res.CommonServiceDNSItems[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func DNSCreateCompleteArgs(ctx command.Context, params *params.CreateDNSParam, cur, prev, commandName string) {

}

func DNSRecordAddCompleteArgs(ctx command.Context, params *params.RecordAddDNSParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetDNSAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.CommonServiceDNSItems {
		fmt.Println(res.CommonServiceDNSItems[i].ID)
		var target interface{} = &res.CommonServiceDNSItems[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func DNSReadCompleteArgs(ctx command.Context, params *params.ReadDNSParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetDNSAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.CommonServiceDNSItems {
		fmt.Println(res.CommonServiceDNSItems[i].ID)
		var target interface{} = &res.CommonServiceDNSItems[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func DNSRecordUpdateCompleteArgs(ctx command.Context, params *params.RecordUpdateDNSParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetDNSAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.CommonServiceDNSItems {
		fmt.Println(res.CommonServiceDNSItems[i].ID)
		var target interface{} = &res.CommonServiceDNSItems[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func DNSRecordDeleteCompleteArgs(ctx command.Context, params *params.RecordDeleteDNSParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetDNSAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.CommonServiceDNSItems {
		fmt.Println(res.CommonServiceDNSItems[i].ID)
		var target interface{} = &res.CommonServiceDNSItems[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func DNSUpdateCompleteArgs(ctx command.Context, params *params.UpdateDNSParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetDNSAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.CommonServiceDNSItems {
		fmt.Println(res.CommonServiceDNSItems[i].ID)
		var target interface{} = &res.CommonServiceDNSItems[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}

func DNSDeleteCompleteArgs(ctx command.Context, params *params.DeleteDNSParam, cur, prev, commandName string) {

	if !command.GlobalOption.Valid {
		return
	}

	client := ctx.GetAPIClient()
	finder := client.GetDNSAPI()
	finder.SetEmpty()

	// call Find()
	res, err := finder.Find()
	if err != nil {
		return
	}

	type nameHolder interface {
		GetName() string
	}

	for i := range res.CommonServiceDNSItems {
		fmt.Println(res.CommonServiceDNSItems[i].ID)
		var target interface{} = &res.CommonServiceDNSItems[i]
		if v, ok := target.(nameHolder); ok {
			fmt.Println(v.GetName())
		}

	}

}
