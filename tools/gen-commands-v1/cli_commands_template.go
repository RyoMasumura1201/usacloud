// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

var cliCommandsTemplate = `// Code generated by 'github.com/sacloud/usacloud/tools/gen-commands-v1'; DO NOT EDIT

package {{ .PackageDirName }}

import (
	"errors"
	"fmt"

	"github.com/sacloud/libsacloud/v2/sacloud/types"
	"github.com/sacloud/usacloud/pkg/funcs/{{ .PackageDirName }}"
	"github.com/sacloud/usacloud/pkg/params"
	"github.com/sacloud/usacloud/pkg/term"
	"github.com/sacloud/usacloud/pkg/util"
	"github.com/spf13/cobra"
)

// {{ .CLIVariableFuncName }} represents the command to manage SAKURA Cloud {{ .Name }}
func {{ .CLIVariableFuncName }}() *cobra.Command {
	return &cobra.Command {
		Use:   "{{ .CLIName }}",
		{{ if .Aliases }}Aliases: []string{ {{ .AliasesLiteral }} },{{ end }}
		Short: "{{ .Usage }}",
		Long: ` + "`{{.Usage}}`" + `,
		RunE: func(cmd *cobra.Command, args []string) error {
		{{ if .DefaultCommand -}}
			return base.RunDefaultCmd(cmd, args, "{{.DefaultCommand}}")
		{{ else -}}
			cmd.HelpFunc()(cmd,args)
			return nil
		{{ end -}}
		},
	}
}

{{ range .Commands }}{{ if .Parameters }}
func {{ .CLIVariableFuncName }}() *cobra.Command {
	{{ .InputParameterVariable }} := New{{ .CLICommandParameterTypeName }}()
	cmd := &cobra.Command{
		Use:   "{{ .Name }}",
		{{ if .Aliases }}Aliases: []string{ {{ .AliasesLiteral }} },{{ end }}
		Short: "{{ .Usage }}",
		Long: ` + "`{{ .Usage }}`" + `,
		SilenceUsage: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext("{{ .Resource.CLIName }}", "{{ .CLIName }}", root.Command.PersistentFlags(), args, {{ .InputParameterVariable }})
			if err != nil {
				return err
			}

			{{ if .ExperimentWarning -}}
			// Experiment warning
			ctx.PrintWarning("{{.ExperimentWarning}}")
			{{ end -}}

			{{/* TODO あとで考える */}}
			//if {{ .InputParameterVariable }}.GenerateSkeleton {
			//	return generateSkeleton(ctx, {{ .InputParameterVariable }})
			//}
			
			
			{{/* TODO あとで考える */}}
			{{ if .MultipleArgToIdParams -}}
			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			// ids, err := {{ .ArgToIdFunc }}(ctx, {{ .InputParameterVariable }})
			// if err != nil {
			// 	return err
			// }
			var ids []types.ID
			{{ end -}}

			{{ if .NeedConfirm }}
			// confirm
			if !{{.InputParameterVariable}}.AssumeYes {
				if !term.IsTerminal(){
				    return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := util.ConfirmContinue("{{.ConfirmMessage}}", ctx.IO().In(), ctx.IO().Out(){{ if .MultipleArgToIdParams }}, ids...{{ end }})
				if err != nil || !result {
					return err
				}
			}
			{{ end }}

			{{/* TODO あとで考える */}}
			{{ if .MultipleArgToIdParams -}}
			// TODO v1で置き換えるまでの暫定実装
			// var wg sync.WaitGroup
			// var errs []error
			// for _ , id := range ids {
			// 	wg.Add(1)
			// 	go func(ctx cli.Context, p *params.{{ .InputParameterTypeName }}) {
			// 		err := cli.WrapError(ctx, {{ .PackageDirName }}.{{ .FunctionName }}(ctx, p))
			// 		if err != nil {
			// 			errs = append(errs, err)
			// 		}
			// 		wg.Done()
			// 	}(ctx.WithID(id), {{ .InputParameterVariable }}.WithID(id))
			// }
			// wg.Wait()
			//return cli.FlattenErrors(errs)
			return cli.WrapError(ctx, {{ .ServiceCommandFuncName }}(ctx, {{ .InputParameterVariable }}))
			{{ else }}
			return cli.WrapError(ctx, {{ .ServiceCommandFuncName }}(ctx, {{ .InputParameterVariable }}))
			{{ end }}
		},
	}

	{{ if .Parameters -}}
	{{ .InputParameterVariable }}.SetupCobraCommandFlags(cmd)
	{{ end -}}

	return cmd
}
{{ end }}{{ end }}
`
