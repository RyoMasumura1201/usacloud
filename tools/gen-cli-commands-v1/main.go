// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"log"
	"path/filepath"
	"text/template"

	"github.com/sacloud/usacloud/tools/utils"

	"github.com/sacloud/usacloud/tools"
)

var (
	destination = "src/github.com/sacloud/usacloud/pkg/cmd"
	ctx         = tools.NewGenerateContext()
)

func main() {
	log.SetFlags(0)
	log.SetPrefix("gen-cli-commands: ")

	for _, resource := range ctx.Resources {
		for _, command := range resource.Commands {
			// TODO 実験的実装、パラメータが設定されている場合だけ処理する
			if command.Parameters == nil {
				continue
			}

			filePath := filepath.Join(destination, resource.PackageDirName(), command.CLICommandGeneratedSourceFile())
			fileFullPath := filepath.Join(ctx.Gopath(), filePath)

			src, err := generateSource(command)
			if err != nil {
				log.Fatalf("writing output: %s", err)
			}

			err = ioutil.WriteFile(fileFullPath, utils.Sformat([]byte(src)), 0644)
			if err != nil {
				log.Fatalf("writing output: %s", err)
			}
			fmt.Printf("generated: %s\n", filePath)
		}
	}
}

func generateSource(command *tools.Command) (string, error) {
	buf := bytes.NewBufferString("")
	t := template.New("t")
	template.Must(t.Parse(srcTemplate))
	err := t.Execute(buf, command)
	command.Resource.PackageDirName()
	return buf.String(), err
}

var srcTemplate = `// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-commands-v1'; DO NOT EDIT

package {{ .PackageDirName }}

import (
	"github.com/sacloud/libsacloud/v2/sacloud/pointer"
	"github.com/sacloud/libsacloud/v2/sacloud/types"
	"github.com/sacloud/usacloud/pkg/cmd/base"
	"github.com/spf13/pflag"
)

func (p *{{.CLICommandParameterTypeName}}) BuildFlags(fs *pflag.FlagSet) {
	{{ .CLIFlagDefinitionStatements "p" "fs" }} 
	fs.SetNormalizeFunc(p.normalizeFlagName)
}

func (p *{{.CLICommandParameterTypeName}}) normalizeFlagName(_ *pflag.FlagSet, name string) pflag.NormalizedName {
{{ if .HasAliases -}}
	switch name {
{{ range .Fields }}{{ $name := .FlagName }}{{ range .Aliases -}}
	case "{{.}}":
		name = "{{ $name }}"
{{ end }}{{ end -}}
	}
{{ end -}}
	return pflag.NormalizedName(name)
}

func (p *{{.CLICommandParameterTypeName}}) CategorizedFlagSets(cmd *cobra.Command) []*base.FlagSet {
	var sets []*base.FlagSet
	{{ range .CategorizedParameterFields -}}
	{
		var fs *pflag.FlagSet
		fs = pflag.NewFlagSet("{{.Key}}", pflag.ContinueOnError)
		{{ range .Fields -}}
		fs.AddFlag(cmd.LocalFlags().Lookup("{{ .FlagName }}"))
		{{ end -}}
		sets = append(sets, &base.FlagSet{
			Title: "{{.DisplayName}}",
			Flags: fs,
		})
	}
	{{ end }}
	return sets	
}
`
