// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"log"
	"path/filepath"

	"github.com/sacloud/usacloud/tools"
	"github.com/sacloud/usacloud/tools/utils"
)

var (
	destination = "pkg/cmd"
	ctx         = tools.NewGenerateContext()
)

func main() {
	log.SetFlags(0)
	log.SetPrefix("gen-cli-params-v1: ")

	for _, resource := range ctx.Resources {
		// TODO 実験的実装、パラメータが設定されている場合だけ処理する
		hasV1Command := false
		for _, command := range resource.Commands {
			// コマンド単位のファイルを生成

			// TODO 実験的実装、パラメータが設定されている場合だけ処理する
			if command.Parameters == nil {
				continue
			}
			hasV1Command = true

			filePath := filepath.Join(destination, resource.PackageDirName(), command.CLICommandGeneratedSourceFile())
			utils.WriteFileWithTemplate(&utils.TemplateConfig{
				OutputPath: filepath.Join(utils.ProjectRootPath(), filePath),
				Template:   flagsTemplate,
				Parameter:  command,
			})
		}

		// リソース単位のファイルを生成
		if hasV1Command {
			filePath := filepath.Join(destination, resource.PackageDirName(), resource.ServiceSourceFileName())
			utils.WriteFileWithTemplate(&utils.TemplateConfig{
				OutputPath: filepath.Join(utils.ProjectRootPath(), filePath),
				Template:   serviceCommandTemplate,
				Parameter:  resource,
			})
		}
	}
}

var flagsTemplate = `// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-params-v1'; DO NOT EDIT

package {{ .PackageDirName }}

import (
	service "github.com/sacloud/libsacloud/v2/helper/service/{{ .PackageDirName }}"
	"github.com/sacloud/libsacloud/v2/sacloud/pointer"
	"github.com/sacloud/libsacloud/v2/sacloud/types"
	"github.com/sacloud/usacloud/pkg/cmd/base"
	"github.com/sacloud/usacloud/pkg/cmd/conv"
	"github.com/spf13/pflag"
)

func (p *{{.CLICommandParameterTypeName}}) BuildFlags(fs *pflag.FlagSet) {
	{{ .CLIFlagDefinitionStatements "p" "fs" }} 
	fs.SetNormalizeFunc(p.normalizeFlagName)
}

func (p *{{.CLICommandParameterTypeName}}) normalizeFlagName(_ *pflag.FlagSet, name string) pflag.NormalizedName {
{{ if .HasAliases -}}
	switch name {
{{ range .Fields }}{{ $name := .FlagName }}{{ range .Aliases -}}
	case "{{.}}":
		name = "{{ $name }}"
{{ end }}{{ end -}}
	}
{{ end -}}
	return pflag.NormalizedName(name)
}

func (p *{{.CLICommandParameterTypeName}}) CategorizedFlagSets(cmd *cobra.Command) []*base.FlagSet {
	var sets []*base.FlagSet
	{{ range .CategorizedParameterFields -}}
	{
		var fs *pflag.FlagSet
		fs = pflag.NewFlagSet("{{.Key}}", pflag.ContinueOnError)
		{{ range .Fields -}}
		fs.AddFlag(cmd.LocalFlags().Lookup("{{ .FlagName }}"))
		{{ end -}}
		sets = append(sets, &base.FlagSet{
			Title: "{{.DisplayName}}",
			Flags: fs,
		})
	}
	{{ end }}
	return sets	
}

func (p *{{.CLICommandParameterTypeName}}) ServiceRequest() (*service.{{.ServiceRequestTypeName}}, error) {
	req := &service.{{.ServiceRequestTypeName}}{}
	return req, conv.ConvertTo(p, req)
}
`

var serviceCommandTemplate = `// Code generated by 'github.com/sacloud/usacloud/tools/gen-service-commands'; DO NOT EDIT

package {{ .PackageDirName }}

import (
	service "github.com/sacloud/libsacloud/v2/helper/service/{{ .PackageDirName }}"
	"github.com/sacloud/libsacloud/v2/sacloud/pointer"
	"github.com/sacloud/libsacloud/v2/sacloud/types"
	"github.com/sacloud/usacloud/pkg/cmd/base"
	"github.com/sacloud/usacloud/pkg/cmd/conv"
	"github.com/spf13/pflag"
)

{{ range .Commands }}{{ if .Parameters }}
func {{ .ServiceCommandFuncName }}(ctx cli.Context, parameter *{{.CLICommandParameterTypeName}}) error { 
	svc := service.New(ctx.Client())

	req, err := parameter.ServiceRequest()
	if err != nil {
		return err
	}
	if err := req.Validate(); err != nil {
		return err
	}

	var result interface{}
	err = ctx.ExecWithProgress(func() error {
		res, err := svc.{{ .ServiceFuncName }}(ctx, req)
		if err != nil {
			return err
		}
		result = res
		return nil
	})

	if err != nil {
		return fmt.Errorf("failed to run libsacloud service: %s", err)
	}
	return ctx.Output().Print(result)
}
{{ end }}{{ end }}
`
